
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  0800ef00  0800ef00  0001ef00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f6a4  0800f6a4  00020264  2**0
                  CONTENTS
  4 .ARM          00000000  0800f6a4  0800f6a4  00020264  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f6a4  0800f6a4  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6a4  0800f6a4  0001f6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6a8  0800f6a8  0001f6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800f6ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020264  2**0
                  CONTENTS
 10 .bss          000027bc  20000268  20000268  00020268  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002a24  20002a24  00020268  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 14 .debug_info   000201c5  00000000  00000000  000202d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004aa1  00000000  00000000  0004049c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000017c8  00000000  00000000  00044f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001259  00000000  00000000  00046708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000259af  00000000  00000000  00047961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020dcd  00000000  00000000  0006d310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d78d8  00000000  00000000  0008e0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007148  00000000  00000000  001659b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  0016cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000268 	.word	0x20000268
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eee4 	.word	0x0800eee4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000026c 	.word	0x2000026c
 80001dc:	0800eee4 	.word	0x0800eee4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* creation of Car_Conrol_Mode */
	Car_Conrol_ModeHandle = osMutexNew(&Car_Conrol_Mode_attributes);
 8000bfc:	4819      	ldr	r0, [pc, #100]	; (8000c64 <MX_FREERTOS_Init+0x6c>)
 8000bfe:	f008 fb8b 	bl	8009318 <osMutexNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_FREERTOS_Init+0x70>)
 8000c06:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000c08:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <MX_FREERTOS_Init+0x74>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4818      	ldr	r0, [pc, #96]	; (8000c70 <MX_FREERTOS_Init+0x78>)
 8000c0e:	f008 f8fb 	bl	8008e08 <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <MX_FREERTOS_Init+0x7c>)
 8000c16:	6013      	str	r3, [r2, #0]

	/* creation of ultrasonics_read */
	ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 8000c18:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <MX_FREERTOS_Init+0x80>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4817      	ldr	r0, [pc, #92]	; (8000c7c <MX_FREERTOS_Init+0x84>)
 8000c1e:	f008 f8f3 	bl	8008e08 <osThreadNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a16      	ldr	r2, [pc, #88]	; (8000c80 <MX_FREERTOS_Init+0x88>)
 8000c26:	6013      	str	r3, [r2, #0]

	/* creation of car_next_step */
	car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 8000c28:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <MX_FREERTOS_Init+0x8c>)
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4816      	ldr	r0, [pc, #88]	; (8000c88 <MX_FREERTOS_Init+0x90>)
 8000c2e:	f008 f8eb 	bl	8008e08 <osThreadNew>
 8000c32:	4603      	mov	r3, r0
 8000c34:	4a15      	ldr	r2, [pc, #84]	; (8000c8c <MX_FREERTOS_Init+0x94>)
 8000c36:	6013      	str	r3, [r2, #0]

	/* creation of Automatic_Parking */
	Automatic_ParkingHandle = osThreadNew(RTOS_Automatic_Parking, NULL, &Automatic_Parking_attributes);
 8000c38:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_FREERTOS_Init+0x98>)
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4815      	ldr	r0, [pc, #84]	; (8000c94 <MX_FREERTOS_Init+0x9c>)
 8000c3e:	f008 f8e3 	bl	8008e08 <osThreadNew>
 8000c42:	4603      	mov	r3, r0
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <MX_FREERTOS_Init+0xa0>)
 8000c46:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of Car_mode */
	Car_modeHandle = osEventFlagsNew(&Car_mode_attributes);
 8000c48:	4814      	ldr	r0, [pc, #80]	; (8000c9c <MX_FREERTOS_Init+0xa4>)
 8000c4a:	f008 fa43 	bl	80090d4 <osEventFlagsNew>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_FREERTOS_Init+0xa8>)
 8000c52:	6013      	str	r3, [r2, #0]

	/* creation of Parking_side */
	Parking_sideHandle = osEventFlagsNew(&Parking_side_attributes);
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_FREERTOS_Init+0xac>)
 8000c56:	f008 fa3d 	bl	80090d4 <osEventFlagsNew>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <MX_FREERTOS_Init+0xb0>)
 8000c5e:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	0800f2cc 	.word	0x0800f2cc
 8000c68:	20000294 	.word	0x20000294
 8000c6c:	0800f23c 	.word	0x0800f23c
 8000c70:	08000cad 	.word	0x08000cad
 8000c74:	20000284 	.word	0x20000284
 8000c78:	0800f260 	.word	0x0800f260
 8000c7c:	08000ced 	.word	0x08000ced
 8000c80:	20000288 	.word	0x20000288
 8000c84:	0800f284 	.word	0x0800f284
 8000c88:	08000dfd 	.word	0x08000dfd
 8000c8c:	2000028c 	.word	0x2000028c
 8000c90:	0800f2a8 	.word	0x0800f2a8
 8000c94:	08000ea9 	.word	0x08000ea9
 8000c98:	20000290 	.word	0x20000290
 8000c9c:	0800f2dc 	.word	0x0800f2dc
 8000ca0:	20000298 	.word	0x20000298
 8000ca4:	0800f2ec 	.word	0x0800f2ec
 8000ca8:	2000029c 	.word	0x2000029c

08000cac <DefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DefaultTask */
	ECU_Bluetooth_ReciveData(&bluetooth);
 8000cb4:	480a      	ldr	r0, [pc, #40]	; (8000ce0 <DefaultTask+0x34>)
 8000cb6:	f002 f8dd 	bl	8002e74 <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <DefaultTask+0x38>)
 8000cbc:	f002 f99a 	bl	8002ff4 <ECU_Motor_GeneratePWM>

	/* Infinite loop */
	for(;;)
	{
		//printf("DefaultTask is Running\n");
		osThreadSuspend(Automatic_ParkingHandle);
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <DefaultTask+0x3c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f008 f96f 	bl	8008fa8 <osThreadSuspend>
		/* Suspend itself */
		osThreadSuspend(osThreadGetId());
 8000cca:	f008 f947 	bl	8008f5c <osThreadGetId>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 f969 	bl	8008fa8 <osThreadSuspend>
		osDelay(1000);
 8000cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cda:	f008 f9cd 	bl	8009078 <osDelay>
		osThreadSuspend(Automatic_ParkingHandle);
 8000cde:	e7ef      	b.n	8000cc0 <DefaultTask+0x14>
 8000ce0:	20000068 	.word	0x20000068
 8000ce4:	20000058 	.word	0x20000058
 8000ce8:	20000290 	.word	0x20000290

08000cec <RTOS_Ultrasonics_Read>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
		  ECU_Busser_StopPWM(&busser);
	  }*/
		//printf("IR_Right_Rear in = %d\n",ECU_IR_IsActive(&IR_Right_Rear));
		//printf("IR_Left_Rear in = %d\n",ECU_IR_IsActive(&IR_Left_Rear));

		if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000cf4:	4b31      	ldr	r3, [pc, #196]	; (8000dbc <RTOS_Ultrasonics_Read+0xd0>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b77      	cmp	r3, #119	; 0x77
 8000cfa:	d10a      	bne.n	8000d12 <RTOS_Ultrasonics_Read+0x26>
			osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <RTOS_Ultrasonics_Read+0xd4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2101      	movs	r1, #1
 8000d02:	4618      	mov	r0, r3
 8000d04:	f008 fa90 	bl	8009228 <osEventFlagsClear>
			osThreadSuspend(Automatic_ParkingHandle);
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <RTOS_Ultrasonics_Read+0xd8>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f008 f94b 	bl	8008fa8 <osThreadSuspend>
		}
		else{/* DO NOTHING */}

		if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == RIGHT_PARKING_SIDE)
 8000d12:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <RTOS_Ultrasonics_Read+0xd4>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f008 faca 	bl	80092b0 <osEventFlagsGet>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10c      	bne.n	8000d40 <RTOS_Ultrasonics_Read+0x54>
		{
			ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 8000d26:	4828      	ldr	r0, [pc, #160]	; (8000dc8 <RTOS_Ultrasonics_Read+0xdc>)
 8000d28:	f002 fc7c 	bl	8003624 <ECU_Ultrasonic_Read>
			ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000d2c:	4827      	ldr	r0, [pc, #156]	; (8000dcc <RTOS_Ultrasonics_Read+0xe0>)
 8000d2e:	f002 fc79 	bl	8003624 <ECU_Ultrasonic_Read>
			ECU_Ultrasonic_Read(&Rear_ultrasonic);
 8000d32:	4827      	ldr	r0, [pc, #156]	; (8000dd0 <RTOS_Ultrasonics_Read+0xe4>)
 8000d34:	f002 fc76 	bl	8003624 <ECU_Ultrasonic_Read>
			ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 8000d38:	4826      	ldr	r0, [pc, #152]	; (8000dd4 <RTOS_Ultrasonics_Read+0xe8>)
 8000d3a:	f002 fc73 	bl	8003624 <ECU_Ultrasonic_Read>
 8000d3e:	e015      	b.n	8000d6c <RTOS_Ultrasonics_Read+0x80>
		}
		else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == LEFT_PARKING_SIDE)
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <RTOS_Ultrasonics_Read+0xd4>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f008 fab3 	bl	80092b0 <osEventFlagsGet>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f003 0302 	and.w	r3, r3, #2
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d10b      	bne.n	8000d6c <RTOS_Ultrasonics_Read+0x80>
		{
			ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 8000d54:	4820      	ldr	r0, [pc, #128]	; (8000dd8 <RTOS_Ultrasonics_Read+0xec>)
 8000d56:	f002 fc65 	bl	8003624 <ECU_Ultrasonic_Read>
			ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <RTOS_Ultrasonics_Read+0xe0>)
 8000d5c:	f002 fc62 	bl	8003624 <ECU_Ultrasonic_Read>
			ECU_Ultrasonic_Read(&Rear_ultrasonic);
 8000d60:	481b      	ldr	r0, [pc, #108]	; (8000dd0 <RTOS_Ultrasonics_Read+0xe4>)
 8000d62:	f002 fc5f 	bl	8003624 <ECU_Ultrasonic_Read>
			ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 8000d66:	481d      	ldr	r0, [pc, #116]	; (8000ddc <RTOS_Ultrasonics_Read+0xf0>)
 8000d68:	f002 fc5c 	bl	8003624 <ECU_Ultrasonic_Read>
		else{}

		//ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
		//ECU_Ultrasonic_Read(&LeftRear_ultrasonic);

		printf("Front_ultrasonic distance is %f\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d72:	481c      	ldr	r0, [pc, #112]	; (8000de4 <RTOS_Ultrasonics_Read+0xf8>)
 8000d74:	f00c f860 	bl	800ce38 <iprintf>
		printf("RightFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d7e:	481a      	ldr	r0, [pc, #104]	; (8000de8 <RTOS_Ultrasonics_Read+0xfc>)
 8000d80:	f00c f85a 	bl	800ce38 <iprintf>
		printf("RightRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d86:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <RTOS_Ultrasonics_Read+0x100>)
 8000d8c:	f00c f854 	bl	800ce38 <iprintf>
		printf("LeftFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d92:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000d96:	4816      	ldr	r0, [pc, #88]	; (8000df0 <RTOS_Ultrasonics_Read+0x104>)
 8000d98:	f00c f84e 	bl	800ce38 <iprintf>
		printf("LeftRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000d9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000da2:	4814      	ldr	r0, [pc, #80]	; (8000df4 <RTOS_Ultrasonics_Read+0x108>)
 8000da4:	f00c f848 	bl	800ce38 <iprintf>
		printf("Rear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <RTOS_Ultrasonics_Read+0xf4>)
 8000daa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000dae:	4812      	ldr	r0, [pc, #72]	; (8000df8 <RTOS_Ultrasonics_Read+0x10c>)
 8000db0:	f00c f842 	bl	800ce38 <iprintf>

		osDelay(70);
 8000db4:	2046      	movs	r0, #70	; 0x46
 8000db6:	f008 f95f 	bl	8009078 <osDelay>
		if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 8000dba:	e79b      	b.n	8000cf4 <RTOS_Ultrasonics_Read+0x8>
 8000dbc:	20000074 	.word	0x20000074
 8000dc0:	20000298 	.word	0x20000298
 8000dc4:	20000290 	.word	0x20000290
 8000dc8:	20000018 	.word	0x20000018
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	2000003c 	.word	0x2000003c
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000030 	.word	0x20000030
 8000ddc:	20000024 	.word	0x20000024
 8000de0:	20000668 	.word	0x20000668
 8000de4:	0800ef70 	.word	0x0800ef70
 8000de8:	0800ef94 	.word	0x0800ef94
 8000dec:	0800efbc 	.word	0x0800efbc
 8000df0:	0800efe4 	.word	0x0800efe4
 8000df4:	0800f00c 	.word	0x0800f00c
 8000df8:	0800f030 	.word	0x0800f030

08000dfc <RTOS_Car_Next_Step>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN RTOS_Car_Next_Step */
	/* Infinite loop */
	for(;;)
	{
		//printf("RTOS_Car_Next_Step is Running\n");
		if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <RTOS_Car_Next_Step+0x98>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b57      	cmp	r3, #87	; 0x57
 8000e0a:	d116      	bne.n	8000e3a <RTOS_Car_Next_Step+0x3e>
			osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000e0c:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f008 f9b0 	bl	8009178 <osEventFlagsSet>
			osEventFlagsClear(Car_modeHandle, PARKING_SIDE_BIT);
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f008 fa02 	bl	8009228 <osEventFlagsClear>
			osThreadResume(Automatic_ParkingHandle);
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <RTOS_Car_Next_Step+0xa0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f008 f8f1 	bl	8009010 <osThreadResume>
			osThreadSuspend(car_next_stepHandle);
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <RTOS_Car_Next_Step+0xa4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f008 f8b8 	bl	8008fa8 <osThreadSuspend>
 8000e38:	e019      	b.n	8000e6e <RTOS_Car_Next_Step+0x72>
		}
		else if( (Bluetooth_RX_Data == AUTO_PARK_LEFT) ){
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <RTOS_Car_Next_Step+0x98>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b55      	cmp	r3, #85	; 0x55
 8000e40:	d115      	bne.n	8000e6e <RTOS_Car_Next_Step+0x72>
			osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2101      	movs	r1, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f008 f995 	bl	8009178 <osEventFlagsSet>
			osEventFlagsSet(Car_modeHandle, PARKING_SIDE_BIT);
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2102      	movs	r1, #2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f008 f98f 	bl	8009178 <osEventFlagsSet>
			osThreadResume(Automatic_ParkingHandle);
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <RTOS_Car_Next_Step+0xa0>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f008 f8d6 	bl	8009010 <osThreadResume>
			osThreadSuspend(car_next_stepHandle);
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <RTOS_Car_Next_Step+0xa4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f008 f89d 	bl	8008fa8 <osThreadSuspend>
		}
		else{/* DO NOTHING */}

		if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == MANUAL_CONTROL_MODE){
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <RTOS_Car_Next_Step+0x9c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f008 fa1c 	bl	80092b0 <osEventFlagsGet>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <RTOS_Car_Next_Step+0x8e>
			//printf("Mobile Control Mode\n");
			ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 8000e82:	4904      	ldr	r1, [pc, #16]	; (8000e94 <RTOS_Car_Next_Step+0x98>)
 8000e84:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <RTOS_Car_Next_Step+0xa8>)
 8000e86:	f002 f97b 	bl	8003180 <ECU_Motor_NextStep>
		}
		else{/* DO NOTHING */}

		osDelay(150);
 8000e8a:	2096      	movs	r0, #150	; 0x96
 8000e8c:	f008 f8f4 	bl	8009078 <osDelay>
		if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000e90:	e7b8      	b.n	8000e04 <RTOS_Car_Next_Step+0x8>
 8000e92:	bf00      	nop
 8000e94:	20000074 	.word	0x20000074
 8000e98:	20000298 	.word	0x20000298
 8000e9c:	20000290 	.word	0x20000290
 8000ea0:	2000028c 	.word	0x2000028c
 8000ea4:	20000058 	.word	0x20000058

08000ea8 <RTOS_Automatic_Parking>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_RTOS_Automatic_Parking */
void RTOS_Automatic_Parking(void *argument)
{
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN RTOS_Automatic_Parking */
	uint8_t front_ultrasonic = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	72fb      	strb	r3, [r7, #11]
	uint8_t rear_ultrasonic = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	72bb      	strb	r3, [r7, #10]
	uint32_t time_out = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{

		if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == AUTOMATIC_PARKING_MODE)
 8000ebc:	4bb3      	ldr	r3, [pc, #716]	; (800118c <RTOS_Automatic_Parking+0x2e4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f008 f9f5 	bl	80092b0 <osEventFlagsGet>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	f040 82cb 	bne.w	8001468 <RTOS_Automatic_Parking+0x5c0>
		{
			printf("-------------------------- Automatic Parking Mode ----------------------\n");
 8000ed2:	48af      	ldr	r0, [pc, #700]	; (8001190 <RTOS_Automatic_Parking+0x2e8>)
 8000ed4:	f00c f816 	bl	800cf04 <puts>

			/* changing the speed to parking speed */
			ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8000ed8:	49ae      	ldr	r1, [pc, #696]	; (8001194 <RTOS_Automatic_Parking+0x2ec>)
 8000eda:	48af      	ldr	r0, [pc, #700]	; (8001198 <RTOS_Automatic_Parking+0x2f0>)
 8000edc:	f002 f930 	bl	8003140 <ECU_Motor_ChangeSpeed>

			/* Selected Right Side to Park */
			if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == RIGHT_PARKING_SIDE)
 8000ee0:	4baa      	ldr	r3, [pc, #680]	; (800118c <RTOS_Automatic_Parking+0x2e4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f008 f9e3 	bl	80092b0 <osEventFlagsGet>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f040 8179 	bne.w	80011e8 <RTOS_Automatic_Parking+0x340>
			{
				/* storing the ultra-sonic initial distance before parking */
				front_ultrasonic = ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX];
 8000ef6:	4ba9      	ldr	r3, [pc, #676]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8000ef8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f7ff fe5a 	bl	8000bb8 <__aeabi_d2uiz>
 8000f04:	4603      	mov	r3, r0
 8000f06:	72fb      	strb	r3, [r7, #11]
				rear_ultrasonic = ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX];
 8000f08:	4ba4      	ldr	r3, [pc, #656]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8000f0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fe51 	bl	8000bb8 <__aeabi_d2uiz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	72bb      	strb	r3, [r7, #10]

				/* MoveForward so it can Searching for Empty Slot */
				ECU_Motor_MoveForward();
 8000f1a:	f002 f9e3 	bl	80032e4 <ECU_Motor_MoveForward>
				while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 8000f1e:	e002      	b.n	8000f26 <RTOS_Automatic_Parking+0x7e>
				{
					//printf("LeftFront_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);
					//printf("LeftRear_ultrasonic distance is %f\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);
					printf("Searching for Empty Slot\n");
 8000f20:	489f      	ldr	r0, [pc, #636]	; (80011a0 <RTOS_Automatic_Parking+0x2f8>)
 8000f22:	f00b ffef 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 8000f26:	4b9d      	ldr	r3, [pc, #628]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8000f28:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000f2c:	7afb      	ldrb	r3, [r7, #11]
 8000f2e:	330f      	adds	r3, #15
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff faff 	bl	8000534 <__aeabi_i2d>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	f7ff fdd5 	bl	8000aec <__aeabi_dcmplt>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1eb      	bne.n	8000f20 <RTOS_Automatic_Parking+0x78>
 8000f48:	4b94      	ldr	r3, [pc, #592]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8000f4a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000f4e:	7abb      	ldrb	r3, [r7, #10]
 8000f50:	330f      	adds	r3, #15
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff faee 	bl	8000534 <__aeabi_i2d>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	4629      	mov	r1, r5
 8000f60:	f7ff fdc4 	bl	8000aec <__aeabi_dcmplt>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1da      	bne.n	8000f20 <RTOS_Automatic_Parking+0x78>
				}
				printf("Found the Empty Slot\n");
 8000f6a:	488e      	ldr	r0, [pc, #568]	; (80011a4 <RTOS_Automatic_Parking+0x2fc>)
 8000f6c:	f00b ffca 	bl	800cf04 <puts>

				/* Delay to let the car move Forward to about car length */
				while((time_out != 0xff0) && ((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8000f70:	e005      	b.n	8000f7e <RTOS_Automatic_Parking+0xd6>
				{
					printf("Centering the car after Finding the Empty Slot\n");
 8000f72:	488d      	ldr	r0, [pc, #564]	; (80011a8 <RTOS_Automatic_Parking+0x300>)
 8000f74:	f00b ffc6 	bl	800cf04 <puts>
					time_out++;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
				while((time_out != 0xff0) && ((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000f84:	d021      	beq.n	8000fca <RTOS_Automatic_Parking+0x122>
 8000f86:	4b85      	ldr	r3, [pc, #532]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8000f88:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	3311      	adds	r3, #17
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff facf 	bl	8000534 <__aeabi_i2d>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff fdc3 	bl	8000b28 <__aeabi_dcmpgt>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e4      	bne.n	8000f72 <RTOS_Automatic_Parking+0xca>
 8000fa8:	4b7c      	ldr	r3, [pc, #496]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8000faa:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8000fae:	7abb      	ldrb	r3, [r7, #10]
 8000fb0:	330f      	adds	r3, #15
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fabe 	bl	8000534 <__aeabi_i2d>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	460b      	mov	r3, r1
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f7ff fdb2 	bl	8000b28 <__aeabi_dcmpgt>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1d3      	bne.n	8000f72 <RTOS_Automatic_Parking+0xca>
				}

				/* Breaking Sequence */
				ECU_Motor_MoveReverse();
 8000fca:	f002 f9ad 	bl	8003328 <ECU_Motor_MoveReverse>
				HAL_Delay(350);
 8000fce:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000fd2:	f002 fc8d 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 8000fd6:	f002 fa59 	bl	800348c <ECU_Motor_Stop>

				/* reduce the speed while Reversing to deal with motor hardware inefficiency */
				ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8000fda:	496e      	ldr	r1, [pc, #440]	; (8001194 <RTOS_Automatic_Parking+0x2ec>)
 8000fdc:	486e      	ldr	r0, [pc, #440]	; (8001198 <RTOS_Automatic_Parking+0x2f0>)
 8000fde:	f002 f8af 	bl	8003140 <ECU_Motor_ChangeSpeed>

				//				HAL_Delay(1200);
				//				ECU_Motor_Stop();

				/* MoveReverseRight so the car rear can enter the Empty Slot */
				ECU_Motor_MoveReverseRight();
 8000fe2:	f002 fa0b 	bl	80033fc <ECU_Motor_MoveReverseRight>
				while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 28.5))
 8000fe6:	e002      	b.n	8000fee <RTOS_Automatic_Parking+0x146>
				{
					//printf("IR_Right_Rear in = %d",ECU_IR_IsActive(&IR_Right_Rear));
					//printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
					//printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
					printf("trying to Park 1 Reverse Right\n");
 8000fe8:	4870      	ldr	r0, [pc, #448]	; (80011ac <RTOS_Automatic_Parking+0x304>)
 8000fea:	f00b ff8b 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 28.5))
 8000fee:	4b6b      	ldr	r3, [pc, #428]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8000ff0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <RTOS_Automatic_Parking+0x308>)
 8000ffa:	f7ff fd95 	bl	8000b28 <__aeabi_dcmpgt>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f1      	bne.n	8000fe8 <RTOS_Automatic_Parking+0x140>
				}
				//printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
				//printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);

				/* Breaking Sequence */
				ECU_Motor_MoveForward();
 8001004:	f002 f96e 	bl	80032e4 <ECU_Motor_MoveForward>
				HAL_Delay(5);
 8001008:	2005      	movs	r0, #5
 800100a:	f002 fc71 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 800100e:	f002 fa3d 	bl	800348c <ECU_Motor_Stop>

				/* ReverseLeft to Adjust the position better in the slot */
				ECU_Motor_MoveReverseLeft();
 8001012:	f002 fa17 	bl	8003444 <ECU_Motor_MoveReverseLeft>
				while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 3) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 3))
 8001016:	e002      	b.n	800101e <RTOS_Automatic_Parking+0x176>
				{
					//printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
					//printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
					printf("trying to Park 2 Reverse Left\n");
 8001018:	4866      	ldr	r0, [pc, #408]	; (80011b4 <RTOS_Automatic_Parking+0x30c>)
 800101a:	f00b ff73 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 3) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 3))
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8001020:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b63      	ldr	r3, [pc, #396]	; (80011b8 <RTOS_Automatic_Parking+0x310>)
 800102a:	f7ff fd7d 	bl	8000b28 <__aeabi_dcmpgt>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00a      	beq.n	800104a <RTOS_Automatic_Parking+0x1a2>
 8001034:	4b59      	ldr	r3, [pc, #356]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8001036:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	4b5e      	ldr	r3, [pc, #376]	; (80011b8 <RTOS_Automatic_Parking+0x310>)
 8001040:	f7ff fd72 	bl	8000b28 <__aeabi_dcmpgt>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1e6      	bne.n	8001018 <RTOS_Automatic_Parking+0x170>
				}
				//printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				//printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);

				/* Breaking Sequence */
				ECU_Motor_MoveForward();
 800104a:	f002 f94b 	bl	80032e4 <ECU_Motor_MoveForward>
				HAL_Delay(5);
 800104e:	2005      	movs	r0, #5
 8001050:	f002 fc4e 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 8001054:	f002 fa1a 	bl	800348c <ECU_Motor_Stop>

				/* return the speed back to parking speed */
				ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8001058:	494e      	ldr	r1, [pc, #312]	; (8001194 <RTOS_Automatic_Parking+0x2ec>)
 800105a:	484f      	ldr	r0, [pc, #316]	; (8001198 <RTOS_Automatic_Parking+0x2f0>)
 800105c:	f002 f870 	bl	8003140 <ECU_Motor_ChangeSpeed>

				/* MoveForwardRight to Adjust the position of the front of the car */
				ECU_Motor_MoveForwardRight();
 8001060:	f002 f984 	bl	800336c <ECU_Motor_MoveForwardRight>
				while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 9) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 9))
 8001064:	e002      	b.n	800106c <RTOS_Automatic_Parking+0x1c4>
				{
					printf("trying to Park 3 Forward Right\n");
 8001066:	4855      	ldr	r0, [pc, #340]	; (80011bc <RTOS_Automatic_Parking+0x314>)
 8001068:	f00b ff4c 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 9) && (ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 9))
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 800106e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b52      	ldr	r3, [pc, #328]	; (80011c0 <RTOS_Automatic_Parking+0x318>)
 8001078:	f7ff fd56 	bl	8000b28 <__aeabi_dcmpgt>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00a      	beq.n	8001098 <RTOS_Automatic_Parking+0x1f0>
 8001082:	4b46      	ldr	r3, [pc, #280]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 8001084:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <RTOS_Automatic_Parking+0x318>)
 800108e:	f7ff fd4b 	bl	8000b28 <__aeabi_dcmpgt>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e6      	bne.n	8001066 <RTOS_Automatic_Parking+0x1be>
				}

				/* Breaking Sequence */
				ECU_Motor_MoveReverse();
 8001098:	f002 f946 	bl	8003328 <ECU_Motor_MoveReverse>
				HAL_Delay(5);
 800109c:	2005      	movs	r0, #5
 800109e:	f002 fc27 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 80010a2:	f002 f9f3 	bl	800348c <ECU_Motor_Stop>

				/* reduce the speed while Reversing to deal with motor hardware inefficiency */
				ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80010a6:	493b      	ldr	r1, [pc, #236]	; (8001194 <RTOS_Automatic_Parking+0x2ec>)
 80010a8:	483b      	ldr	r0, [pc, #236]	; (8001198 <RTOS_Automatic_Parking+0x2f0>)
 80010aa:	f002 f849 	bl	8003140 <ECU_Motor_ChangeSpeed>
				//				ECU_Motor_MoveReverseLeft();
				//				HAL_Delay(300);
				//				ECU_Motor_Stop();

				/* MoveReverse to Adjust the position better in the slot */
				ECU_Motor_MoveReverse();
 80010ae:	f002 f93b 	bl	8003328 <ECU_Motor_MoveReverse>
				while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 24) )
 80010b2:	e002      	b.n	80010ba <RTOS_Automatic_Parking+0x212>
				{
					printf("try to Park 4 Reverse \n");
 80010b4:	4843      	ldr	r0, [pc, #268]	; (80011c4 <RTOS_Automatic_Parking+0x31c>)
 80010b6:	f00b ff25 	bl	800cf04 <puts>
				while( (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 24) )
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 80010bc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <RTOS_Automatic_Parking+0x320>)
 80010c6:	f7ff fd2f 	bl	8000b28 <__aeabi_dcmpgt>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f1      	bne.n	80010b4 <RTOS_Automatic_Parking+0x20c>
				}

				/* Breaking Sequence */
				ECU_Motor_MoveForward();
 80010d0:	f002 f908 	bl	80032e4 <ECU_Motor_MoveForward>
				HAL_Delay(5);
 80010d4:	2005      	movs	r0, #5
 80010d6:	f002 fc0b 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 80010da:	f002 f9d7 	bl	800348c <ECU_Motor_Stop>

				ECU_Motor_MoveReverseLeft();
 80010de:	f002 f9b1 	bl	8003444 <ECU_Motor_MoveReverseLeft>
				while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 6) /*&& (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 9)*/)
 80010e2:	e002      	b.n	80010ea <RTOS_Automatic_Parking+0x242>
				{
					//printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
					//printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
					printf("trying to Park 2 Reverse Left\n");
 80010e4:	4833      	ldr	r0, [pc, #204]	; (80011b4 <RTOS_Automatic_Parking+0x30c>)
 80010e6:	f00b ff0d 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] > 6) /*&& (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 9)*/)
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <RTOS_Automatic_Parking+0x2f4>)
 80010ec:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	4b35      	ldr	r3, [pc, #212]	; (80011cc <RTOS_Automatic_Parking+0x324>)
 80010f6:	f7ff fd17 	bl	8000b28 <__aeabi_dcmpgt>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1f1      	bne.n	80010e4 <RTOS_Automatic_Parking+0x23c>
				}
				//printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
				//printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);

				/* Breaking Sequence */
				ECU_Motor_MoveForward();
 8001100:	f002 f8f0 	bl	80032e4 <ECU_Motor_MoveForward>
				HAL_Delay(5);
 8001104:	2005      	movs	r0, #5
 8001106:	f002 fbf3 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 800110a:	f002 f9bf 	bl	800348c <ECU_Motor_Stop>


				ECU_Busser_GeneratePWM(&busser);
 800110e:	4830      	ldr	r0, [pc, #192]	; (80011d0 <RTOS_Automatic_Parking+0x328>)
 8001110:	f001 feca 	bl	8002ea8 <ECU_Busser_GeneratePWM>
				HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f002 fbea 	bl	80038f0 <HAL_Delay>
				ECU_Busser_StopPWM(&busser);
 800111c:	482c      	ldr	r0, [pc, #176]	; (80011d0 <RTOS_Automatic_Parking+0x328>)
 800111e:	f001 ff53 	bl	8002fc8 <ECU_Busser_StopPWM>
				HAL_Delay(250);
 8001122:	20fa      	movs	r0, #250	; 0xfa
 8001124:	f002 fbe4 	bl	80038f0 <HAL_Delay>
				ECU_Busser_GeneratePWM(&busser);
 8001128:	4829      	ldr	r0, [pc, #164]	; (80011d0 <RTOS_Automatic_Parking+0x328>)
 800112a:	f001 febd 	bl	8002ea8 <ECU_Busser_GeneratePWM>
				HAL_Delay(500);
 800112e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001132:	f002 fbdd 	bl	80038f0 <HAL_Delay>
				ECU_Busser_StopPWM(&busser);
 8001136:	4826      	ldr	r0, [pc, #152]	; (80011d0 <RTOS_Automatic_Parking+0x328>)
 8001138:	f001 ff46 	bl	8002fc8 <ECU_Busser_StopPWM>
				HAL_Delay(250);
 800113c:	20fa      	movs	r0, #250	; 0xfa
 800113e:	f002 fbd7 	bl	80038f0 <HAL_Delay>
				ECU_Busser_GeneratePWM(&busser);
 8001142:	4823      	ldr	r0, [pc, #140]	; (80011d0 <RTOS_Automatic_Parking+0x328>)
 8001144:	f001 feb0 	bl	8002ea8 <ECU_Busser_GeneratePWM>
				HAL_Delay(500);
 8001148:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800114c:	f002 fbd0 	bl	80038f0 <HAL_Delay>
				ECU_Busser_StopPWM(&busser);
 8001150:	481f      	ldr	r0, [pc, #124]	; (80011d0 <RTOS_Automatic_Parking+0x328>)
 8001152:	f001 ff39 	bl	8002fc8 <ECU_Busser_StopPWM>
				//				}
				//				ECU_Motor_MoveReverse();
				//				HAL_Delay(5);
				//				ECU_Motor_Stop();
				/* terminating the Auto Parking mode */
				printf("Finally ... the car should be parked successfully by now\n");
 8001156:	481f      	ldr	r0, [pc, #124]	; (80011d4 <RTOS_Automatic_Parking+0x32c>)
 8001158:	f00b fed4 	bl	800cf04 <puts>
				osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <RTOS_Automatic_Parking+0x2e4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f008 f860 	bl	8009228 <osEventFlagsClear>
				ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 8001168:	491b      	ldr	r1, [pc, #108]	; (80011d8 <RTOS_Automatic_Parking+0x330>)
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <RTOS_Automatic_Parking+0x2f0>)
 800116c:	f001 ffe8 	bl	8003140 <ECU_Motor_ChangeSpeed>
				Bluetooth_RX_Data = 'S';
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <RTOS_Automatic_Parking+0x334>)
 8001172:	2253      	movs	r2, #83	; 0x53
 8001174:	701a      	strb	r2, [r3, #0]
				osThreadResume(car_next_stepHandle);
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <RTOS_Automatic_Parking+0x338>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f007 ff48 	bl	8009010 <osThreadResume>
				osThreadSuspend(Automatic_ParkingHandle);
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <RTOS_Automatic_Parking+0x33c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f007 ff0f 	bl	8008fa8 <osThreadSuspend>
 800118a:	e16d      	b.n	8001468 <RTOS_Automatic_Parking+0x5c0>
 800118c:	20000298 	.word	0x20000298
 8001190:	0800f050 	.word	0x0800f050
 8001194:	20000088 	.word	0x20000088
 8001198:	20000058 	.word	0x20000058
 800119c:	20000668 	.word	0x20000668
 80011a0:	0800f09c 	.word	0x0800f09c
 80011a4:	0800f0b8 	.word	0x0800f0b8
 80011a8:	0800f0d0 	.word	0x0800f0d0
 80011ac:	0800f100 	.word	0x0800f100
 80011b0:	403c8000 	.word	0x403c8000
 80011b4:	0800f120 	.word	0x0800f120
 80011b8:	40080000 	.word	0x40080000
 80011bc:	0800f140 	.word	0x0800f140
 80011c0:	40220000 	.word	0x40220000
 80011c4:	0800f160 	.word	0x0800f160
 80011c8:	40380000 	.word	0x40380000
 80011cc:	40180000 	.word	0x40180000
 80011d0:	20000048 	.word	0x20000048
 80011d4:	0800f178 	.word	0x0800f178
 80011d8:	20000078 	.word	0x20000078
 80011dc:	20000074 	.word	0x20000074
 80011e0:	2000028c 	.word	0x2000028c
 80011e4:	20000290 	.word	0x20000290

			}
			/* ----------------------------------------------- Selected Left Side to Park -------------------------------------------- */
			else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == LEFT_PARKING_SIDE)
 80011e8:	4ba2      	ldr	r3, [pc, #648]	; (8001474 <RTOS_Automatic_Parking+0x5cc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f008 f85f 	bl	80092b0 <osEventFlagsGet>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	f040 8135 	bne.w	8001468 <RTOS_Automatic_Parking+0x5c0>
			{
				printf("Park Left Side\n");
 80011fe:	489e      	ldr	r0, [pc, #632]	; (8001478 <RTOS_Automatic_Parking+0x5d0>)
 8001200:	f00b fe80 	bl	800cf04 <puts>

				/* storing the ultra-sonic initial distance before parking */
				front_ultrasonic = ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX];
 8001204:	4b9d      	ldr	r3, [pc, #628]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 8001206:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	f7ff fcd3 	bl	8000bb8 <__aeabi_d2uiz>
 8001212:	4603      	mov	r3, r0
 8001214:	72fb      	strb	r3, [r7, #11]
				rear_ultrasonic = ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX];
 8001216:	4b99      	ldr	r3, [pc, #612]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 8001218:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fcca 	bl	8000bb8 <__aeabi_d2uiz>
 8001224:	4603      	mov	r3, r0
 8001226:	72bb      	strb	r3, [r7, #10]

				/* MoveForward so it can Searching for Empty Slot */
				ECU_Motor_MoveForward();
 8001228:	f002 f85c 	bl	80032e4 <ECU_Motor_MoveForward>
				while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 800122c:	e002      	b.n	8001234 <RTOS_Automatic_Parking+0x38c>
				{
					printf("Searching for Empty Slot\n");
 800122e:	4894      	ldr	r0, [pc, #592]	; (8001480 <RTOS_Automatic_Parking+0x5d8>)
 8001230:	f00b fe68 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < (front_ultrasonic + 15)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < (rear_ultrasonic + 15)))
 8001234:	4b91      	ldr	r3, [pc, #580]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 8001236:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800123a:	7afb      	ldrb	r3, [r7, #11]
 800123c:	330f      	adds	r3, #15
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f978 	bl	8000534 <__aeabi_i2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4620      	mov	r0, r4
 800124a:	4629      	mov	r1, r5
 800124c:	f7ff fc4e 	bl	8000aec <__aeabi_dcmplt>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1eb      	bne.n	800122e <RTOS_Automatic_Parking+0x386>
 8001256:	4b89      	ldr	r3, [pc, #548]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 8001258:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800125c:	7abb      	ldrb	r3, [r7, #10]
 800125e:	330f      	adds	r3, #15
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f967 	bl	8000534 <__aeabi_i2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7ff fc3d 	bl	8000aec <__aeabi_dcmplt>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1da      	bne.n	800122e <RTOS_Automatic_Parking+0x386>
				}
				printf("Found the Empty Slot\n");
 8001278:	4882      	ldr	r0, [pc, #520]	; (8001484 <RTOS_Automatic_Parking+0x5dc>)
 800127a:	f00b fe43 	bl	800cf04 <puts>

				/* Delay to let the car move Forward to about car length */
				while((time_out != 0xff0) && ((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 800127e:	e005      	b.n	800128c <RTOS_Automatic_Parking+0x3e4>
				{
					printf("Centering the car after Finding the Empty Slot\n");
 8001280:	4881      	ldr	r0, [pc, #516]	; (8001488 <RTOS_Automatic_Parking+0x5e0>)
 8001282:	f00b fe3f 	bl	800cf04 <puts>
					time_out++;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	3301      	adds	r3, #1
 800128a:	60fb      	str	r3, [r7, #12]
				while((time_out != 0xff0) && ((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > (front_ultrasonic + 17)) || (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > (rear_ultrasonic + 15))))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8001292:	d021      	beq.n	80012d8 <RTOS_Automatic_Parking+0x430>
 8001294:	4b79      	ldr	r3, [pc, #484]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 8001296:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	3311      	adds	r3, #17
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f948 	bl	8000534 <__aeabi_i2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7ff fc3c 	bl	8000b28 <__aeabi_dcmpgt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e4      	bne.n	8001280 <RTOS_Automatic_Parking+0x3d8>
 80012b6:	4b71      	ldr	r3, [pc, #452]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 80012b8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80012bc:	7abb      	ldrb	r3, [r7, #10]
 80012be:	330f      	adds	r3, #15
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f937 	bl	8000534 <__aeabi_i2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4620      	mov	r0, r4
 80012cc:	4629      	mov	r1, r5
 80012ce:	f7ff fc2b 	bl	8000b28 <__aeabi_dcmpgt>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1d3      	bne.n	8001280 <RTOS_Automatic_Parking+0x3d8>
				}

				/* Breaking Sequence */
				ECU_Motor_MoveReverse();
 80012d8:	f002 f826 	bl	8003328 <ECU_Motor_MoveReverse>
				HAL_Delay(400);
 80012dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80012e0:	f002 fb06 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 80012e4:	f002 f8d2 	bl	800348c <ECU_Motor_Stop>

				/* reduce the speed while Reversing to deal with motor hardware inefficiency */
				ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80012e8:	4968      	ldr	r1, [pc, #416]	; (800148c <RTOS_Automatic_Parking+0x5e4>)
 80012ea:	4869      	ldr	r0, [pc, #420]	; (8001490 <RTOS_Automatic_Parking+0x5e8>)
 80012ec:	f001 ff28 	bl	8003140 <ECU_Motor_ChangeSpeed>

				/* MoveReverseRight so the car rear can enter the Empty Slot */
				ECU_Motor_MoveReverseLeft();
 80012f0:	f002 f8a8 	bl	8003444 <ECU_Motor_MoveReverseLeft>
				while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 28.5))
 80012f4:	e002      	b.n	80012fc <RTOS_Automatic_Parking+0x454>
				{
					printf("trying to Park 1 Reverse Left\n");
 80012f6:	4867      	ldr	r0, [pc, #412]	; (8001494 <RTOS_Automatic_Parking+0x5ec>)
 80012f8:	f00b fe04 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 28.5))
 80012fc:	4b5f      	ldr	r3, [pc, #380]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 80012fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <RTOS_Automatic_Parking+0x5f0>)
 8001308:	f7ff fc0e 	bl	8000b28 <__aeabi_dcmpgt>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f1      	bne.n	80012f6 <RTOS_Automatic_Parking+0x44e>
				}

				/* Breaking Sequence */
				ECU_Motor_MoveForward();
 8001312:	f001 ffe7 	bl	80032e4 <ECU_Motor_MoveForward>
				HAL_Delay(5);
 8001316:	2005      	movs	r0, #5
 8001318:	f002 faea 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 800131c:	f002 f8b6 	bl	800348c <ECU_Motor_Stop>

				/* ReverseLeft to Adjust the position better in the slot */
				ECU_Motor_MoveReverseRight();
 8001320:	f002 f86c 	bl	80033fc <ECU_Motor_MoveReverseRight>
				while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 3) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 3))
 8001324:	e002      	b.n	800132c <RTOS_Automatic_Parking+0x484>
				{
					printf("trying to Park 2 Reverse Right\n");
 8001326:	485d      	ldr	r0, [pc, #372]	; (800149c <RTOS_Automatic_Parking+0x5f4>)
 8001328:	f00b fdec 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 3) && (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 3))
 800132c:	4b53      	ldr	r3, [pc, #332]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 800132e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b5a      	ldr	r3, [pc, #360]	; (80014a0 <RTOS_Automatic_Parking+0x5f8>)
 8001338:	f7ff fbf6 	bl	8000b28 <__aeabi_dcmpgt>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00a      	beq.n	8001358 <RTOS_Automatic_Parking+0x4b0>
 8001342:	4b4e      	ldr	r3, [pc, #312]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 8001344:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b54      	ldr	r3, [pc, #336]	; (80014a0 <RTOS_Automatic_Parking+0x5f8>)
 800134e:	f7ff fbeb 	bl	8000b28 <__aeabi_dcmpgt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1e6      	bne.n	8001326 <RTOS_Automatic_Parking+0x47e>
				}

				/* Breaking Sequence */
				ECU_Motor_MoveForward();
 8001358:	f001 ffc4 	bl	80032e4 <ECU_Motor_MoveForward>
				HAL_Delay(5);
 800135c:	2005      	movs	r0, #5
 800135e:	f002 fac7 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 8001362:	f002 f893 	bl	800348c <ECU_Motor_Stop>

				/* return the speed back to parking speed */
				ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 8001366:	4949      	ldr	r1, [pc, #292]	; (800148c <RTOS_Automatic_Parking+0x5e4>)
 8001368:	4849      	ldr	r0, [pc, #292]	; (8001490 <RTOS_Automatic_Parking+0x5e8>)
 800136a:	f001 fee9 	bl	8003140 <ECU_Motor_ChangeSpeed>

				/* MoveForwardRight to Adjust the position of the front of the car */
				ECU_Motor_MoveForwardLeft();
 800136e:	f002 f821 	bl	80033b4 <ECU_Motor_MoveForwardLeft>
				while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 5))
 8001372:	e002      	b.n	800137a <RTOS_Automatic_Parking+0x4d2>
				{
					printf("trying to Park 3 Forward Left\n");
 8001374:	484b      	ldr	r0, [pc, #300]	; (80014a4 <RTOS_Automatic_Parking+0x5fc>)
 8001376:	f00b fdc5 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX] > 5) && (ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 5))
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 800137c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4b48      	ldr	r3, [pc, #288]	; (80014a8 <RTOS_Automatic_Parking+0x600>)
 8001386:	f7ff fbcf 	bl	8000b28 <__aeabi_dcmpgt>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00a      	beq.n	80013a6 <RTOS_Automatic_Parking+0x4fe>
 8001390:	4b3a      	ldr	r3, [pc, #232]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 8001392:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001396:	f04f 0200 	mov.w	r2, #0
 800139a:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <RTOS_Automatic_Parking+0x600>)
 800139c:	f7ff fbc4 	bl	8000b28 <__aeabi_dcmpgt>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1e6      	bne.n	8001374 <RTOS_Automatic_Parking+0x4cc>
				}

				/* Breaking Sequence */
				ECU_Motor_MoveReverse();
 80013a6:	f001 ffbf 	bl	8003328 <ECU_Motor_MoveReverse>
				HAL_Delay(5);
 80013aa:	2005      	movs	r0, #5
 80013ac:	f002 faa0 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 80013b0:	f002 f86c 	bl	800348c <ECU_Motor_Stop>

				/* reduce the speed while Reversing to deal with motor hardware inefficiency */
				ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80013b4:	4935      	ldr	r1, [pc, #212]	; (800148c <RTOS_Automatic_Parking+0x5e4>)
 80013b6:	4836      	ldr	r0, [pc, #216]	; (8001490 <RTOS_Automatic_Parking+0x5e8>)
 80013b8:	f001 fec2 	bl	8003140 <ECU_Motor_ChangeSpeed>
//				/* Breaking Sequence */
//				ECU_Motor_MoveForward();
//				HAL_Delay(5);
//				ECU_Motor_Stop();

				ECU_Motor_MoveReverseRight();
 80013bc:	f002 f81e 	bl	80033fc <ECU_Motor_MoveReverseRight>
				while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 4.5) /*&& (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 9)*/)
 80013c0:	e002      	b.n	80013c8 <RTOS_Automatic_Parking+0x520>
				{
					printf("trying to Park 2 Reverse Right\n");
 80013c2:	4836      	ldr	r0, [pc, #216]	; (800149c <RTOS_Automatic_Parking+0x5f4>)
 80013c4:	f00b fd9e 	bl	800cf04 <puts>
				while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] > 4.5) /*&& (ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 9)*/)
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <RTOS_Automatic_Parking+0x5d4>)
 80013ca:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <RTOS_Automatic_Parking+0x604>)
 80013d4:	f7ff fba8 	bl	8000b28 <__aeabi_dcmpgt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f1      	bne.n	80013c2 <RTOS_Automatic_Parking+0x51a>
				}

				/* Breaking Sequence */
				ECU_Motor_MoveForward();
 80013de:	f001 ff81 	bl	80032e4 <ECU_Motor_MoveForward>
				HAL_Delay(5);
 80013e2:	2005      	movs	r0, #5
 80013e4:	f002 fa84 	bl	80038f0 <HAL_Delay>
				ECU_Motor_Stop();
 80013e8:	f002 f850 	bl	800348c <ECU_Motor_Stop>


				ECU_Busser_GeneratePWM(&busser);
 80013ec:	4830      	ldr	r0, [pc, #192]	; (80014b0 <RTOS_Automatic_Parking+0x608>)
 80013ee:	f001 fd5b 	bl	8002ea8 <ECU_Busser_GeneratePWM>
				HAL_Delay(500);
 80013f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f6:	f002 fa7b 	bl	80038f0 <HAL_Delay>
				ECU_Busser_StopPWM(&busser);
 80013fa:	482d      	ldr	r0, [pc, #180]	; (80014b0 <RTOS_Automatic_Parking+0x608>)
 80013fc:	f001 fde4 	bl	8002fc8 <ECU_Busser_StopPWM>
				HAL_Delay(250);
 8001400:	20fa      	movs	r0, #250	; 0xfa
 8001402:	f002 fa75 	bl	80038f0 <HAL_Delay>
				ECU_Busser_GeneratePWM(&busser);
 8001406:	482a      	ldr	r0, [pc, #168]	; (80014b0 <RTOS_Automatic_Parking+0x608>)
 8001408:	f001 fd4e 	bl	8002ea8 <ECU_Busser_GeneratePWM>
				HAL_Delay(500);
 800140c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001410:	f002 fa6e 	bl	80038f0 <HAL_Delay>
				ECU_Busser_StopPWM(&busser);
 8001414:	4826      	ldr	r0, [pc, #152]	; (80014b0 <RTOS_Automatic_Parking+0x608>)
 8001416:	f001 fdd7 	bl	8002fc8 <ECU_Busser_StopPWM>
				HAL_Delay(250);
 800141a:	20fa      	movs	r0, #250	; 0xfa
 800141c:	f002 fa68 	bl	80038f0 <HAL_Delay>
				ECU_Busser_GeneratePWM(&busser);
 8001420:	4823      	ldr	r0, [pc, #140]	; (80014b0 <RTOS_Automatic_Parking+0x608>)
 8001422:	f001 fd41 	bl	8002ea8 <ECU_Busser_GeneratePWM>
				HAL_Delay(500);
 8001426:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800142a:	f002 fa61 	bl	80038f0 <HAL_Delay>
				ECU_Busser_StopPWM(&busser);
 800142e:	4820      	ldr	r0, [pc, #128]	; (80014b0 <RTOS_Automatic_Parking+0x608>)
 8001430:	f001 fdca 	bl	8002fc8 <ECU_Busser_StopPWM>

				/* terminating the Auto Parking mode */
				printf("Finally ... the car should be parked successfully by now\n");
 8001434:	481f      	ldr	r0, [pc, #124]	; (80014b4 <RTOS_Automatic_Parking+0x60c>)
 8001436:	f00b fd65 	bl	800cf04 <puts>
				osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <RTOS_Automatic_Parking+0x5cc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2101      	movs	r1, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f007 fef1 	bl	8009228 <osEventFlagsClear>
				ECU_Motor_ChangeSpeed(&moving_motor, &high_speed);
 8001446:	491c      	ldr	r1, [pc, #112]	; (80014b8 <RTOS_Automatic_Parking+0x610>)
 8001448:	4811      	ldr	r0, [pc, #68]	; (8001490 <RTOS_Automatic_Parking+0x5e8>)
 800144a:	f001 fe79 	bl	8003140 <ECU_Motor_ChangeSpeed>
				Bluetooth_RX_Data = 'S';
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <RTOS_Automatic_Parking+0x614>)
 8001450:	2253      	movs	r2, #83	; 0x53
 8001452:	701a      	strb	r2, [r3, #0]
				osThreadResume(car_next_stepHandle);
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <RTOS_Automatic_Parking+0x618>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f007 fdd9 	bl	8009010 <osThreadResume>
				osThreadSuspend(Automatic_ParkingHandle);
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <RTOS_Automatic_Parking+0x61c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f007 fda0 	bl	8008fa8 <osThreadSuspend>

		}
		else{/* DO NOTHING */}


		osDelay(20000);
 8001468:	f644 6020 	movw	r0, #20000	; 0x4e20
 800146c:	f007 fe04 	bl	8009078 <osDelay>
		if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == AUTOMATIC_PARKING_MODE)
 8001470:	e524      	b.n	8000ebc <RTOS_Automatic_Parking+0x14>
 8001472:	bf00      	nop
 8001474:	20000298 	.word	0x20000298
 8001478:	0800f1b4 	.word	0x0800f1b4
 800147c:	20000668 	.word	0x20000668
 8001480:	0800f09c 	.word	0x0800f09c
 8001484:	0800f0b8 	.word	0x0800f0b8
 8001488:	0800f0d0 	.word	0x0800f0d0
 800148c:	20000088 	.word	0x20000088
 8001490:	20000058 	.word	0x20000058
 8001494:	0800f1c4 	.word	0x0800f1c4
 8001498:	403c8000 	.word	0x403c8000
 800149c:	0800f1e4 	.word	0x0800f1e4
 80014a0:	40080000 	.word	0x40080000
 80014a4:	0800f204 	.word	0x0800f204
 80014a8:	40140000 	.word	0x40140000
 80014ac:	40120000 	.word	0x40120000
 80014b0:	20000048 	.word	0x20000048
 80014b4:	0800f178 	.word	0x0800f178
 80014b8:	20000078 	.word	0x20000078
 80014bc:	20000074 	.word	0x20000074
 80014c0:	2000028c 	.word	0x2000028c
 80014c4:	20000290 	.word	0x20000290

080014c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b50      	ldr	r3, [pc, #320]	; (8001620 <MX_GPIO_Init+0x158>)
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	4a4f      	ldr	r2, [pc, #316]	; (8001620 <MX_GPIO_Init+0x158>)
 80014e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014e8:	6153      	str	r3, [r2, #20]
 80014ea:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <MX_GPIO_Init+0x158>)
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <MX_GPIO_Init+0x158>)
 80014f8:	695b      	ldr	r3, [r3, #20]
 80014fa:	4a49      	ldr	r2, [pc, #292]	; (8001620 <MX_GPIO_Init+0x158>)
 80014fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001500:	6153      	str	r3, [r2, #20]
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <MX_GPIO_Init+0x158>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	4b44      	ldr	r3, [pc, #272]	; (8001620 <MX_GPIO_Init+0x158>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a43      	ldr	r2, [pc, #268]	; (8001620 <MX_GPIO_Init+0x158>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	6153      	str	r3, [r2, #20]
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <MX_GPIO_Init+0x158>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	4b3e      	ldr	r3, [pc, #248]	; (8001620 <MX_GPIO_Init+0x158>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	4a3d      	ldr	r2, [pc, #244]	; (8001620 <MX_GPIO_Init+0x158>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001530:	6153      	str	r3, [r2, #20]
 8001532:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <MX_GPIO_Init+0x158>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f002 fcda 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin|LCD_DATA_2_Pin
 800154c:	2200      	movs	r2, #0
 800154e:	f643 4102 	movw	r1, #15362	; 0x3c02
 8001552:	4834      	ldr	r0, [pc, #208]	; (8001624 <MX_GPIO_Init+0x15c>)
 8001554:	f002 fcd4 	bl	8003f00 <HAL_GPIO_WritePin>
                          |LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2104      	movs	r1, #4
 800155c:	4831      	ldr	r0, [pc, #196]	; (8001624 <MX_GPIO_Init+0x15c>)
 800155e:	f002 fccf 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001568:	482f      	ldr	r0, [pc, #188]	; (8001628 <MX_GPIO_Init+0x160>)
 800156a:	f002 fcc9 	bl	8003f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800156e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001574:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4828      	ldr	r0, [pc, #160]	; (8001628 <MX_GPIO_Init+0x160>)
 8001586:	f002 fb31 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 800158a:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 800158e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a6:	f002 fb21 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_Left_Pin;
 80015aa:	2301      	movs	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_Left_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4819      	ldr	r0, [pc, #100]	; (8001624 <MX_GPIO_Init+0x15c>)
 80015be:	f002 fb15 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 80015c2:	f643 4306 	movw	r3, #15366	; 0x3c06
 80015c6:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4812      	ldr	r0, [pc, #72]	; (8001624 <MX_GPIO_Init+0x15c>)
 80015dc:	f002 fb06 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 80015e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <MX_GPIO_Init+0x160>)
 80015fa:	f002 faf7 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IR_RIGHT_Pin;
 80015fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001604:	2300      	movs	r3, #0
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IR_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_GPIO_Init+0x160>)
 8001614:	f002 faea 	bl	8003bec <HAL_GPIO_Init>

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40021000 	.word	0x40021000
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001630:	f002 f928 	bl	8003884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001634:	f000 f81e 	bl	8001674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f7ff ff46 	bl	80014c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800163c:	f000 fabc 	bl	8001bb8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001640:	f000 fb8a 	bl	8001d58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001644:	f000 fc22 	bl	8001e8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001648:	f000 fcbc 	bl	8001fc4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800164c:	f000 fd56 	bl	80020fc <MX_TIM8_Init>
  MX_TIM15_Init();
 8001650:	f000 fe24 	bl	800229c <MX_TIM15_Init>
  MX_TIM16_Init();
 8001654:	f000 feea 	bl	800242c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001658:	f001 fae2 	bl	8002c20 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800165c:	f001 fab0 	bl	8002bc0 <MX_UART4_Init>
  MX_TIM17_Init();
 8001660:	f000 ff5e 	bl	8002520 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001664:	f007 fb68 	bl	8008d38 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001668:	f7ff fac6 	bl	8000bf8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800166c:	f007 fb98 	bl	8008da0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001670:	e7fe      	b.n	8001670 <main+0x44>
	...

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b0a6      	sub	sp, #152	; 0x98
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800167e:	2228      	movs	r2, #40	; 0x28
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f00b fd1e 	bl	800d0c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	2258      	movs	r2, #88	; 0x58
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f00b fd10 	bl	800d0c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a4:	2302      	movs	r3, #2
 80016a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a8:	2301      	movs	r3, #1
 80016aa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ac:	2310      	movs	r3, #16
 80016ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fc37 	bl	8003f30 <HAL_RCC_OscConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016c8:	f000 f84a 	bl	8001760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	230f      	movs	r3, #15
 80016ce:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d0:	2300      	movs	r3, #0
 80016d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016dc:	2300      	movs	r3, #0
 80016de:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 fc76 	bl	8004fd8 <HAL_RCC_ClockConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016f2:	f000 f835 	bl	8001760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <SystemClock_Config+0xc4>)
 80016f8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_TIM8|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001702:	2300      	movs	r3, #0
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001706:	2300      	movs	r3, #0
 8001708:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800170a:	2300      	movs	r3, #0
 800170c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 800170e:	2300      	movs	r3, #0
 8001710:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8001712:	2300      	movs	r3, #0
 8001714:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001716:	2300      	movs	r3, #0
 8001718:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800171a:	2300      	movs	r3, #0
 800171c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	4618      	mov	r0, r3
 8001722:	f003 fec1 	bl	80054a8 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800172c:	f000 f818 	bl	8001760 <Error_Handler>
  }
}
 8001730:	bf00      	nop
 8001732:	3798      	adds	r7, #152	; 0x98
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	01f0300a 	.word	0x01f0300a

0800173c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d101      	bne.n	8001752 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800174e:	f002 f8af 	bl	80038b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40001000 	.word	0x40001000

08001760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
}
 8001766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001768:	e7fe      	b.n	8001768 <Error_Handler+0x8>
	...

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HAL_MspInit+0x4c>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	4a10      	ldr	r2, [pc, #64]	; (80017b8 <HAL_MspInit+0x4c>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6193      	str	r3, [r2, #24]
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_MspInit+0x4c>)
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_MspInit+0x4c>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_MspInit+0x4c>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_MspInit+0x4c>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	210f      	movs	r1, #15
 80017a6:	f06f 0001 	mvn.w	r0, #1
 80017aa:	f002 f97d 	bl	8003aa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08e      	sub	sp, #56	; 0x38
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_InitTick+0xe0>)
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	4a32      	ldr	r2, [pc, #200]	; (800189c <HAL_InitTick+0xe0>)
 80017d2:	f043 0310 	orr.w	r3, r3, #16
 80017d6:	61d3      	str	r3, [r2, #28]
 80017d8:	4b30      	ldr	r3, [pc, #192]	; (800189c <HAL_InitTick+0xe0>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e4:	f107 0210 	add.w	r2, r7, #16
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4611      	mov	r1, r2
 80017ee:	4618      	mov	r0, r3
 80017f0:	f003 fe28 	bl	8005444 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017f4:	6a3b      	ldr	r3, [r7, #32]
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017fe:	f003 fddd 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 8001802:	6378      	str	r0, [r7, #52]	; 0x34
 8001804:	e004      	b.n	8001810 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001806:	f003 fdd9 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 800180a:	4603      	mov	r3, r0
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001812:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <HAL_InitTick+0xe4>)
 8001814:	fba2 2303 	umull	r2, r3, r2, r3
 8001818:	0c9b      	lsrs	r3, r3, #18
 800181a:	3b01      	subs	r3, #1
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_InitTick+0xe8>)
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_InitTick+0xec>)
 8001822:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_InitTick+0xe8>)
 8001826:	f240 32e7 	movw	r2, #999	; 0x3e7
 800182a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800182c:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_InitTick+0xe8>)
 800182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001830:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_InitTick+0xe8>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_InitTick+0xe8>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_InitTick+0xe8>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001844:	4817      	ldr	r0, [pc, #92]	; (80018a4 <HAL_InitTick+0xe8>)
 8001846:	f004 f84d 	bl	80058e4 <HAL_TIM_Base_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001854:	2b00      	cmp	r3, #0
 8001856:	d11b      	bne.n	8001890 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001858:	4812      	ldr	r0, [pc, #72]	; (80018a4 <HAL_InitTick+0xe8>)
 800185a:	f004 f89b 	bl	8005994 <HAL_TIM_Base_Start_IT>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001868:	2b00      	cmp	r3, #0
 800186a:	d111      	bne.n	8001890 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800186c:	2036      	movs	r0, #54	; 0x36
 800186e:	f002 f937 	bl	8003ae0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d808      	bhi.n	800188a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	2036      	movs	r0, #54	; 0x36
 800187e:	f002 f913 	bl	8003aa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001882:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <HAL_InitTick+0xf0>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e002      	b.n	8001890 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001890:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001894:	4618      	mov	r0, r3
 8001896:	3738      	adds	r7, #56	; 0x38
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	431bde83 	.word	0x431bde83
 80018a4:	200002a0 	.word	0x200002a0
 80018a8:	40001000 	.word	0x40001000
 80018ac:	20000090 	.word	0x20000090

080018b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <NMI_Handler+0x4>

080018b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <HardFault_Handler+0x4>

080018bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <MemManage_Handler+0x4>

080018c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c6:	e7fe      	b.n	80018c6 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <UsageFault_Handler+0x4>

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80018e2:	2205      	movs	r2, #5
 80018e4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80018e8:	f004 fd38 	bl	800635c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80018ee:	f004 fd35 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000698 	.word	0x20000698
 80018fc:	200002f0 	.word	0x200002f0
 8001900:	2000046c 	.word	0x2000046c

08001904 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <TIM1_CC_IRQHandler+0x14>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800190e:	4803      	ldr	r0, [pc, #12]	; (800191c <TIM1_CC_IRQHandler+0x18>)
 8001910:	f004 fd24 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000698 	.word	0x20000698
 800191c:	200002f0 	.word	0x200002f0

08001920 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <TIM2_IRQHandler+0x14>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <TIM2_IRQHandler+0x18>)
 800192c:	f004 fd16 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000698 	.word	0x20000698
 8001938:	2000033c 	.word	0x2000033c

0800193c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <TIM3_IRQHandler+0x14>)
 8001942:	2202      	movs	r2, #2
 8001944:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001946:	4803      	ldr	r0, [pc, #12]	; (8001954 <TIM3_IRQHandler+0x18>)
 8001948:	f004 fd08 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000698 	.word	0x20000698
 8001954:	20000388 	.word	0x20000388

08001958 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <TIM4_IRQHandler+0x14>)
 800195e:	2203      	movs	r2, #3
 8001960:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001962:	4803      	ldr	r0, [pc, #12]	; (8001970 <TIM4_IRQHandler+0x18>)
 8001964:	f004 fcfa 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000698 	.word	0x20000698
 8001970:	200003d4 	.word	0x200003d4

08001974 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 8001978:	4b03      	ldr	r3, [pc, #12]	; (8001988 <TIM8_CC_IRQHandler+0x14>)
 800197a:	2204      	movs	r2, #4
 800197c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800197e:	4803      	ldr	r0, [pc, #12]	; (800198c <TIM8_CC_IRQHandler+0x18>)
 8001980:	f004 fcec 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000698 	.word	0x20000698
 800198c:	20000420 	.word	0x20000420

08001990 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001994:	4802      	ldr	r0, [pc, #8]	; (80019a0 <UART4_IRQHandler+0x10>)
 8001996:	f006 f827 	bl	80079e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000550 	.word	0x20000550

080019a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM6_DAC_IRQHandler+0x10>)
 80019aa:	f004 fcd7 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200002a0 	.word	0x200002a0

080019b8 <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <Custom_ITM_sendChar_Ch0+0x48>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <Custom_ITM_sendChar_Ch0+0x48>)
 80019c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019cc:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <Custom_ITM_sendChar_Ch0+0x4c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <Custom_ITM_sendChar_Ch0+0x4c>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 80019da:	bf00      	nop
 80019dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f8      	beq.n	80019dc <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 80019ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	6013      	str	r3, [r2, #0]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000edfc 	.word	0xe000edfc
 8001a04:	e0000e00 	.word	0xe0000e00

08001a08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return 1;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <_kill>:

int _kill(int pid, int sig)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a22:	f00b fbf7 	bl	800d214 <__errno>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2216      	movs	r2, #22
 8001a2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_exit>:

void _exit (int status)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a40:	f04f 31ff 	mov.w	r1, #4294967295
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ffe7 	bl	8001a18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a4a:	e7fe      	b.n	8001a4a <_exit+0x12>

08001a4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
  }

  return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff89 	bl	80019b8 <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
  }
  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f00b fb5c 	bl	800d214 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20010000 	.word	0x20010000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	200002ec 	.word	0x200002ec
 8001b90:	20002a28 	.word	0x20002a28

08001b94 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b09e      	sub	sp, #120	; 0x78
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bcc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bd8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
 8001be8:	615a      	str	r2, [r3, #20]
 8001bea:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	222c      	movs	r2, #44	; 0x2c
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00b fa5f 	bl	800d0c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c06:	4b52      	ldr	r3, [pc, #328]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <MX_TIM1_Init+0x19c>)
 8001c0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001c0c:	4b50      	ldr	r3, [pc, #320]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c0e:	2207      	movs	r2, #7
 8001c10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	4b4f      	ldr	r3, [pc, #316]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c18:	4b4d      	ldr	r3, [pc, #308]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c20:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c26:	4b4a      	ldr	r3, [pc, #296]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2c:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c32:	4847      	ldr	r0, [pc, #284]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c34:	f003 fe56 	bl	80058e4 <HAL_TIM_Base_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c3e:	f7ff fd8f 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c46:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4840      	ldr	r0, [pc, #256]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c50:	f004 fe54 	bl	80068fc <HAL_TIM_ConfigClockSource>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001c5a:	f7ff fd81 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c5e:	483c      	ldr	r0, [pc, #240]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c60:	f003 ff08 	bl	8005a74 <HAL_TIM_PWM_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001c6a:	f7ff fd79 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c6e:	4838      	ldr	r0, [pc, #224]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c70:	f004 f90a 	bl	8005e88 <HAL_TIM_IC_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001c7a:	f7ff fd71 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c8e:	4619      	mov	r1, r3
 8001c90:	482f      	ldr	r0, [pc, #188]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001c92:	f005 fce7 	bl	8007664 <HAL_TIMEx_MasterConfigSynchronization>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8001c9c:	f7ff fd60 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca0:	2360      	movs	r3, #96	; 0x60
 8001ca2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8001ca4:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001ca8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001caa:	2300      	movs	r3, #0
 8001cac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4822      	ldr	r0, [pc, #136]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001cc8:	f004 fd04 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8001cd2:	f7ff fd45 	bl	8001760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cea:	2204      	movs	r2, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4818      	ldr	r0, [pc, #96]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001cf0:	f004 fc53 	bl	800659a <HAL_TIM_IC_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001cfa:	f7ff fd31 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001d34:	f005 fd22 	bl	800777c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8001d3e:	f7ff fd0f 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d42:	4803      	ldr	r0, [pc, #12]	; (8001d50 <MX_TIM1_Init+0x198>)
 8001d44:	f000 fe02 	bl	800294c <HAL_TIM_MspPostInit>

}
 8001d48:	bf00      	nop
 8001d4a:	3778      	adds	r7, #120	; 0x78
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200002f0 	.word	0x200002f0
 8001d54:	40012c00 	.word	0x40012c00

08001d58 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b092      	sub	sp, #72	; 0x48
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
 8001d88:	615a      	str	r2, [r3, #20]
 8001d8a:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d98:	4b3b      	ldr	r3, [pc, #236]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001da2:	2207      	movs	r2, #7
 8001da4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dba:	4b33      	ldr	r3, [pc, #204]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc0:	4831      	ldr	r0, [pc, #196]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001dc2:	f003 fd8f 	bl	80058e4 <HAL_TIM_Base_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001dcc:	f7ff fcc8 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dda:	4619      	mov	r1, r3
 8001ddc:	482a      	ldr	r0, [pc, #168]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001dde:	f004 fd8d 	bl	80068fc <HAL_TIM_ConfigClockSource>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001de8:	f7ff fcba 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001dec:	4826      	ldr	r0, [pc, #152]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001dee:	f003 fe41 	bl	8005a74 <HAL_TIM_PWM_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8001df8:	f7ff fcb2 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001dfc:	4822      	ldr	r0, [pc, #136]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001dfe:	f004 f843 	bl	8005e88 <HAL_TIM_IC_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001e08:	f7ff fcaa 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e18:	4619      	mov	r1, r3
 8001e1a:	481b      	ldr	r0, [pc, #108]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001e1c:	f005 fc22 	bl	8007664 <HAL_TIMEx_MasterConfigSynchronization>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8001e26:	f7ff fc9b 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e2a:	2360      	movs	r3, #96	; 0x60
 8001e2c:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001e2e:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001e32:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	4810      	ldr	r0, [pc, #64]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001e46:	f004 fc45 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8001e50:	f7ff fc86 	bl	8001760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e64:	463b      	mov	r3, r7
 8001e66:	2204      	movs	r2, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4807      	ldr	r0, [pc, #28]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001e6c:	f004 fb95 	bl	800659a <HAL_TIM_IC_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8001e76:	f7ff fc73 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <MX_TIM2_Init+0x130>)
 8001e7c:	f000 fd66 	bl	800294c <HAL_TIM_MspPostInit>

}
 8001e80:	bf00      	nop
 8001e82:	3748      	adds	r7, #72	; 0x48
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	2000033c 	.word	0x2000033c

08001e8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b092      	sub	sp, #72	; 0x48
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
 8001ebc:	615a      	str	r2, [r3, #20]
 8001ebe:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ec0:	463b      	mov	r3, r7
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <MX_TIM3_Init+0x134>)
 8001ed0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ee4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b35      	ldr	r3, [pc, #212]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ef2:	4832      	ldr	r0, [pc, #200]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001ef4:	f003 fcf6 	bl	80058e4 <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001efe:	f7ff fc2f 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f06:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	482b      	ldr	r0, [pc, #172]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001f10:	f004 fcf4 	bl	80068fc <HAL_TIM_ConfigClockSource>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001f1a:	f7ff fc21 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f1e:	4827      	ldr	r0, [pc, #156]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001f20:	f003 fda8 	bl	8005a74 <HAL_TIM_PWM_Init>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001f2a:	f7ff fc19 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001f2e:	4823      	ldr	r0, [pc, #140]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001f30:	f003 ffaa 	bl	8005e88 <HAL_TIM_IC_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001f3a:	f7ff fc11 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481b      	ldr	r0, [pc, #108]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001f4e:	f005 fb89 	bl	8007664 <HAL_TIMEx_MasterConfigSynchronization>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8001f58:	f7ff fc02 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f5c:	2360      	movs	r3, #96	; 0x60
 8001f5e:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001f60:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001f64:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f6e:	f107 0310 	add.w	r3, r7, #16
 8001f72:	2200      	movs	r2, #0
 8001f74:	4619      	mov	r1, r3
 8001f76:	4811      	ldr	r0, [pc, #68]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001f78:	f004 fbac 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8001f82:	f7ff fbed 	bl	8001760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f86:	2300      	movs	r3, #0
 8001f88:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f96:	463b      	mov	r3, r7
 8001f98:	2204      	movs	r2, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001f9e:	f004 fafc 	bl	800659a <HAL_TIM_IC_ConfigChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8001fa8:	f7ff fbda 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001fac:	4803      	ldr	r0, [pc, #12]	; (8001fbc <MX_TIM3_Init+0x130>)
 8001fae:	f000 fccd 	bl	800294c <HAL_TIM_MspPostInit>

}
 8001fb2:	bf00      	nop
 8001fb4:	3748      	adds	r7, #72	; 0x48
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000388 	.word	0x20000388
 8001fc0:	40000400 	.word	0x40000400

08001fc4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b092      	sub	sp, #72	; 0x48
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	605a      	str	r2, [r3, #4]
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002006:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <MX_TIM4_Init+0x134>)
 8002008:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <MX_TIM4_Init+0x130>)
 800200c:	2207      	movs	r2, #7
 800200e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002010:	4b38      	ldr	r3, [pc, #224]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002016:	4b37      	ldr	r3, [pc, #220]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800201e:	4b35      	ldr	r3, [pc, #212]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800202a:	4832      	ldr	r0, [pc, #200]	; (80020f4 <MX_TIM4_Init+0x130>)
 800202c:	f003 fc5a 	bl	80058e4 <HAL_TIM_Base_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002036:	f7ff fb93 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002040:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002044:	4619      	mov	r1, r3
 8002046:	482b      	ldr	r0, [pc, #172]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002048:	f004 fc58 	bl	80068fc <HAL_TIM_ConfigClockSource>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002052:	f7ff fb85 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002056:	4827      	ldr	r0, [pc, #156]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002058:	f003 fd0c 	bl	8005a74 <HAL_TIM_PWM_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002062:	f7ff fb7d 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002066:	4823      	ldr	r0, [pc, #140]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002068:	f003 ff0e 	bl	8005e88 <HAL_TIM_IC_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002072:	f7ff fb75 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800207e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002082:	4619      	mov	r1, r3
 8002084:	481b      	ldr	r0, [pc, #108]	; (80020f4 <MX_TIM4_Init+0x130>)
 8002086:	f005 faed 	bl	8007664 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002090:	f7ff fb66 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002094:	2360      	movs	r3, #96	; 0x60
 8002096:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8002098:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800209c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a6:	f107 0310 	add.w	r3, r7, #16
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	4811      	ldr	r0, [pc, #68]	; (80020f4 <MX_TIM4_Init+0x130>)
 80020b0:	f004 fb10 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 80020ba:	f7ff fb51 	bl	8001760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020c2:	2301      	movs	r3, #1
 80020c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80020ce:	463b      	mov	r3, r7
 80020d0:	2204      	movs	r2, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <MX_TIM4_Init+0x130>)
 80020d6:	f004 fa60 	bl	800659a <HAL_TIM_IC_ConfigChannel>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 80020e0:	f7ff fb3e 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <MX_TIM4_Init+0x130>)
 80020e6:	f000 fc31 	bl	800294c <HAL_TIM_MspPostInit>

}
 80020ea:	bf00      	nop
 80020ec:	3748      	adds	r7, #72	; 0x48
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200003d4 	.word	0x200003d4
 80020f8:	40000800 	.word	0x40000800

080020fc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b09e      	sub	sp, #120	; 0x78
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	615a      	str	r2, [r3, #20]
 800212e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002130:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	222c      	movs	r2, #44	; 0x2c
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f00a ffbd 	bl	800d0c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800214a:	4b52      	ldr	r3, [pc, #328]	; (8002294 <MX_TIM8_Init+0x198>)
 800214c:	4a52      	ldr	r2, [pc, #328]	; (8002298 <MX_TIM8_Init+0x19c>)
 800214e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <MX_TIM8_Init+0x198>)
 8002152:	2207      	movs	r2, #7
 8002154:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <MX_TIM8_Init+0x198>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <MX_TIM8_Init+0x198>)
 800215e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002162:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002164:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <MX_TIM8_Init+0x198>)
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <MX_TIM8_Init+0x198>)
 800216c:	2200      	movs	r2, #0
 800216e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b48      	ldr	r3, [pc, #288]	; (8002294 <MX_TIM8_Init+0x198>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002176:	4847      	ldr	r0, [pc, #284]	; (8002294 <MX_TIM8_Init+0x198>)
 8002178:	f003 fbb4 	bl	80058e4 <HAL_TIM_Base_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002182:	f7ff faed 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002186:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800218c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002190:	4619      	mov	r1, r3
 8002192:	4840      	ldr	r0, [pc, #256]	; (8002294 <MX_TIM8_Init+0x198>)
 8002194:	f004 fbb2 	bl	80068fc <HAL_TIM_ConfigClockSource>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800219e:	f7ff fadf 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80021a2:	483c      	ldr	r0, [pc, #240]	; (8002294 <MX_TIM8_Init+0x198>)
 80021a4:	f003 fc66 	bl	8005a74 <HAL_TIM_PWM_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80021ae:	f7ff fad7 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80021b2:	4838      	ldr	r0, [pc, #224]	; (8002294 <MX_TIM8_Init+0x198>)
 80021b4:	f003 fe68 	bl	8005e88 <HAL_TIM_IC_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80021be:	f7ff facf 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021c6:	2300      	movs	r3, #0
 80021c8:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021d2:	4619      	mov	r1, r3
 80021d4:	482f      	ldr	r0, [pc, #188]	; (8002294 <MX_TIM8_Init+0x198>)
 80021d6:	f005 fa45 	bl	8007664 <HAL_TIMEx_MasterConfigSynchronization>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 80021e0:	f7ff fabe 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e4:	2360      	movs	r3, #96	; 0x60
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 80021e8:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80021ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ee:	2300      	movs	r3, #0
 80021f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021f2:	2300      	movs	r3, #0
 80021f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002202:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002206:	2200      	movs	r2, #0
 8002208:	4619      	mov	r1, r3
 800220a:	4822      	ldr	r0, [pc, #136]	; (8002294 <MX_TIM8_Init+0x198>)
 800220c:	f004 fa62 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8002216:	f7ff faa3 	bl	8001760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800221a:	2300      	movs	r3, #0
 800221c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800221e:	2301      	movs	r3, #1
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002222:	2300      	movs	r3, #0
 8002224:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800222a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800222e:	2204      	movs	r2, #4
 8002230:	4619      	mov	r1, r3
 8002232:	4818      	ldr	r0, [pc, #96]	; (8002294 <MX_TIM8_Init+0x198>)
 8002234:	f004 f9b1 	bl	800659a <HAL_TIM_IC_ConfigChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 800223e:	f7ff fa8f 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002264:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4807      	ldr	r0, [pc, #28]	; (8002294 <MX_TIM8_Init+0x198>)
 8002278:	f005 fa80 	bl	800777c <HAL_TIMEx_ConfigBreakDeadTime>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8002282:	f7ff fa6d 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <MX_TIM8_Init+0x198>)
 8002288:	f000 fb60 	bl	800294c <HAL_TIM_MspPostInit>

}
 800228c:	bf00      	nop
 800228e:	3778      	adds	r7, #120	; 0x78
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000420 	.word	0x20000420
 8002298:	40013400 	.word	0x40013400

0800229c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b09e      	sub	sp, #120	; 0x78
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
 80022cc:	615a      	str	r2, [r3, #20]
 80022ce:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80022d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	222c      	movs	r2, #44	; 0x2c
 80022e2:	2100      	movs	r1, #0
 80022e4:	4618      	mov	r0, r3
 80022e6:	f00a feed 	bl	800d0c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80022ea:	4b4e      	ldr	r3, [pc, #312]	; (8002424 <MX_TIM15_Init+0x188>)
 80022ec:	4a4e      	ldr	r2, [pc, #312]	; (8002428 <MX_TIM15_Init+0x18c>)
 80022ee:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <MX_TIM15_Init+0x188>)
 80022f2:	2207      	movs	r2, #7
 80022f4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f6:	4b4b      	ldr	r3, [pc, #300]	; (8002424 <MX_TIM15_Init+0x188>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80022fc:	4b49      	ldr	r3, [pc, #292]	; (8002424 <MX_TIM15_Init+0x188>)
 80022fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002302:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002304:	4b47      	ldr	r3, [pc, #284]	; (8002424 <MX_TIM15_Init+0x188>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800230a:	4b46      	ldr	r3, [pc, #280]	; (8002424 <MX_TIM15_Init+0x188>)
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002310:	4b44      	ldr	r3, [pc, #272]	; (8002424 <MX_TIM15_Init+0x188>)
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002316:	4843      	ldr	r0, [pc, #268]	; (8002424 <MX_TIM15_Init+0x188>)
 8002318:	f003 fae4 	bl	80058e4 <HAL_TIM_Base_Init>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 8002322:	f7ff fa1d 	bl	8001760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800232a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800232c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002330:	4619      	mov	r1, r3
 8002332:	483c      	ldr	r0, [pc, #240]	; (8002424 <MX_TIM15_Init+0x188>)
 8002334:	f004 fae2 	bl	80068fc <HAL_TIM_ConfigClockSource>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 800233e:	f7ff fa0f 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002342:	4838      	ldr	r0, [pc, #224]	; (8002424 <MX_TIM15_Init+0x188>)
 8002344:	f003 fb96 	bl	8005a74 <HAL_TIM_PWM_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 800234e:	f7ff fa07 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002352:	4834      	ldr	r0, [pc, #208]	; (8002424 <MX_TIM15_Init+0x188>)
 8002354:	f003 fd98 	bl	8005e88 <HAL_TIM_IC_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800235e:	f7ff f9ff 	bl	8001760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002366:	2300      	movs	r3, #0
 8002368:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800236a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800236e:	4619      	mov	r1, r3
 8002370:	482c      	ldr	r0, [pc, #176]	; (8002424 <MX_TIM15_Init+0x188>)
 8002372:	f005 f977 	bl	8007664 <HAL_TIMEx_MasterConfigSynchronization>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 800237c:	f7ff f9f0 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002380:	2360      	movs	r3, #96	; 0x60
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8002384:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800238a:	2300      	movs	r3, #0
 800238c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800238e:	2300      	movs	r3, #0
 8002390:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800239e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023a2:	2200      	movs	r2, #0
 80023a4:	4619      	mov	r1, r3
 80023a6:	481f      	ldr	r0, [pc, #124]	; (8002424 <MX_TIM15_Init+0x188>)
 80023a8:	f004 f994 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 80023b2:	f7ff f9d5 	bl	8001760 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023ba:	2301      	movs	r3, #1
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023be:	2300      	movs	r3, #0
 80023c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ca:	2204      	movs	r2, #4
 80023cc:	4619      	mov	r1, r3
 80023ce:	4815      	ldr	r0, [pc, #84]	; (8002424 <MX_TIM15_Init+0x188>)
 80023d0:	f004 f8e3 	bl	800659a <HAL_TIM_IC_ConfigChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 80023da:	f7ff f9c1 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	; (8002424 <MX_TIM15_Init+0x188>)
 8002406:	f005 f9b9 	bl	800777c <HAL_TIMEx_ConfigBreakDeadTime>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 8002410:	f7ff f9a6 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <MX_TIM15_Init+0x188>)
 8002416:	f000 fa99 	bl	800294c <HAL_TIM_MspPostInit>

}
 800241a:	bf00      	nop
 800241c:	3778      	adds	r7, #120	; 0x78
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2000046c 	.word	0x2000046c
 8002428:	40014000 	.word	0x40014000

0800242c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b092      	sub	sp, #72	; 0x48
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002432:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002436:	2200      	movs	r2, #0
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	605a      	str	r2, [r3, #4]
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	60da      	str	r2, [r3, #12]
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	615a      	str	r2, [r3, #20]
 8002444:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002446:	463b      	mov	r3, r7
 8002448:	222c      	movs	r2, #44	; 0x2c
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f00a fe39 	bl	800d0c4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002452:	4b31      	ldr	r3, [pc, #196]	; (8002518 <MX_TIM16_Init+0xec>)
 8002454:	4a31      	ldr	r2, [pc, #196]	; (800251c <MX_TIM16_Init+0xf0>)
 8002456:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 8002458:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <MX_TIM16_Init+0xec>)
 800245a:	2207      	movs	r2, #7
 800245c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245e:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <MX_TIM16_Init+0xec>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8002464:	4b2c      	ldr	r3, [pc, #176]	; (8002518 <MX_TIM16_Init+0xec>)
 8002466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800246c:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <MX_TIM16_Init+0xec>)
 800246e:	2200      	movs	r2, #0
 8002470:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002472:	4b29      	ldr	r3, [pc, #164]	; (8002518 <MX_TIM16_Init+0xec>)
 8002474:	2200      	movs	r2, #0
 8002476:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <MX_TIM16_Init+0xec>)
 800247a:	2200      	movs	r2, #0
 800247c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800247e:	4826      	ldr	r0, [pc, #152]	; (8002518 <MX_TIM16_Init+0xec>)
 8002480:	f003 fa30 	bl	80058e4 <HAL_TIM_Base_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800248a:	f7ff f969 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800248e:	4822      	ldr	r0, [pc, #136]	; (8002518 <MX_TIM16_Init+0xec>)
 8002490:	f003 faf0 	bl	8005a74 <HAL_TIM_PWM_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800249a:	f7ff f961 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800249e:	2360      	movs	r3, #96	; 0x60
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 80024a2:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a8:	2300      	movs	r3, #0
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024ac:	2300      	movs	r3, #0
 80024ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c0:	2200      	movs	r2, #0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4814      	ldr	r0, [pc, #80]	; (8002518 <MX_TIM16_Init+0xec>)
 80024c6:	f004 f905 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80024d0:	f7ff f946 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024d4:	2300      	movs	r3, #0
 80024d6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80024f6:	463b      	mov	r3, r7
 80024f8:	4619      	mov	r1, r3
 80024fa:	4807      	ldr	r0, [pc, #28]	; (8002518 <MX_TIM16_Init+0xec>)
 80024fc:	f005 f93e 	bl	800777c <HAL_TIMEx_ConfigBreakDeadTime>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8002506:	f7ff f92b 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800250a:	4803      	ldr	r0, [pc, #12]	; (8002518 <MX_TIM16_Init+0xec>)
 800250c:	f000 fa1e 	bl	800294c <HAL_TIM_MspPostInit>

}
 8002510:	bf00      	nop
 8002512:	3748      	adds	r7, #72	; 0x48
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	200004b8 	.word	0x200004b8
 800251c:	40014400 	.word	0x40014400

08002520 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b092      	sub	sp, #72	; 0x48
 8002524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	605a      	str	r2, [r3, #4]
 8002530:	609a      	str	r2, [r3, #8]
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	611a      	str	r2, [r3, #16]
 8002536:	615a      	str	r2, [r3, #20]
 8002538:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800253a:	463b      	mov	r3, r7
 800253c:	222c      	movs	r2, #44	; 0x2c
 800253e:	2100      	movs	r1, #0
 8002540:	4618      	mov	r0, r3
 8002542:	f00a fdbf 	bl	800d0c4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <MX_TIM17_Init+0xec>)
 8002548:	4a31      	ldr	r2, [pc, #196]	; (8002610 <MX_TIM17_Init+0xf0>)
 800254a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7;
 800254c:	4b2f      	ldr	r3, [pc, #188]	; (800260c <MX_TIM17_Init+0xec>)
 800254e:	2207      	movs	r2, #7
 8002550:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b2e      	ldr	r3, [pc, #184]	; (800260c <MX_TIM17_Init+0xec>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <MX_TIM17_Init+0xec>)
 800255a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <MX_TIM17_Init+0xec>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002566:	4b29      	ldr	r3, [pc, #164]	; (800260c <MX_TIM17_Init+0xec>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <MX_TIM17_Init+0xec>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002572:	4826      	ldr	r0, [pc, #152]	; (800260c <MX_TIM17_Init+0xec>)
 8002574:	f003 f9b6 	bl	80058e4 <HAL_TIM_Base_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800257e:	f7ff f8ef 	bl	8001760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002582:	4822      	ldr	r0, [pc, #136]	; (800260c <MX_TIM17_Init+0xec>)
 8002584:	f003 fa76 	bl	8005a74 <HAL_TIM_PWM_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800258e:	f7ff f8e7 	bl	8001760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002592:	2360      	movs	r3, #96	; 0x60
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 8002596:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800259c:	2300      	movs	r3, #0
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025a0:	2300      	movs	r3, #0
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b4:	2200      	movs	r2, #0
 80025b6:	4619      	mov	r1, r3
 80025b8:	4814      	ldr	r0, [pc, #80]	; (800260c <MX_TIM17_Init+0xec>)
 80025ba:	f004 f88b 	bl	80066d4 <HAL_TIM_PWM_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 80025c4:	f7ff f8cc 	bl	8001760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80025ea:	463b      	mov	r3, r7
 80025ec:	4619      	mov	r1, r3
 80025ee:	4807      	ldr	r0, [pc, #28]	; (800260c <MX_TIM17_Init+0xec>)
 80025f0:	f005 f8c4 	bl	800777c <HAL_TIMEx_ConfigBreakDeadTime>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 80025fa:	f7ff f8b1 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80025fe:	4803      	ldr	r0, [pc, #12]	; (800260c <MX_TIM17_Init+0xec>)
 8002600:	f000 f9a4 	bl	800294c <HAL_TIM_MspPostInit>

}
 8002604:	bf00      	nop
 8002606:	3748      	adds	r7, #72	; 0x48
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000504 	.word	0x20000504
 8002610:	40014800 	.word	0x40014800

08002614 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b096      	sub	sp, #88	; 0x58
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4aa7      	ldr	r2, [pc, #668]	; (80028d0 <HAL_TIM_Base_MspInit+0x2bc>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d138      	bne.n	80026a8 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002636:	4ba7      	ldr	r3, [pc, #668]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	4aa6      	ldr	r2, [pc, #664]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800263c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002640:	6193      	str	r3, [r2, #24]
 8002642:	4ba4      	ldr	r3, [pc, #656]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800264a:	643b      	str	r3, [r7, #64]	; 0x40
 800264c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	4ba1      	ldr	r3, [pc, #644]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4aa0      	ldr	r2, [pc, #640]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002658:	6153      	str	r3, [r2, #20]
 800265a:	4b9e      	ldr	r3, [pc, #632]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002666:	2302      	movs	r3, #2
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2300      	movs	r3, #0
 8002674:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002676:	2302      	movs	r3, #2
 8002678:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800267e:	4619      	mov	r1, r3
 8002680:	4895      	ldr	r0, [pc, #596]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c4>)
 8002682:	f001 fab3 	bl	8003bec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8002686:	2200      	movs	r2, #0
 8002688:	2105      	movs	r1, #5
 800268a:	2018      	movs	r0, #24
 800268c:	f001 fa0c 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002690:	2018      	movs	r0, #24
 8002692:	f001 fa25 	bl	8003ae0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8002696:	2200      	movs	r2, #0
 8002698:	2105      	movs	r1, #5
 800269a:	201b      	movs	r0, #27
 800269c:	f001 fa04 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80026a0:	201b      	movs	r0, #27
 80026a2:	f001 fa1d 	bl	8003ae0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80026a6:	e146      	b.n	8002936 <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d131      	bne.n	8002716 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026b2:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a87      	ldr	r2, [pc, #540]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	4a81      	ldr	r2, [pc, #516]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80026d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d4:	6153      	str	r3, [r2, #20]
 80026d6:	4b7f      	ldr	r3, [pc, #508]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	637b      	str	r3, [r7, #52]	; 0x34
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026e2:	2302      	movs	r3, #2
 80026e4:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f2:	2301      	movs	r3, #1
 80026f4:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026fa:	4619      	mov	r1, r3
 80026fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002700:	f001 fa74 	bl	8003bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002704:	2200      	movs	r2, #0
 8002706:	2105      	movs	r1, #5
 8002708:	201c      	movs	r0, #28
 800270a:	f001 f9cd 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800270e:	201c      	movs	r0, #28
 8002710:	f001 f9e6 	bl	8003ae0 <HAL_NVIC_EnableIRQ>
}
 8002714:	e10f      	b.n	8002936 <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_TIM_Base_MspInit+0x2c8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d131      	bne.n	8002784 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002720:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	4a6b      	ldr	r2, [pc, #428]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002726:	f043 0302 	orr.w	r3, r3, #2
 800272a:	61d3      	str	r3, [r2, #28]
 800272c:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	633b      	str	r3, [r7, #48]	; 0x30
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002738:	4b66      	ldr	r3, [pc, #408]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	4a65      	ldr	r2, [pc, #404]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800273e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002742:	6153      	str	r3, [r2, #20]
 8002744:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002750:	2310      	movs	r3, #16
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002760:	2302      	movs	r3, #2
 8002762:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002768:	4619      	mov	r1, r3
 800276a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800276e:	f001 fa3d 	bl	8003bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2105      	movs	r1, #5
 8002776:	201d      	movs	r0, #29
 8002778:	f001 f996 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800277c:	201d      	movs	r0, #29
 800277e:	f001 f9af 	bl	8003ae0 <HAL_NVIC_EnableIRQ>
}
 8002782:	e0d8      	b.n	8002936 <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM4)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a55      	ldr	r2, [pc, #340]	; (80028e0 <HAL_TIM_Base_MspInit+0x2cc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d132      	bne.n	80027f4 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800278e:	4b51      	ldr	r3, [pc, #324]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a50      	ldr	r2, [pc, #320]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b4e      	ldr	r3, [pc, #312]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	4a4a      	ldr	r2, [pc, #296]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80027ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027b0:	6153      	str	r3, [r2, #20]
 80027b2:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027cc:	2300      	movs	r3, #0
 80027ce:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80027d0:	230a      	movs	r3, #10
 80027d2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027de:	f001 fa05 	bl	8003bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	2105      	movs	r1, #5
 80027e6:	201e      	movs	r0, #30
 80027e8:	f001 f95e 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027ec:	201e      	movs	r0, #30
 80027ee:	f001 f977 	bl	8003ae0 <HAL_NVIC_EnableIRQ>
}
 80027f2:	e0a0      	b.n	8002936 <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM8)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a3a      	ldr	r2, [pc, #232]	; (80028e4 <HAL_TIM_Base_MspInit+0x2d0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d130      	bne.n	8002860 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027fe:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002808:	6193      	str	r3, [r2, #24]
 800280a:	4b32      	ldr	r3, [pc, #200]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002816:	4b2f      	ldr	r3, [pc, #188]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800281c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002820:	6153      	str	r3, [r2, #20]
 8002822:	4b2c      	ldr	r3, [pc, #176]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800283e:	2304      	movs	r3, #4
 8002840:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002842:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002846:	4619      	mov	r1, r3
 8002848:	4823      	ldr	r0, [pc, #140]	; (80028d8 <HAL_TIM_Base_MspInit+0x2c4>)
 800284a:	f001 f9cf 	bl	8003bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	202e      	movs	r0, #46	; 0x2e
 8002854:	f001 f928 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002858:	202e      	movs	r0, #46	; 0x2e
 800285a:	f001 f941 	bl	8003ae0 <HAL_NVIC_EnableIRQ>
}
 800285e:	e06a      	b.n	8002936 <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM15)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a20      	ldr	r2, [pc, #128]	; (80028e8 <HAL_TIM_Base_MspInit+0x2d4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d142      	bne.n	80028f0 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	4a19      	ldr	r2, [pc, #100]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	6193      	str	r3, [r2, #24]
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	4a13      	ldr	r2, [pc, #76]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288c:	6153      	str	r3, [r2, #20]
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_TIM_Base_MspInit+0x2c0>)
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800289a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800289e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 80028ac:	2301      	movs	r3, #1
 80028ae:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80028b4:	4619      	mov	r1, r3
 80028b6:	480d      	ldr	r0, [pc, #52]	; (80028ec <HAL_TIM_Base_MspInit+0x2d8>)
 80028b8:	f001 f998 	bl	8003bec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	2105      	movs	r1, #5
 80028c0:	2018      	movs	r0, #24
 80028c2:	f001 f8f1 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80028c6:	2018      	movs	r0, #24
 80028c8:	f001 f90a 	bl	8003ae0 <HAL_NVIC_EnableIRQ>
}
 80028cc:	e033      	b.n	8002936 <HAL_TIM_Base_MspInit+0x322>
 80028ce:	bf00      	nop
 80028d0:	40012c00 	.word	0x40012c00
 80028d4:	40021000 	.word	0x40021000
 80028d8:	48000800 	.word	0x48000800
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	40013400 	.word	0x40013400
 80028e8:	40014000 	.word	0x40014000
 80028ec:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a12      	ldr	r2, [pc, #72]	; (8002940 <HAL_TIM_Base_MspInit+0x32c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d10c      	bne.n	8002914 <HAL_TIM_Base_MspInit+0x300>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028fa:	4b12      	ldr	r3, [pc, #72]	; (8002944 <HAL_TIM_Base_MspInit+0x330>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	4a11      	ldr	r2, [pc, #68]	; (8002944 <HAL_TIM_Base_MspInit+0x330>)
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	6193      	str	r3, [r2, #24]
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_TIM_Base_MspInit+0x330>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
}
 8002912:	e010      	b.n	8002936 <HAL_TIM_Base_MspInit+0x322>
  else if(tim_baseHandle->Instance==TIM17)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <HAL_TIM_Base_MspInit+0x334>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d10b      	bne.n	8002936 <HAL_TIM_Base_MspInit+0x322>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_TIM_Base_MspInit+0x330>)
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <HAL_TIM_Base_MspInit+0x330>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002928:	6193      	str	r3, [r2, #24]
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_TIM_Base_MspInit+0x330>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
}
 8002936:	bf00      	nop
 8002938:	3758      	adds	r7, #88	; 0x58
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40014400 	.word	0x40014400
 8002944:	40021000 	.word	0x40021000
 8002948:	40014800 	.word	0x40014800

0800294c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b090      	sub	sp, #64	; 0x40
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a8b      	ldr	r2, [pc, #556]	; (8002b98 <HAL_TIM_MspPostInit+0x24c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d11c      	bne.n	80029a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	4b8b      	ldr	r3, [pc, #556]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	4a8a      	ldr	r2, [pc, #552]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002978:	6153      	str	r3, [r2, #20]
 800297a:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002986:	2301      	movs	r3, #1
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800298e:	2302      	movs	r3, #2
 8002990:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002992:	2303      	movs	r3, #3
 8002994:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002996:	2302      	movs	r3, #2
 8002998:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800299e:	4619      	mov	r1, r3
 80029a0:	487f      	ldr	r0, [pc, #508]	; (8002ba0 <HAL_TIM_MspPostInit+0x254>)
 80029a2:	f001 f923 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80029a6:	e0f2      	b.n	8002b8e <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d11d      	bne.n	80029ee <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	4b7a      	ldr	r3, [pc, #488]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	4a79      	ldr	r2, [pc, #484]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029bc:	6153      	str	r3, [r2, #20]
 80029be:	4b77      	ldr	r3, [pc, #476]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ca:	2301      	movs	r3, #1
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029d2:	2302      	movs	r3, #2
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029d6:	2303      	movs	r3, #3
 80029d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029da:	2301      	movs	r3, #1
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e8:	f001 f900 	bl	8003bec <HAL_GPIO_Init>
}
 80029ec:	e0cf      	b.n	8002b8e <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM3)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a6c      	ldr	r2, [pc, #432]	; (8002ba4 <HAL_TIM_MspPostInit+0x258>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d11d      	bne.n	8002a34 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f8:	4b68      	ldr	r3, [pc, #416]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	4a67      	ldr	r2, [pc, #412]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 80029fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a02:	6153      	str	r3, [r2, #20]
 8002a04:	4b65      	ldr	r3, [pc, #404]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	623b      	str	r3, [r7, #32]
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a10:	2340      	movs	r3, #64	; 0x40
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a20:	2302      	movs	r3, #2
 8002a22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2e:	f001 f8dd 	bl	8003bec <HAL_GPIO_Init>
}
 8002a32:	e0ac      	b.n	8002b8e <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM4)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5b      	ldr	r2, [pc, #364]	; (8002ba8 <HAL_TIM_MspPostInit+0x25c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11e      	bne.n	8002a7c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b57      	ldr	r3, [pc, #348]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4a56      	ldr	r2, [pc, #344]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6153      	str	r3, [r2, #20]
 8002a4a:	4b54      	ldr	r3, [pc, #336]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a60:	2302      	movs	r3, #2
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a64:	2303      	movs	r3, #3
 8002a66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002a68:	230a      	movs	r3, #10
 8002a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f001 f8b9 	bl	8003bec <HAL_GPIO_Init>
}
 8002a7a:	e088      	b.n	8002b8e <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM8)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4a      	ldr	r2, [pc, #296]	; (8002bac <HAL_TIM_MspPostInit+0x260>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11c      	bne.n	8002ac0 <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a86:	4b45      	ldr	r3, [pc, #276]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4a44      	ldr	r2, [pc, #272]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a90:	6153      	str	r3, [r2, #20]
 8002a92:	4b42      	ldr	r3, [pc, #264]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a9e:	2340      	movs	r3, #64	; 0x40
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4839      	ldr	r0, [pc, #228]	; (8002ba0 <HAL_TIM_MspPostInit+0x254>)
 8002aba:	f001 f897 	bl	8003bec <HAL_GPIO_Init>
}
 8002abe:	e066      	b.n	8002b8e <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM15)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3a      	ldr	r2, [pc, #232]	; (8002bb0 <HAL_TIM_MspPostInit+0x264>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d11d      	bne.n	8002b06 <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4a33      	ldr	r2, [pc, #204]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad4:	6153      	str	r3, [r2, #20]
 8002ad6:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002ae2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aec:	2302      	movs	r3, #2
 8002aee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002af0:	2303      	movs	r3, #3
 8002af2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8002af4:	2301      	movs	r3, #1
 8002af6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002afc:	4619      	mov	r1, r3
 8002afe:	482d      	ldr	r0, [pc, #180]	; (8002bb4 <HAL_TIM_MspPostInit+0x268>)
 8002b00:	f001 f874 	bl	8003bec <HAL_GPIO_Init>
}
 8002b04:	e043      	b.n	8002b8e <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM16)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a2b      	ldr	r2, [pc, #172]	; (8002bb8 <HAL_TIM_MspPostInit+0x26c>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d11c      	bne.n	8002b4a <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1a:	6153      	str	r3, [r2, #20]
 8002b1c:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b28:	2310      	movs	r3, #16
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b30:	2302      	movs	r3, #2
 8002b32:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b34:	2303      	movs	r3, #3
 8002b36:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b40:	4619      	mov	r1, r3
 8002b42:	481c      	ldr	r0, [pc, #112]	; (8002bb4 <HAL_TIM_MspPostInit+0x268>)
 8002b44:	f001 f852 	bl	8003bec <HAL_GPIO_Init>
}
 8002b48:	e021      	b.n	8002b8e <HAL_TIM_MspPostInit+0x242>
  else if(timHandle->Instance==TIM17)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <HAL_TIM_MspPostInit+0x270>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d11c      	bne.n	8002b8e <HAL_TIM_MspPostInit+0x242>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b54:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	4a10      	ldr	r2, [pc, #64]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5e:	6153      	str	r3, [r2, #20]
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <HAL_TIM_MspPostInit+0x250>)
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b84:	4619      	mov	r1, r3
 8002b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8a:	f001 f82f 	bl	8003bec <HAL_GPIO_Init>
}
 8002b8e:	bf00      	nop
 8002b90:	3740      	adds	r7, #64	; 0x40
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	40000400 	.word	0x40000400
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40013400 	.word	0x40013400
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	48000400 	.word	0x48000400
 8002bb8:	40014400 	.word	0x40014400
 8002bbc:	40014800 	.word	0x40014800

08002bc0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bc4:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <MX_UART4_Init+0x58>)
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <MX_UART4_Init+0x5c>)
 8002bc8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002bca:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <MX_UART4_Init+0x58>)
 8002bcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bd0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_UART4_Init+0x58>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <MX_UART4_Init+0x58>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <MX_UART4_Init+0x58>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <MX_UART4_Init+0x58>)
 8002be6:	220c      	movs	r2, #12
 8002be8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <MX_UART4_Init+0x58>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MX_UART4_Init+0x58>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <MX_UART4_Init+0x58>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <MX_UART4_Init+0x58>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <MX_UART4_Init+0x58>)
 8002c04:	f004 fe5e 	bl	80078c4 <HAL_UART_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002c0e:	f7fe fda7 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000550 	.word	0x20000550
 8002c1c:	40004c00 	.word	0x40004c00

08002c20 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c26:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <MX_USART2_UART_Init+0x5c>)
 8002c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c2c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c38:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c46:	220c      	movs	r2, #12
 8002c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c56:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c62:	4805      	ldr	r0, [pc, #20]	; (8002c78 <MX_USART2_UART_Init+0x58>)
 8002c64:	f004 fe2e 	bl	80078c4 <HAL_UART_Init>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002c6e:	f7fe fd77 	bl	8001760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	200005d8 	.word	0x200005d8
 8002c7c:	40004400 	.word	0x40004400

08002c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08c      	sub	sp, #48	; 0x30
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a33      	ldr	r2, [pc, #204]	; (8002d6c <HAL_UART_MspInit+0xec>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d131      	bne.n	8002d06 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ca2:	4b33      	ldr	r3, [pc, #204]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4a32      	ldr	r2, [pc, #200]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002ca8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cac:	61d3      	str	r3, [r2, #28]
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb6:	61bb      	str	r3, [r7, #24]
 8002cb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4a2c      	ldr	r2, [pc, #176]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002cc0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cc4:	6153      	str	r3, [r2, #20]
 8002cc6:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002ce4:	2305      	movs	r3, #5
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	4619      	mov	r1, r3
 8002cee:	4821      	ldr	r0, [pc, #132]	; (8002d74 <HAL_UART_MspInit+0xf4>)
 8002cf0:	f000 ff7c 	bl	8003bec <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2105      	movs	r1, #5
 8002cf8:	2034      	movs	r0, #52	; 0x34
 8002cfa:	f000 fed5 	bl	8003aa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002cfe:	2034      	movs	r0, #52	; 0x34
 8002d00:	f000 feee 	bl	8003ae0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d04:	e02d      	b.n	8002d62 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1b      	ldr	r2, [pc, #108]	; (8002d78 <HAL_UART_MspInit+0xf8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d128      	bne.n	8002d62 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d1a:	61d3      	str	r3, [r2, #28]
 8002d1c:	4b14      	ldr	r3, [pc, #80]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d32:	6153      	str	r3, [r2, #20]
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <HAL_UART_MspInit+0xf0>)
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d40:	230c      	movs	r3, #12
 8002d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d50:	2307      	movs	r3, #7
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d5e:	f000 ff45 	bl	8003bec <HAL_GPIO_Init>
}
 8002d62:	bf00      	nop
 8002d64:	3730      	adds	r7, #48	; 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40004c00 	.word	0x40004c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	48000800 	.word	0x48000800
 8002d78:	40004400 	.word	0x40004400

08002d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002db4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d80:	f7fe ff08 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d84:	480c      	ldr	r0, [pc, #48]	; (8002db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d86:	490d      	ldr	r1, [pc, #52]	; (8002dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d88:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <LoopForever+0xe>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d8c:	e002      	b.n	8002d94 <LoopCopyDataInit>

08002d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d92:	3304      	adds	r3, #4

08002d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d98:	d3f9      	bcc.n	8002d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	; (8002dc8 <LoopForever+0x16>)
  movs r3, #0
 8002d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da0:	e001      	b.n	8002da6 <LoopFillZerobss>

08002da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002da4:	3204      	adds	r2, #4

08002da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da8:	d3fb      	bcc.n	8002da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002daa:	f00a fa39 	bl	800d220 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dae:	f7fe fc3d 	bl	800162c <main>

08002db2 <LoopForever>:

LoopForever:
    b LoopForever
 8002db2:	e7fe      	b.n	8002db2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002db4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dbc:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8002dc0:	0800f6ac 	.word	0x0800f6ac
  ldr r2, =_sbss
 8002dc4:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8002dc8:	20002a24 	.word	0x20002a24

08002dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002dcc:	e7fe      	b.n	8002dcc <ADC1_2_IRQHandler>
	...

08002dd0 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	//printf("----------------------> is %c\n",temp);
	if( BLUETOOTH_CONDITION(temp) ){
 8002dd8:	4b24      	ldr	r3, [pc, #144]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b46      	cmp	r3, #70	; 0x46
 8002dde:	d037      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002de0:	4b22      	ldr	r3, [pc, #136]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	2b42      	cmp	r3, #66	; 0x42
 8002de6:	d033      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b47      	cmp	r3, #71	; 0x47
 8002dee:	d02f      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002df0:	4b1e      	ldr	r3, [pc, #120]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b49      	cmp	r3, #73	; 0x49
 8002df6:	d02b      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002df8:	4b1c      	ldr	r3, [pc, #112]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b48      	cmp	r3, #72	; 0x48
 8002dfe:	d027      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e00:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b4a      	cmp	r3, #74	; 0x4a
 8002e06:	d023      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b52      	cmp	r3, #82	; 0x52
 8002e0e:	d01f      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e10:	4b16      	ldr	r3, [pc, #88]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b4c      	cmp	r3, #76	; 0x4c
 8002e16:	d01b      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e18:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b53      	cmp	r3, #83	; 0x53
 8002e1e:	d017      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e20:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b23      	cmp	r3, #35	; 0x23
 8002e26:	d013      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b40      	cmp	r3, #64	; 0x40
 8002e2e:	d00f      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e30:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b21      	cmp	r3, #33	; 0x21
 8002e36:	d00b      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b57      	cmp	r3, #87	; 0x57
 8002e3e:	d007      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b55      	cmp	r3, #85	; 0x55
 8002e46:	d003      	beq.n	8002e50 <HAL_UART_RxCpltCallback+0x80>
 8002e48:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b77      	cmp	r3, #119	; 0x77
 8002e4e:	d103      	bne.n	8002e58 <HAL_UART_RxCpltCallback+0x88>
		Bluetooth_RX_Data = temp;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_UART_RxCpltCallback+0xa0>)
 8002e56:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4904      	ldr	r1, [pc, #16]	; (8002e6c <HAL_UART_RxCpltCallback+0x9c>)
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f004 fd7f 	bl	8007960 <HAL_UART_Receive_IT>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000660 	.word	0x20000660
 8002e70:	20000074 	.word	0x20000074

08002e74 <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e009      	b.n	8002e9a <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	791b      	ldrb	r3, [r3, #4]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <ECU_Bluetooth_ReciveData+0x30>)
 8002e94:	f004 fd64 	bl	8007960 <HAL_UART_Receive_IT>

	return ECU_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000660 	.word	0x20000660

08002ea8 <ECU_Busser_GeneratePWM>:
  *
  * @param  busser_obj: busser handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Busser_GeneratePWM(busser_obj_t *busser_obj){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == busser_obj)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <ECU_Busser_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e07e      	b.n	8002fbc <ECU_Busser_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(busser_obj->htim, busser_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <ECU_Busser_GeneratePWM+0x34>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	bf14      	ite	ne
 8002ed4:	2301      	movne	r3, #1
 8002ed6:	2300      	moveq	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e045      	b.n	8002f68 <ECU_Busser_GeneratePWM+0xc0>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d10a      	bne.n	8002efa <ECU_Busser_GeneratePWM+0x52>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	bf14      	ite	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e036      	b.n	8002f68 <ECU_Busser_GeneratePWM+0xc0>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d10a      	bne.n	8002f18 <ECU_Busser_GeneratePWM+0x70>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e027      	b.n	8002f68 <ECU_Busser_GeneratePWM+0xc0>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b0c      	cmp	r3, #12
 8002f1e:	d10a      	bne.n	8002f36 <ECU_Busser_GeneratePWM+0x8e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e018      	b.n	8002f68 <ECU_Busser_GeneratePWM+0xc0>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d10a      	bne.n	8002f54 <ECU_Busser_GeneratePWM+0xac>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	bf14      	ite	ne
 8002f4c:	2301      	movne	r3, #1
 8002f4e:	2300      	moveq	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	e009      	b.n	8002f68 <ECU_Busser_GeneratePWM+0xc0>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <ECU_Busser_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e025      	b.n	8002fbc <ECU_Busser_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(busser_obj->Frequency));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <ECU_Busser_GeneratePWM+0x11c>)
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	busser_obj->htim->Instance->ARR = Period;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	busser_obj->htim->Instance->CCR1 = (uint32_t)(Period * (busser_obj->Duty_Cycle));
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa4:	ee17 2a90 	vmov	r2, s15
 8002fa8:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(busser_obj->htim, busser_obj->PWM_Channel);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f002 fdbf 	bl	8005b38 <HAL_TIM_PWM_Start>

	return ECU_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	000f4240 	.word	0x000f4240

08002fc8 <ECU_Busser_StopPWM>:
  *
  * @param  busser_obj: busser handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Busser_StopPWM(busser_obj_t *busser_obj){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == busser_obj)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <ECU_Busser_StopPWM+0x12>
	{
		return ECU_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e008      	b.n	8002fec <ECU_Busser_StopPWM+0x24>
	}

	HAL_TIM_PWM_Stop(busser_obj->htim, busser_obj->PWM_Channel);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f002 feb3 	bl	8005d50 <HAL_TIM_PWM_Stop>

	return ECU_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07e      	b.n	8003108 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <ECU_Motor_GeneratePWM+0x34>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e045      	b.n	80030b4 <ECU_Motor_GeneratePWM+0xc0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d10a      	bne.n	8003046 <ECU_Motor_GeneratePWM+0x52>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	e036      	b.n	80030b4 <ECU_Motor_GeneratePWM+0xc0>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b08      	cmp	r3, #8
 800304c:	d10a      	bne.n	8003064 <ECU_Motor_GeneratePWM+0x70>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e027      	b.n	80030b4 <ECU_Motor_GeneratePWM+0xc0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d10a      	bne.n	8003082 <ECU_Motor_GeneratePWM+0x8e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	bf14      	ite	ne
 800307a:	2301      	movne	r3, #1
 800307c:	2300      	moveq	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	e018      	b.n	80030b4 <ECU_Motor_GeneratePWM+0xc0>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b10      	cmp	r3, #16
 8003088:	d10a      	bne.n	80030a0 <ECU_Motor_GeneratePWM+0xac>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e009      	b.n	80030b4 <ECU_Motor_GeneratePWM+0xc0>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e025      	b.n	8003108 <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <ECU_Motor_GeneratePWM+0x11c>)
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	ee07 3a90 	vmov	s15, r3
 80030d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	edd3 7a03 	vldr	s15, [r3, #12]
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030f0:	ee17 2a90 	vmov	r2, s15
 80030f4:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	4619      	mov	r1, r3
 8003100:	4610      	mov	r0, r2
 8003102:	f002 fd19 	bl	8005b38 <HAL_TIM_PWM_Start>

	return ECU_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	000f4240 	.word	0x000f4240

08003114 <ECU_Motor_StopPWM>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_StopPWM(motor_obj_t *motor_obj){
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	/* Check NULL Pointer */
	if (NULL == motor_obj)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <ECU_Motor_StopPWM+0x12>
	{
		return ECU_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e008      	b.n	8003138 <ECU_Motor_StopPWM+0x24>
	}

	/* Stop the PWM signal generation */
	HAL_TIM_PWM_Stop(motor_obj->htim, motor_obj->PWM_Channel);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f002 fe0d 	bl	8005d50 <HAL_TIM_PWM_Stop>

	return ECU_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <ECU_Motor_ChangeSpeed>:
  * @param  speed: Speed of motor
  *         the can be either ( &high_speed or &medium_speed or &low_speed )
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_ChangeSpeed(motor_obj_t *motor_obj, const motor_speed_t *speed){
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ( (NULL == motor_obj) || (NULL == speed))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <ECU_Motor_ChangeSpeed+0x16>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <ECU_Motor_ChangeSpeed+0x1a>
	{
		return ECU_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e00e      	b.n	8003178 <ECU_Motor_ChangeSpeed+0x38>
	}

	/* Stop the old PWM */
	ECU_Motor_StopPWM(motor_obj);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ffda 	bl	8003114 <ECU_Motor_StopPWM>

	/* Update the Frequency of PWM Signal */
	motor_obj->speed.Frequency = speed->Frequency;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	609a      	str	r2, [r3, #8]

	/* Update the Duty Cycle of PWM Signal */
	motor_obj->speed.Duty_Cycle = speed->Duty_Cycle;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	60da      	str	r2, [r3, #12]

	/* Starts the Updated PWM signal generation */
	ECU_Motor_GeneratePWM(motor_obj);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff3f 	bl	8002ff4 <ECU_Motor_GeneratePWM>

	return ECU_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d002      	beq.n	8003196 <ECU_Motor_NextStep+0x16>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e099      	b.n	80032ce <ECU_Motor_NextStep+0x14e>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	3b21      	subs	r3, #33	; 0x21
 80031a0:	2b32      	cmp	r3, #50	; 0x32
 80031a2:	f200 8090 	bhi.w	80032c6 <ECU_Motor_NextStep+0x146>
 80031a6:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <ECU_Motor_NextStep+0x2c>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080032bf 	.word	0x080032bf
 80031b0:	080032c7 	.word	0x080032c7
 80031b4:	080032af 	.word	0x080032af
 80031b8:	080032c7 	.word	0x080032c7
 80031bc:	080032c7 	.word	0x080032c7
 80031c0:	080032c7 	.word	0x080032c7
 80031c4:	080032c7 	.word	0x080032c7
 80031c8:	080032c7 	.word	0x080032c7
 80031cc:	080032c7 	.word	0x080032c7
 80031d0:	080032c7 	.word	0x080032c7
 80031d4:	080032c7 	.word	0x080032c7
 80031d8:	080032c7 	.word	0x080032c7
 80031dc:	080032c7 	.word	0x080032c7
 80031e0:	080032c7 	.word	0x080032c7
 80031e4:	080032c7 	.word	0x080032c7
 80031e8:	080032c7 	.word	0x080032c7
 80031ec:	080032c7 	.word	0x080032c7
 80031f0:	080032c7 	.word	0x080032c7
 80031f4:	080032c7 	.word	0x080032c7
 80031f8:	080032c7 	.word	0x080032c7
 80031fc:	080032c7 	.word	0x080032c7
 8003200:	080032c7 	.word	0x080032c7
 8003204:	080032c7 	.word	0x080032c7
 8003208:	080032c7 	.word	0x080032c7
 800320c:	080032c7 	.word	0x080032c7
 8003210:	080032c7 	.word	0x080032c7
 8003214:	080032c7 	.word	0x080032c7
 8003218:	080032c7 	.word	0x080032c7
 800321c:	080032c7 	.word	0x080032c7
 8003220:	080032c7 	.word	0x080032c7
 8003224:	080032c7 	.word	0x080032c7
 8003228:	080032b7 	.word	0x080032b7
 800322c:	080032c7 	.word	0x080032c7
 8003230:	0800327f 	.word	0x0800327f
 8003234:	080032c7 	.word	0x080032c7
 8003238:	080032c7 	.word	0x080032c7
 800323c:	080032c7 	.word	0x080032c7
 8003240:	08003279 	.word	0x08003279
 8003244:	08003285 	.word	0x08003285
 8003248:	08003291 	.word	0x08003291
 800324c:	0800328b 	.word	0x0800328b
 8003250:	08003297 	.word	0x08003297
 8003254:	080032c7 	.word	0x080032c7
 8003258:	080032a3 	.word	0x080032a3
 800325c:	080032c7 	.word	0x080032c7
 8003260:	080032c7 	.word	0x080032c7
 8003264:	080032c7 	.word	0x080032c7
 8003268:	080032c7 	.word	0x080032c7
 800326c:	080032c7 	.word	0x080032c7
 8003270:	0800329d 	.word	0x0800329d
 8003274:	080032a9 	.word	0x080032a9
	{
		case FORWARD:       ECU_Motor_MoveForward     (); break;
 8003278:	f000 f834 	bl	80032e4 <ECU_Motor_MoveForward>
 800327c:	e026      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case REVERSE:       ECU_Motor_MoveReverse     (); break;
 800327e:	f000 f853 	bl	8003328 <ECU_Motor_MoveReverse>
 8003282:	e023      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (); break;
 8003284:	f000 f896 	bl	80033b4 <ECU_Motor_MoveForwardLeft>
 8003288:	e020      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(); break;
 800328a:	f000 f86f 	bl	800336c <ECU_Motor_MoveForwardRight>
 800328e:	e01d      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (); break;
 8003290:	f000 f8d8 	bl	8003444 <ECU_Motor_MoveReverseLeft>
 8003294:	e01a      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(); break;
 8003296:	f000 f8b1 	bl	80033fc <ECU_Motor_MoveReverseRight>
 800329a:	e017      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case RIGHT:         ECU_Motor_MoveRight       (); break;
 800329c:	f000 f91a 	bl	80034d4 <ECU_Motor_MoveRight>
 80032a0:	e014      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case LEFT:          ECU_Motor_MoveLeft        (); break;
 80032a2:	f000 f941 	bl	8003528 <ECU_Motor_MoveLeft>
 80032a6:	e011      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case STOP:          ECU_Motor_Stop            (); break;
 80032a8:	f000 f8f0 	bl	800348c <ECU_Motor_Stop>
 80032ac:	e00e      	b.n	80032cc <ECU_Motor_NextStep+0x14c>
		case HIGH_SPEED:    ECU_Motor_ChangeSpeed     (motor_obj, &high_speed);
 80032ae:	490a      	ldr	r1, [pc, #40]	; (80032d8 <ECU_Motor_NextStep+0x158>)
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff45 	bl	8003140 <ECU_Motor_ChangeSpeed>
		case MEDIUM_SPEED:  ECU_Motor_ChangeSpeed     (motor_obj, &medium_speed);
 80032b6:	4909      	ldr	r1, [pc, #36]	; (80032dc <ECU_Motor_NextStep+0x15c>)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff41 	bl	8003140 <ECU_Motor_ChangeSpeed>
		case LOW_SPEED:     ECU_Motor_ChangeSpeed     (motor_obj, &low_speed);
 80032be:	4908      	ldr	r1, [pc, #32]	; (80032e0 <ECU_Motor_NextStep+0x160>)
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f7ff ff3d 	bl	8003140 <ECU_Motor_ChangeSpeed>
		default:            ECU_Motor_Stop            (); break;
 80032c6:	f000 f8e1 	bl	800348c <ECU_Motor_Stop>
 80032ca:	bf00      	nop
	}

	return ECU_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000078 	.word	0x20000078
 80032dc:	20000080 	.word	0x20000080
 80032e0:	20000088 	.word	0x20000088

080032e4 <ECU_Motor_MoveForward>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0


	//printf("Motor_MoveForward\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80032e8:	2200      	movs	r2, #0
 80032ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ee:	480d      	ldr	r0, [pc, #52]	; (8003324 <ECU_Motor_MoveForward+0x40>)
 80032f0:	f000 fe06 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80032f4:	2200      	movs	r2, #0
 80032f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032fa:	480a      	ldr	r0, [pc, #40]	; (8003324 <ECU_Motor_MoveForward+0x40>)
 80032fc:	f000 fe00 	bl	8003f00 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003300:	2201      	movs	r2, #1
 8003302:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800330a:	f000 fdf9 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800330e:	2200      	movs	r2, #0
 8003310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003318:	f000 fdf2 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	48000800 	.word	0x48000800

08003328 <ECU_Motor_MoveReverse>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(){
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0


	//printf("MoveReverse\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800332c:	2200      	movs	r2, #0
 800332e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <ECU_Motor_MoveReverse+0x40>)
 8003334:	f000 fde4 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003338:	2200      	movs	r2, #0
 800333a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800333e:	480a      	ldr	r0, [pc, #40]	; (8003368 <ECU_Motor_MoveReverse+0x40>)
 8003340:	f000 fdde 	bl	8003f00 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003344:	2200      	movs	r2, #0
 8003346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800334a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800334e:	f000 fdd7 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003352:	2201      	movs	r2, #1
 8003354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003358:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800335c:	f000 fdd0 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	48000800 	.word	0x48000800

0800336c <ECU_Motor_MoveForwardRight>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(){
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0

	//printf("MoveForwardRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003370:	2201      	movs	r2, #1
 8003372:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003376:	480e      	ldr	r0, [pc, #56]	; (80033b0 <ECU_Motor_MoveForwardRight+0x44>)
 8003378:	f000 fdc2 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800337c:	2200      	movs	r2, #0
 800337e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003382:	480b      	ldr	r0, [pc, #44]	; (80033b0 <ECU_Motor_MoveForwardRight+0x44>)
 8003384:	f000 fdbc 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003388:	2064      	movs	r0, #100	; 0x64
 800338a:	f000 fab1 	bl	80038f0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800338e:	2201      	movs	r2, #1
 8003390:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003394:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003398:	f000 fdb2 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800339c:	2200      	movs	r2, #0
 800339e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a6:	f000 fdab 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	48000800 	.word	0x48000800

080033b4 <ECU_Motor_MoveForwardLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0

	//printf("MoveForwardLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80033b8:	2200      	movs	r2, #0
 80033ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033be:	480e      	ldr	r0, [pc, #56]	; (80033f8 <ECU_Motor_MoveForwardLeft+0x44>)
 80033c0:	f000 fd9e 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80033c4:	2201      	movs	r2, #1
 80033c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033ca:	480b      	ldr	r0, [pc, #44]	; (80033f8 <ECU_Motor_MoveForwardLeft+0x44>)
 80033cc:	f000 fd98 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80033d0:	2064      	movs	r0, #100	; 0x64
 80033d2:	f000 fa8d 	bl	80038f0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80033d6:	2201      	movs	r2, #1
 80033d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e0:	f000 fd8e 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80033e4:	2200      	movs	r2, #0
 80033e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ee:	f000 fd87 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	48000800 	.word	0x48000800

080033fc <ECU_Motor_MoveReverseRight>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0

	//printf("MoveReverseRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8003400:	2201      	movs	r2, #1
 8003402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003406:	480e      	ldr	r0, [pc, #56]	; (8003440 <ECU_Motor_MoveReverseRight+0x44>)
 8003408:	f000 fd7a 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003412:	480b      	ldr	r0, [pc, #44]	; (8003440 <ECU_Motor_MoveReverseRight+0x44>)
 8003414:	f000 fd74 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003418:	2064      	movs	r0, #100	; 0x64
 800341a:	f000 fa69 	bl	80038f0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800341e:	2200      	movs	r2, #0
 8003420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003428:	f000 fd6a 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800342c:	2201      	movs	r2, #1
 800342e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003436:	f000 fd63 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	48000800 	.word	0x48000800

08003444 <ECU_Motor_MoveReverseLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(){
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0

	//printf("MoveReverseLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003448:	2200      	movs	r2, #0
 800344a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800344e:	480e      	ldr	r0, [pc, #56]	; (8003488 <ECU_Motor_MoveReverseLeft+0x44>)
 8003450:	f000 fd56 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003454:	2201      	movs	r2, #1
 8003456:	f44f 7100 	mov.w	r1, #512	; 0x200
 800345a:	480b      	ldr	r0, [pc, #44]	; (8003488 <ECU_Motor_MoveReverseLeft+0x44>)
 800345c:	f000 fd50 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003460:	2064      	movs	r0, #100	; 0x64
 8003462:	f000 fa45 	bl	80038f0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003466:	2200      	movs	r2, #0
 8003468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800346c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003470:	f000 fd46 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003474:	2201      	movs	r2, #1
 8003476:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800347a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800347e:	f000 fd3f 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	48000800 	.word	0x48000800

0800348c <ECU_Motor_Stop>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(){
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0

	//printf("Stop\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003490:	2200      	movs	r2, #0
 8003492:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003496:	480e      	ldr	r0, [pc, #56]	; (80034d0 <ECU_Motor_Stop+0x44>)
 8003498:	f000 fd32 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800349c:	2200      	movs	r2, #0
 800349e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034a2:	480b      	ldr	r0, [pc, #44]	; (80034d0 <ECU_Motor_Stop+0x44>)
 80034a4:	f000 fd2c 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80034a8:	2032      	movs	r0, #50	; 0x32
 80034aa:	f000 fa21 	bl	80038f0 <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80034ae:	2201      	movs	r2, #1
 80034b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b8:	f000 fd22 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80034bc:	2201      	movs	r2, #1
 80034be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034c6:	f000 fd1b 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	48000800 	.word	0x48000800

080034d4 <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e01a      	b.n	800351c <ECU_Motor_MoveRight+0x48>

	//printf("MoveRight\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80034e6:	2201      	movs	r2, #1
 80034e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034ec:	480d      	ldr	r0, [pc, #52]	; (8003524 <ECU_Motor_MoveRight+0x50>)
 80034ee:	f000 fd07 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80034f2:	2200      	movs	r2, #0
 80034f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034f8:	480a      	ldr	r0, [pc, #40]	; (8003524 <ECU_Motor_MoveRight+0x50>)
 80034fa:	f000 fd01 	bl	8003f00 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80034fe:	2200      	movs	r2, #0
 8003500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003508:	f000 fcfa 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800350c:	2200      	movs	r2, #0
 800350e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003516:	f000 fcf3 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	48000800 	.word	0x48000800

08003528 <ECU_Motor_MoveLeft>:
  *
  * @param
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(){
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0

	//printf("MoveLeft\n");

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800352c:	2200      	movs	r2, #0
 800352e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003532:	480d      	ldr	r0, [pc, #52]	; (8003568 <ECU_Motor_MoveLeft+0x40>)
 8003534:	f000 fce4 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8003538:	2201      	movs	r2, #1
 800353a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800353e:	480a      	ldr	r0, [pc, #40]	; (8003568 <ECU_Motor_MoveLeft+0x40>)
 8003540:	f000 fcde 	bl	8003f00 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8003544:	2200      	movs	r2, #0
 8003546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800354a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800354e:	f000 fcd7 	bl	8003f00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8003552:	2200      	movs	r2, #0
 8003554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800355c:	f000 fcd0 	bl	8003f00 <HAL_GPIO_WritePin>

	return ECU_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	48000800 	.word	0x48000800

0800356c <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800356c:	b590      	push	{r4, r7, lr}
 800356e:	b085      	sub	sp, #20
 8003570:	af02      	add	r7, sp, #8
 8003572:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7f1b      	ldrb	r3, [r3, #28]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d145      	bne.n	8003608 <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 800357c:	4b24      	ldr	r3, [pc, #144]	; (8003610 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d114      	bne.n	80035b6 <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 800358c:	2100      	movs	r1, #0
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f002 fbde 	bl	8005d50 <HAL_TIM_PWM_Stop>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 8003594:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_TIM_IC_CaptureCallback+0xac>)
 800359e:	4413      	add	r3, r2
 80035a0:	4a1b      	ldr	r2, [pc, #108]	; (8003610 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	4611      	mov	r1, r2
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80035aa:	440a      	add	r2, r1
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8e0 	bl	8003774 <IC_first_Capture>
		}

	}
	else{/* Do Nothing */}

}
 80035b4:	e028      	b.n	8003608 <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 80035b6:	4b16      	ldr	r3, [pc, #88]	; (8003610 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80035c0:	5c9b      	ldrb	r3, [r3, r2]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d120      	bne.n	8003608 <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4a12      	ldr	r2, [pc, #72]	; (8003618 <HAL_TIM_IC_CaptureCallback+0xac>)
 80035d0:	1899      	adds	r1, r3, r2
 80035d2:	4b0f      	ldr	r3, [pc, #60]	; (8003610 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4a10      	ldr	r2, [pc, #64]	; (800361c <HAL_TIM_IC_CaptureCallback+0xb0>)
 80035dc:	441a      	add	r2, r3
 80035de:	4b0c      	ldr	r3, [pc, #48]	; (8003610 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	480e      	ldr	r0, [pc, #56]	; (8003620 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80035e8:	4418      	add	r0, r3
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461c      	mov	r4, r3
 80035f2:	4b08      	ldr	r3, [pc, #32]	; (8003614 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80035f4:	4423      	add	r3, r4
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4603      	mov	r3, r0
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f8e4 	bl	80037c8 <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 8003600:	2104      	movs	r1, #4
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f002 fdec 	bl	80061e0 <HAL_TIM_IC_Stop_IT>
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bd90      	pop	{r4, r7, pc}
 8003610:	20000698 	.word	0x20000698
 8003614:	2000069c 	.word	0x2000069c
 8003618:	200006a4 	.word	0x200006a4
 800361c:	200006bc 	.word	0x200006bc
 8003620:	200006d4 	.word	0x200006d4

08003624 <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e00f      	b.n	8003656 <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 8003636:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003660 <ECU_Ultrasonic_Read+0x3c>
 800363a:	f242 7110 	movw	r1, #10000	; 0x2710
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f810 	bl	8003664 <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4619      	mov	r1, r3
 800364e:	4610      	mov	r0, r2
 8003650:	f002 fc7c 	bl	8005f4c <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	3a83126f 	.word	0x3a83126f

08003664 <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e077      	b.n	800376c <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d10a      	bne.n	800369a <ECU_Ultrasonic_GenerateTrigger+0x36>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b01      	cmp	r3, #1
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e045      	b.n	8003726 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d10a      	bne.n	80036b8 <ECU_Ultrasonic_GenerateTrigger+0x54>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e036      	b.n	8003726 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d10a      	bne.n	80036d6 <ECU_Ultrasonic_GenerateTrigger+0x72>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e027      	b.n	8003726 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b0c      	cmp	r3, #12
 80036dc:	d10a      	bne.n	80036f4 <ECU_Ultrasonic_GenerateTrigger+0x90>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	bf14      	ite	ne
 80036ec:	2301      	movne	r3, #1
 80036ee:	2300      	moveq	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e018      	b.n	8003726 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2b10      	cmp	r3, #16
 80036fa:	d10a      	bne.n	8003712 <ECU_Ultrasonic_GenerateTrigger+0xae>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	bf14      	ite	ne
 800370a:	2301      	movne	r3, #1
 800370c:	2300      	moveq	r3, #0
 800370e:	b2db      	uxtb	r3, r3
 8003710:	e009      	b.n	8003726 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e01e      	b.n	800376c <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003742:	edd7 7a01 	vldr	s15, [r7, #4]
 8003746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003754:	ee17 2a90 	vmov	r2, s15
 8003758:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4619      	mov	r1, r3
 8003764:	4610      	mov	r0, r2
 8003766:	f002 f9e7 	bl	8005b38 <HAL_TIM_PWM_Start>

	return ECU_OK;;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8003780:	2104      	movs	r1, #4
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f003 f984 	bl	8006a90 <HAL_TIM_ReadCapturedValue>
 8003788:	4602      	mov	r2, r0
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a1a      	ldr	r2, [r3, #32]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ac:	621a      	str	r2, [r3, #32]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0220 	orr.w	r2, r2, #32
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80037d6:	2104      	movs	r1, #4
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f003 f959 	bl	8006a90 <HAL_TIM_ReadCapturedValue>
 80037de:	4602      	mov	r2, r0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2200      	movs	r2, #0
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d307      	bcc.n	8003808 <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1ad2      	subs	r2, r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e009      	b.n	800381c <IC_second_Capture+0x54>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003816:	33ff      	adds	r3, #255	; 0xff
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	6013      	str	r3, [r2, #0]
		//printf("sensor %d --------> overflow\n",sensor_index+1);
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	ee07 3a90 	vmov	s15, r3
 8003824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003828:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003878 <IC_second_Capture+0xb0>
 800382c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <IC_second_Capture+0xb4>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	461c      	mov	r4, r3
 8003838:	ee16 0a90 	vmov	r0, s13
 800383c:	f7fc fe8c 	bl	8000558 <__aeabi_f2d>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	480e      	ldr	r0, [pc, #56]	; (8003880 <IC_second_Capture+0xb8>)
 8003846:	00e1      	lsls	r1, r4, #3
 8003848:	4401      	add	r1, r0
 800384a:	e9c1 2300 	strd	r2, r3, [r1]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a1a      	ldr	r2, [r3, #32]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003862:	621a      	str	r2, [r3, #32]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6a12      	ldr	r2, [r2, #32]
 800386e:	621a      	str	r2, [r3, #32]
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bd90      	pop	{r4, r7, pc}
 8003878:	42680000 	.word	0x42680000
 800387c:	20000698 	.word	0x20000698
 8003880:	20000668 	.word	0x20000668

08003884 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003888:	4b08      	ldr	r3, [pc, #32]	; (80038ac <HAL_Init+0x28>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a07      	ldr	r2, [pc, #28]	; (80038ac <HAL_Init+0x28>)
 800388e:	f043 0310 	orr.w	r3, r3, #16
 8003892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003894:	2003      	movs	r0, #3
 8003896:	f000 f8fc 	bl	8003a92 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800389a:	200f      	movs	r0, #15
 800389c:	f7fd ff8e 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038a0:	f7fd ff64 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40022000 	.word	0x40022000

080038b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <HAL_IncTick+0x20>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <HAL_IncTick+0x24>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4413      	add	r3, r2
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_IncTick+0x24>)
 80038c2:	6013      	str	r3, [r2, #0]
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	20000094 	.word	0x20000094
 80038d4:	200006ec 	.word	0x200006ec

080038d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return uwTick;  
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_GetTick+0x14>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	200006ec 	.word	0x200006ec

080038f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f8:	f7ff ffee 	bl	80038d8 <HAL_GetTick>
 80038fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d005      	beq.n	8003916 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_Delay+0x44>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003916:	bf00      	nop
 8003918:	f7ff ffde 	bl	80038d8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	429a      	cmp	r2, r3
 8003926:	d8f7      	bhi.n	8003918 <HAL_Delay+0x28>
  {
  }
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000094 	.word	0x20000094

08003938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <__NVIC_SetPriorityGrouping+0x44>)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60d3      	str	r3, [r2, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003984:	4b04      	ldr	r3, [pc, #16]	; (8003998 <__NVIC_GetPriorityGrouping+0x18>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	f003 0307 	and.w	r3, r3, #7
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db0b      	blt.n	80039c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	4907      	ldr	r1, [pc, #28]	; (80039d4 <__NVIC_EnableIRQ+0x38>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2001      	movs	r0, #1
 80039be:	fa00 f202 	lsl.w	r2, r0, r2
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db0a      	blt.n	8003a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <__NVIC_SetPriority+0x4c>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	0112      	lsls	r2, r2, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	440b      	add	r3, r1
 80039fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a00:	e00a      	b.n	8003a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4908      	ldr	r1, [pc, #32]	; (8003a28 <__NVIC_SetPriority+0x50>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	761a      	strb	r2, [r3, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000e100 	.word	0xe000e100
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f1c3 0307 	rsb	r3, r3, #7
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	bf28      	it	cs
 8003a4a:	2304      	movcs	r3, #4
 8003a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d902      	bls.n	8003a5c <NVIC_EncodePriority+0x30>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3b03      	subs	r3, #3
 8003a5a:	e000      	b.n	8003a5e <NVIC_EncodePriority+0x32>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43d9      	mvns	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	4313      	orrs	r3, r2
         );
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff4c 	bl	8003938 <__NVIC_SetPriorityGrouping>
}
 8003aa0:	bf00      	nop
 8003aa2:	3708      	adds	r7, #8
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aba:	f7ff ff61 	bl	8003980 <__NVIC_GetPriorityGrouping>
 8003abe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68b9      	ldr	r1, [r7, #8]
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	f7ff ffb1 	bl	8003a2c <NVIC_EncodePriority>
 8003aca:	4602      	mov	r2, r0
 8003acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff80 	bl	80039d8 <__NVIC_SetPriority>
}
 8003ad8:	bf00      	nop
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff54 	bl	800399c <__NVIC_EnableIRQ>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d008      	beq.n	8003b20 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2204      	movs	r2, #4
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e020      	b.n	8003b62 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 020e 	bic.w	r2, r2, #14
 8003b2e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0201 	bic.w	r2, r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b48:	2101      	movs	r1, #1
 8003b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b4e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d005      	beq.n	8003b90 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2204      	movs	r2, #4
 8003b88:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	73fb      	strb	r3, [r7, #15]
 8003b8e:	e027      	b.n	8003be0 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 020e 	bic.w	r2, r2, #14
 8003b9e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0201 	bic.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
    } 
  }
  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bfa:	e160      	b.n	8003ebe <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8152 	beq.w	8003eb8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d005      	beq.n	8003c2c <HAL_GPIO_Init+0x40>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d130      	bne.n	8003c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c62:	2201      	movs	r2, #1
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 0201 	and.w	r2, r3, #1
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d017      	beq.n	8003cca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d123      	bne.n	8003d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	08da      	lsrs	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3208      	adds	r2, #8
 8003cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	220f      	movs	r2, #15
 8003cee:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691a      	ldr	r2, [r3, #16]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	08da      	lsrs	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3208      	adds	r2, #8
 8003d18:	6939      	ldr	r1, [r7, #16]
 8003d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4013      	ands	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0203 	and.w	r2, r3, #3
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 80ac 	beq.w	8003eb8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d60:	4b5e      	ldr	r3, [pc, #376]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4a5d      	ldr	r2, [pc, #372]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	6193      	str	r3, [r2, #24]
 8003d6c:	4b5b      	ldr	r3, [pc, #364]	; (8003edc <HAL_GPIO_Init+0x2f0>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d78:	4a59      	ldr	r2, [pc, #356]	; (8003ee0 <HAL_GPIO_Init+0x2f4>)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	220f      	movs	r2, #15
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003da2:	d025      	beq.n	8003df0 <HAL_GPIO_Init+0x204>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a4f      	ldr	r2, [pc, #316]	; (8003ee4 <HAL_GPIO_Init+0x2f8>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d01f      	beq.n	8003dec <HAL_GPIO_Init+0x200>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a4e      	ldr	r2, [pc, #312]	; (8003ee8 <HAL_GPIO_Init+0x2fc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d019      	beq.n	8003de8 <HAL_GPIO_Init+0x1fc>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a4d      	ldr	r2, [pc, #308]	; (8003eec <HAL_GPIO_Init+0x300>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_GPIO_Init+0x1f8>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a4c      	ldr	r2, [pc, #304]	; (8003ef0 <HAL_GPIO_Init+0x304>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00d      	beq.n	8003de0 <HAL_GPIO_Init+0x1f4>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a4b      	ldr	r2, [pc, #300]	; (8003ef4 <HAL_GPIO_Init+0x308>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <HAL_GPIO_Init+0x1f0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a4a      	ldr	r2, [pc, #296]	; (8003ef8 <HAL_GPIO_Init+0x30c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_GPIO_Init+0x1ec>
 8003dd4:	2306      	movs	r3, #6
 8003dd6:	e00c      	b.n	8003df2 <HAL_GPIO_Init+0x206>
 8003dd8:	2307      	movs	r3, #7
 8003dda:	e00a      	b.n	8003df2 <HAL_GPIO_Init+0x206>
 8003ddc:	2305      	movs	r3, #5
 8003dde:	e008      	b.n	8003df2 <HAL_GPIO_Init+0x206>
 8003de0:	2304      	movs	r3, #4
 8003de2:	e006      	b.n	8003df2 <HAL_GPIO_Init+0x206>
 8003de4:	2303      	movs	r3, #3
 8003de6:	e004      	b.n	8003df2 <HAL_GPIO_Init+0x206>
 8003de8:	2302      	movs	r3, #2
 8003dea:	e002      	b.n	8003df2 <HAL_GPIO_Init+0x206>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <HAL_GPIO_Init+0x206>
 8003df0:	2300      	movs	r3, #0
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	f002 0203 	and.w	r2, r2, #3
 8003df8:	0092      	lsls	r2, r2, #2
 8003dfa:	4093      	lsls	r3, r2
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e02:	4937      	ldr	r1, [pc, #220]	; (8003ee0 <HAL_GPIO_Init+0x2f4>)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	3302      	adds	r3, #2
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e10:	4b3a      	ldr	r3, [pc, #232]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003e34:	4a31      	ldr	r2, [pc, #196]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e3a:	4b30      	ldr	r3, [pc, #192]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e5e:	4a27      	ldr	r2, [pc, #156]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e64:	4b25      	ldr	r3, [pc, #148]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e88:	4a1c      	ldr	r2, [pc, #112]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	43db      	mvns	r3, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003eb2:	4a12      	ldr	r2, [pc, #72]	; (8003efc <HAL_GPIO_Init+0x310>)
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f47f ae97 	bne.w	8003bfc <HAL_GPIO_Init+0x10>
  }
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	48000400 	.word	0x48000400
 8003ee8:	48000800 	.word	0x48000800
 8003eec:	48000c00 	.word	0x48000c00
 8003ef0:	48001000 	.word	0x48001000
 8003ef4:	48001400 	.word	0x48001400
 8003ef8:	48001800 	.word	0x48001800
 8003efc:	40010400 	.word	0x40010400

08003f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f10:	787b      	ldrb	r3, [r7, #1]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f16:	887a      	ldrh	r2, [r7, #2]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f1e:	887a      	ldrh	r2, [r7, #2]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f40:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f46:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d102      	bne.n	8003f56 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f001 b83a 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f5a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 816f 	beq.w	800424a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f6c:	4bb5      	ldr	r3, [pc, #724]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 030c 	and.w	r3, r3, #12
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d00c      	beq.n	8003f92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f78:	4bb2      	ldr	r3, [pc, #712]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d15c      	bne.n	800403e <HAL_RCC_OscConfig+0x10e>
 8003f84:	4baf      	ldr	r3, [pc, #700]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d155      	bne.n	800403e <HAL_RCC_OscConfig+0x10e>
 8003f92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f9e:	fa93 f3a3 	rbit	r3, r3
 8003fa2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fa6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f043 0301 	orr.w	r3, r3, #1
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d102      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x94>
 8003fbe:	4ba1      	ldr	r3, [pc, #644]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	e015      	b.n	8003ff0 <HAL_RCC_OscConfig+0xc0>
 8003fc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fc8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003fd0:	fa93 f3a3 	rbit	r3, r3
 8003fd4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fdc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003fe0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8003fe4:	fa93 f3a3 	rbit	r3, r3
 8003fe8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003fec:	4b95      	ldr	r3, [pc, #596]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ff4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8003ff8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003ffc:	fa92 f2a2 	rbit	r2, r2
 8004000:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004004:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004008:	fab2 f282 	clz	r2, r2
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	f042 0220 	orr.w	r2, r2, #32
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	f002 021f 	and.w	r2, r2, #31
 8004018:	2101      	movs	r1, #1
 800401a:	fa01 f202 	lsl.w	r2, r1, r2
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8111 	beq.w	8004248 <HAL_RCC_OscConfig+0x318>
 8004026:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800402a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 8108 	bne.w	8004248 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f000 bfc6 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004042:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404e:	d106      	bne.n	800405e <HAL_RCC_OscConfig+0x12e>
 8004050:	4b7c      	ldr	r3, [pc, #496]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7b      	ldr	r2, [pc, #492]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8004056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	e036      	b.n	80040cc <HAL_RCC_OscConfig+0x19c>
 800405e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004062:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10c      	bne.n	8004088 <HAL_RCC_OscConfig+0x158>
 800406e:	4b75      	ldr	r3, [pc, #468]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a74      	ldr	r2, [pc, #464]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8004074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b72      	ldr	r3, [pc, #456]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a71      	ldr	r2, [pc, #452]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8004080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e021      	b.n	80040cc <HAL_RCC_OscConfig+0x19c>
 8004088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800408c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x184>
 800409a:	4b6a      	ldr	r3, [pc, #424]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a69      	ldr	r2, [pc, #420]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80040a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b67      	ldr	r3, [pc, #412]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a66      	ldr	r2, [pc, #408]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e00b      	b.n	80040cc <HAL_RCC_OscConfig+0x19c>
 80040b4:	4b63      	ldr	r3, [pc, #396]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a62      	ldr	r2, [pc, #392]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b60      	ldr	r3, [pc, #384]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a5f      	ldr	r2, [pc, #380]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80040d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d059      	beq.n	8004190 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7ff fbfc 	bl	80038d8 <HAL_GetTick>
 80040e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e4:	e00a      	b.n	80040fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e6:	f7ff fbf7 	bl	80038d8 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b64      	cmp	r3, #100	; 0x64
 80040f4:	d902      	bls.n	80040fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	f000 bf67 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>
 80040fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004100:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004110:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004114:	fab3 f383 	clz	r3, r3
 8004118:	b2db      	uxtb	r3, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f043 0301 	orr.w	r3, r3, #1
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	d102      	bne.n	800412e <HAL_RCC_OscConfig+0x1fe>
 8004128:	4b46      	ldr	r3, [pc, #280]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x22a>
 800412e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004132:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800413a:	fa93 f3a3 	rbit	r3, r3
 800413e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004142:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004146:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800414a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800415e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004162:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004166:	fa92 f2a2 	rbit	r2, r2
 800416a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800416e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004172:	fab2 f282 	clz	r2, r2
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	f042 0220 	orr.w	r2, r2, #32
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	f002 021f 	and.w	r2, r2, #31
 8004182:	2101      	movs	r1, #1
 8004184:	fa01 f202 	lsl.w	r2, r1, r2
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ab      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1b6>
 800418e:	e05c      	b.n	800424a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7ff fba2 	bl	80038d8 <HAL_GetTick>
 8004194:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419a:	f7ff fb9d 	bl	80038d8 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d902      	bls.n	80041b0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	f000 bf0d 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>
 80041b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80041c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c8:	fab3 f383 	clz	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	095b      	lsrs	r3, r3, #5
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d102      	bne.n	80041e2 <HAL_RCC_OscConfig+0x2b2>
 80041dc:	4b19      	ldr	r3, [pc, #100]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	e015      	b.n	800420e <HAL_RCC_OscConfig+0x2de>
 80041e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80041f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80041fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800420a:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_RCC_OscConfig+0x314>)
 800420c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004212:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004216:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800421a:	fa92 f2a2 	rbit	r2, r2
 800421e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004222:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004226:	fab2 f282 	clz	r2, r2
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	f042 0220 	orr.w	r2, r2, #32
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	f002 021f 	and.w	r2, r2, #31
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f202 	lsl.w	r2, r1, r2
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1ab      	bne.n	800419a <HAL_RCC_OscConfig+0x26a>
 8004242:	e002      	b.n	800424a <HAL_RCC_OscConfig+0x31a>
 8004244:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800424e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 817f 	beq.w	800455e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004260:	4ba7      	ldr	r3, [pc, #668]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00c      	beq.n	8004286 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800426c:	4ba4      	ldr	r3, [pc, #656]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b08      	cmp	r3, #8
 8004276:	d173      	bne.n	8004360 <HAL_RCC_OscConfig+0x430>
 8004278:	4ba1      	ldr	r3, [pc, #644]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004284:	d16c      	bne.n	8004360 <HAL_RCC_OscConfig+0x430>
 8004286:	2302      	movs	r3, #2
 8004288:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004298:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429c:	fab3 f383 	clz	r3, r3
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d102      	bne.n	80042b6 <HAL_RCC_OscConfig+0x386>
 80042b0:	4b93      	ldr	r3, [pc, #588]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	e013      	b.n	80042de <HAL_RCC_OscConfig+0x3ae>
 80042b6:	2302      	movs	r3, #2
 80042b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80042c8:	2302      	movs	r3, #2
 80042ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80042ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80042da:	4b89      	ldr	r3, [pc, #548]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2202      	movs	r2, #2
 80042e0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80042e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80042e8:	fa92 f2a2 	rbit	r2, r2
 80042ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80042f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80042f4:	fab2 f282 	clz	r2, r2
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	f042 0220 	orr.w	r2, r2, #32
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	f002 021f 	and.w	r2, r2, #31
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f202 	lsl.w	r2, r1, r2
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCC_OscConfig+0x3f6>
 8004310:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004314:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d002      	beq.n	8004326 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f000 be52 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004326:	4b76      	ldr	r3, [pc, #472]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800432e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004332:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	21f8      	movs	r1, #248	; 0xf8
 800433c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004340:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004344:	fa91 f1a1 	rbit	r1, r1
 8004348:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800434c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004350:	fab1 f181 	clz	r1, r1
 8004354:	b2c9      	uxtb	r1, r1
 8004356:	408b      	lsls	r3, r1
 8004358:	4969      	ldr	r1, [pc, #420]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800435e:	e0fe      	b.n	800455e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004360:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004364:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 8088 	beq.w	8004482 <HAL_RCC_OscConfig+0x552>
 8004372:	2301      	movs	r3, #1
 8004374:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004384:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004388:	fab3 f383 	clz	r3, r3
 800438c:	b2db      	uxtb	r3, r3
 800438e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004392:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	461a      	mov	r2, r3
 800439a:	2301      	movs	r3, #1
 800439c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439e:	f7ff fa9b 	bl	80038d8 <HAL_GetTick>
 80043a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	e00a      	b.n	80043be <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a8:	f7ff fa96 	bl	80038d8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d902      	bls.n	80043be <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	f000 be06 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>
 80043be:	2302      	movs	r3, #2
 80043c0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80043c8:	fa93 f3a3 	rbit	r3, r3
 80043cc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80043d0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	fab3 f383 	clz	r3, r3
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	095b      	lsrs	r3, r3, #5
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_OscConfig+0x4be>
 80043e8:	4b45      	ldr	r3, [pc, #276]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	e013      	b.n	8004416 <HAL_RCC_OscConfig+0x4e6>
 80043ee:	2302      	movs	r3, #2
 80043f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004400:	2302      	movs	r3, #2
 8004402:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004406:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800440a:	fa93 f3a3 	rbit	r3, r3
 800440e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004412:	4b3b      	ldr	r3, [pc, #236]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	2202      	movs	r2, #2
 8004418:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800441c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004420:	fa92 f2a2 	rbit	r2, r2
 8004424:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004428:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800442c:	fab2 f282 	clz	r2, r2
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	f042 0220 	orr.w	r2, r2, #32
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	f002 021f 	and.w	r2, r2, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0af      	beq.n	80043a8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004448:	4b2d      	ldr	r3, [pc, #180]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004454:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	21f8      	movs	r1, #248	; 0xf8
 800445e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004466:	fa91 f1a1 	rbit	r1, r1
 800446a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800446e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004472:	fab1 f181 	clz	r1, r1
 8004476:	b2c9      	uxtb	r1, r1
 8004478:	408b      	lsls	r3, r1
 800447a:	4921      	ldr	r1, [pc, #132]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 800447c:	4313      	orrs	r3, r2
 800447e:	600b      	str	r3, [r1, #0]
 8004480:	e06d      	b.n	800455e <HAL_RCC_OscConfig+0x62e>
 8004482:	2301      	movs	r3, #1
 8004484:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800448c:	fa93 f3a3 	rbit	r3, r3
 8004490:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004494:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004498:	fab3 f383 	clz	r3, r3
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	461a      	mov	r2, r3
 80044aa:	2300      	movs	r3, #0
 80044ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ae:	f7ff fa13 	bl	80038d8 <HAL_GetTick>
 80044b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b8:	f7ff fa0e 	bl	80038d8 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d902      	bls.n	80044ce <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	f000 bd7e 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>
 80044ce:	2302      	movs	r3, #2
 80044d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80044d8:	fa93 f3a3 	rbit	r3, r3
 80044dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80044e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e4:	fab3 f383 	clz	r3, r3
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <HAL_RCC_OscConfig+0x5d4>
 80044f8:	4b01      	ldr	r3, [pc, #4]	; (8004500 <HAL_RCC_OscConfig+0x5d0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	e016      	b.n	800452c <HAL_RCC_OscConfig+0x5fc>
 80044fe:	bf00      	nop
 8004500:	40021000 	.word	0x40021000
 8004504:	2302      	movs	r3, #2
 8004506:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800450e:	fa93 f3a3 	rbit	r3, r3
 8004512:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004516:	2302      	movs	r3, #2
 8004518:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800451c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004528:	4bbf      	ldr	r3, [pc, #764]	; (8004828 <HAL_RCC_OscConfig+0x8f8>)
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2202      	movs	r2, #2
 800452e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004532:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004536:	fa92 f2a2 	rbit	r2, r2
 800453a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800453e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004542:	fab2 f282 	clz	r2, r2
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	f042 0220 	orr.w	r2, r2, #32
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	f002 021f 	and.w	r2, r2, #31
 8004552:	2101      	movs	r1, #1
 8004554:	fa01 f202 	lsl.w	r2, r1, r2
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1ac      	bne.n	80044b8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800455e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004562:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8113 	beq.w	800479a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004578:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d07c      	beq.n	800467e <HAL_RCC_OscConfig+0x74e>
 8004584:	2301      	movs	r3, #1
 8004586:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800458e:	fa93 f3a3 	rbit	r3, r3
 8004592:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004596:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	fab3 f383 	clz	r3, r3
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	4ba2      	ldr	r3, [pc, #648]	; (800482c <HAL_RCC_OscConfig+0x8fc>)
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	461a      	mov	r2, r3
 80045aa:	2301      	movs	r3, #1
 80045ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ae:	f7ff f993 	bl	80038d8 <HAL_GetTick>
 80045b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b8:	f7ff f98e 	bl	80038d8 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d902      	bls.n	80045ce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	f000 bcfe 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>
 80045ce:	2302      	movs	r3, #2
 80045d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d8:	fa93 f2a3 	rbit	r2, r3
 80045dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045ee:	2202      	movs	r2, #2
 80045f0:	601a      	str	r2, [r3, #0]
 80045f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80045f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	fa93 f2a3 	rbit	r2, r3
 8004600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004604:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800460e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004612:	2202      	movs	r2, #2
 8004614:	601a      	str	r2, [r3, #0]
 8004616:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800461a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	fa93 f2a3 	rbit	r2, r3
 8004624:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004628:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800462c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	4b7e      	ldr	r3, [pc, #504]	; (8004828 <HAL_RCC_OscConfig+0x8f8>)
 8004630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004636:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800463a:	2102      	movs	r1, #2
 800463c:	6019      	str	r1, [r3, #0]
 800463e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004642:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	fa93 f1a3 	rbit	r1, r3
 800464c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004650:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004654:	6019      	str	r1, [r3, #0]
  return result;
 8004656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800465a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f003 031f 	and.w	r3, r3, #31
 8004670:	2101      	movs	r1, #1
 8004672:	fa01 f303 	lsl.w	r3, r1, r3
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d09d      	beq.n	80045b8 <HAL_RCC_OscConfig+0x688>
 800467c:	e08d      	b.n	800479a <HAL_RCC_OscConfig+0x86a>
 800467e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004682:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800468e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	fa93 f2a3 	rbit	r2, r3
 8004698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800469c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046a0:	601a      	str	r2, [r3, #0]
  return result;
 80046a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80046aa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ac:	fab3 f383 	clz	r3, r3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	4b5d      	ldr	r3, [pc, #372]	; (800482c <HAL_RCC_OscConfig+0x8fc>)
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	461a      	mov	r2, r3
 80046bc:	2300      	movs	r3, #0
 80046be:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c0:	f7ff f90a 	bl	80038d8 <HAL_GetTick>
 80046c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046ca:	f7ff f905 	bl	80038d8 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d902      	bls.n	80046e0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	f000 bc75 	b.w	8004fca <HAL_RCC_OscConfig+0x109a>
 80046e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046e4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80046e8:	2202      	movs	r2, #2
 80046ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	fa93 f2a3 	rbit	r2, r3
 80046fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80046fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004708:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800470c:	2202      	movs	r2, #2
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	fa93 f2a3 	rbit	r2, r3
 800471e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800472c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004730:	2202      	movs	r2, #2
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004738:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	fa93 f2a3 	rbit	r2, r3
 8004742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004746:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800474a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	4b36      	ldr	r3, [pc, #216]	; (8004828 <HAL_RCC_OscConfig+0x8f8>)
 800474e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004754:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004758:	2102      	movs	r1, #2
 800475a:	6019      	str	r1, [r3, #0]
 800475c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004760:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	fa93 f1a3 	rbit	r1, r3
 800476a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800476e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004772:	6019      	str	r1, [r3, #0]
  return result;
 8004774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004778:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	2101      	movs	r1, #1
 8004790:	fa01 f303 	lsl.w	r3, r1, r3
 8004794:	4013      	ands	r3, r2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d197      	bne.n	80046ca <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800479a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800479e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 81a5 	beq.w	8004afa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b6:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <HAL_RCC_OscConfig+0x8f8>)
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d116      	bne.n	80047f0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_RCC_OscConfig+0x8f8>)
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_RCC_OscConfig+0x8f8>)
 80047c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047cc:	61d3      	str	r3, [r2, #28]
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <HAL_RCC_OscConfig+0x8f8>)
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80047d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <HAL_RCC_OscConfig+0x900>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d121      	bne.n	8004840 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <HAL_RCC_OscConfig+0x900>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a0b      	ldr	r2, [pc, #44]	; (8004830 <HAL_RCC_OscConfig+0x900>)
 8004802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004806:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004808:	f7ff f866 	bl	80038d8 <HAL_GetTick>
 800480c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004810:	e010      	b.n	8004834 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004812:	f7ff f861 	bl	80038d8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	; 0x64
 8004820:	d908      	bls.n	8004834 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e3d1      	b.n	8004fca <HAL_RCC_OscConfig+0x109a>
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000
 800482c:	10908120 	.word	0x10908120
 8004830:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004834:	4b8d      	ldr	r3, [pc, #564]	; (8004a6c <HAL_RCC_OscConfig+0xb3c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0e8      	beq.n	8004812 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004844:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d106      	bne.n	800485e <HAL_RCC_OscConfig+0x92e>
 8004850:	4b87      	ldr	r3, [pc, #540]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	4a86      	ldr	r2, [pc, #536]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6213      	str	r3, [r2, #32]
 800485c:	e035      	b.n	80048ca <HAL_RCC_OscConfig+0x99a>
 800485e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004862:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10c      	bne.n	8004888 <HAL_RCC_OscConfig+0x958>
 800486e:	4b80      	ldr	r3, [pc, #512]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	4a7f      	ldr	r2, [pc, #508]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 8004874:	f023 0301 	bic.w	r3, r3, #1
 8004878:	6213      	str	r3, [r2, #32]
 800487a:	4b7d      	ldr	r3, [pc, #500]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	4a7c      	ldr	r2, [pc, #496]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	6213      	str	r3, [r2, #32]
 8004886:	e020      	b.n	80048ca <HAL_RCC_OscConfig+0x99a>
 8004888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800488c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	2b05      	cmp	r3, #5
 8004896:	d10c      	bne.n	80048b2 <HAL_RCC_OscConfig+0x982>
 8004898:	4b75      	ldr	r3, [pc, #468]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4a74      	ldr	r2, [pc, #464]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 800489e:	f043 0304 	orr.w	r3, r3, #4
 80048a2:	6213      	str	r3, [r2, #32]
 80048a4:	4b72      	ldr	r3, [pc, #456]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	4a71      	ldr	r2, [pc, #452]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	6213      	str	r3, [r2, #32]
 80048b0:	e00b      	b.n	80048ca <HAL_RCC_OscConfig+0x99a>
 80048b2:	4b6f      	ldr	r3, [pc, #444]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4a6e      	ldr	r2, [pc, #440]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	6213      	str	r3, [r2, #32]
 80048be:	4b6c      	ldr	r3, [pc, #432]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4a6b      	ldr	r2, [pc, #428]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 80048c4:	f023 0304 	bic.w	r3, r3, #4
 80048c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80048ce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8081 	beq.w	80049de <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048dc:	f7fe fffc 	bl	80038d8 <HAL_GetTick>
 80048e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	e00b      	b.n	80048fe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fe fff7 	bl	80038d8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e365      	b.n	8004fca <HAL_RCC_OscConfig+0x109a>
 80048fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004902:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004906:	2202      	movs	r2, #2
 8004908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800490a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800490e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	fa93 f2a3 	rbit	r2, r3
 8004918:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800491c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004926:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800492a:	2202      	movs	r2, #2
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004932:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	fa93 f2a3 	rbit	r2, r3
 800493c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004940:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004944:	601a      	str	r2, [r3, #0]
  return result;
 8004946:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800494e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f043 0302 	orr.w	r3, r3, #2
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d102      	bne.n	800496a <HAL_RCC_OscConfig+0xa3a>
 8004964:	4b42      	ldr	r3, [pc, #264]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	e013      	b.n	8004992 <HAL_RCC_OscConfig+0xa62>
 800496a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800496e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004972:	2202      	movs	r2, #2
 8004974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800497a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	fa93 f2a3 	rbit	r2, r3
 8004984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004988:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004996:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800499a:	2102      	movs	r1, #2
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	fa92 f1a2 	rbit	r1, r2
 80049ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049b0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80049b4:	6011      	str	r1, [r2, #0]
  return result;
 80049b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80049ba:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	fab2 f282 	clz	r2, r2
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	f002 021f 	and.w	r2, r2, #31
 80049d0:	2101      	movs	r1, #1
 80049d2:	fa01 f202 	lsl.w	r2, r1, r2
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d084      	beq.n	80048e6 <HAL_RCC_OscConfig+0x9b6>
 80049dc:	e083      	b.n	8004ae6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049de:	f7fe ff7b 	bl	80038d8 <HAL_GetTick>
 80049e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e6:	e00b      	b.n	8004a00 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e8:	f7fe ff76 	bl	80038d8 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e2e4      	b.n	8004fca <HAL_RCC_OscConfig+0x109a>
 8004a00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a04:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a08:	2202      	movs	r2, #2
 8004a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a10:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	fa93 f2a3 	rbit	r2, r3
 8004a1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a1e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a28:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	601a      	str	r2, [r3, #0]
 8004a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a34:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	fa93 f2a3 	rbit	r2, r3
 8004a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a42:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a46:	601a      	str	r2, [r3, #0]
  return result;
 8004a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a4c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a50:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a52:	fab3 f383 	clz	r3, r3
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f043 0302 	orr.w	r3, r3, #2
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d106      	bne.n	8004a74 <HAL_RCC_OscConfig+0xb44>
 8004a66:	4b02      	ldr	r3, [pc, #8]	; (8004a70 <HAL_RCC_OscConfig+0xb40>)
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	e017      	b.n	8004a9c <HAL_RCC_OscConfig+0xb6c>
 8004a6c:	40007000 	.word	0x40007000
 8004a70:	40021000 	.word	0x40021000
 8004a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a78:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a84:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	fa93 f2a3 	rbit	r2, r3
 8004a8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a92:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	4bb3      	ldr	r3, [pc, #716]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004aa0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004aa4:	2102      	movs	r1, #2
 8004aa6:	6011      	str	r1, [r2, #0]
 8004aa8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004aac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	fa92 f1a2 	rbit	r1, r2
 8004ab6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004aba:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004abe:	6011      	str	r1, [r2, #0]
  return result;
 8004ac0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ac4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	fab2 f282 	clz	r2, r2
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ad4:	b2d2      	uxtb	r2, r2
 8004ad6:	f002 021f 	and.w	r2, r2, #31
 8004ada:	2101      	movs	r1, #1
 8004adc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d180      	bne.n	80049e8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ae6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d105      	bne.n	8004afa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aee:	4b9e      	ldr	r3, [pc, #632]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4a9d      	ldr	r2, [pc, #628]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004afe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 825e 	beq.w	8004fc8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b0c:	4b96      	ldr	r3, [pc, #600]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 030c 	and.w	r3, r3, #12
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	f000 821f 	beq.w	8004f58 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b1e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	f040 8170 	bne.w	8004e0c <HAL_RCC_OscConfig+0xedc>
 8004b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b30:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b3e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	fa93 f2a3 	rbit	r2, r3
 8004b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004b50:	601a      	str	r2, [r3, #0]
  return result;
 8004b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b56:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004b5a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5c:	fab3 f383 	clz	r3, r3
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b72:	f7fe feb1 	bl	80038d8 <HAL_GetTick>
 8004b76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b7a:	e009      	b.n	8004b90 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b7c:	f7fe feac 	bl	80038d8 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e21c      	b.n	8004fca <HAL_RCC_OscConfig+0x109a>
 8004b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b94:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ba2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	fa93 f2a3 	rbit	r2, r3
 8004bac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bb0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004bb4:	601a      	str	r2, [r3, #0]
  return result;
 8004bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004bbe:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc0:	fab3 f383 	clz	r3, r3
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d102      	bne.n	8004bda <HAL_RCC_OscConfig+0xcaa>
 8004bd4:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	e027      	b.n	8004c2a <HAL_RCC_OscConfig+0xcfa>
 8004bda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bde:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bec:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	fa93 f2a3 	rbit	r2, r3
 8004bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004bfa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c04:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	fa93 f2a3 	rbit	r2, r3
 8004c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c20:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	4b50      	ldr	r3, [pc, #320]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c2e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c32:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c36:	6011      	str	r1, [r2, #0]
 8004c38:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c3c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	fa92 f1a2 	rbit	r1, r2
 8004c46:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c4a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004c4e:	6011      	str	r1, [r2, #0]
  return result;
 8004c50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004c54:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	fab2 f282 	clz	r2, r2
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	f042 0220 	orr.w	r2, r2, #32
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	f002 021f 	and.w	r2, r2, #31
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d182      	bne.n	8004b7c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c76:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7a:	f023 020f 	bic.w	r2, r3, #15
 8004c7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	4937      	ldr	r1, [pc, #220]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004c90:	4b35      	ldr	r3, [pc, #212]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8004c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c9c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6a19      	ldr	r1, [r3, #32]
 8004ca4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ca8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	492d      	ldr	r1, [pc, #180]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]
 8004cb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cbc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	fa93 f2a3 	rbit	r2, r3
 8004cd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cd8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004cdc:	601a      	str	r2, [r3, #0]
  return result;
 8004cde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004ce6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce8:	fab3 f383 	clz	r3, r3
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cf2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfe:	f7fe fdeb 	bl	80038d8 <HAL_GetTick>
 8004d02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d06:	e009      	b.n	8004d1c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d08:	f7fe fde6 	bl	80038d8 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e156      	b.n	8004fca <HAL_RCC_OscConfig+0x109a>
 8004d1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d20:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	fa93 f2a3 	rbit	r2, r3
 8004d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d3c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d40:	601a      	str	r2, [r3, #0]
  return result;
 8004d42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d46:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d4c:	fab3 f383 	clz	r3, r3
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d105      	bne.n	8004d6c <HAL_RCC_OscConfig+0xe3c>
 8004d60:	4b01      	ldr	r3, [pc, #4]	; (8004d68 <HAL_RCC_OscConfig+0xe38>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	e02a      	b.n	8004dbc <HAL_RCC_OscConfig+0xe8c>
 8004d66:	bf00      	nop
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d70:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d7e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	fa93 f2a3 	rbit	r2, r3
 8004d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d96:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004d9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	fa93 f2a3 	rbit	r2, r3
 8004dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004db2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	4b86      	ldr	r3, [pc, #536]	; (8004fd4 <HAL_RCC_OscConfig+0x10a4>)
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dc0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004dc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dc8:	6011      	str	r1, [r2, #0]
 8004dca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004dce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	fa92 f1a2 	rbit	r1, r2
 8004dd8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004ddc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004de0:	6011      	str	r1, [r2, #0]
  return result;
 8004de2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004de6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	fab2 f282 	clz	r2, r2
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	f042 0220 	orr.w	r2, r2, #32
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	f002 021f 	and.w	r2, r2, #31
 8004dfc:	2101      	movs	r1, #1
 8004dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f43f af7f 	beq.w	8004d08 <HAL_RCC_OscConfig+0xdd8>
 8004e0a:	e0dd      	b.n	8004fc8 <HAL_RCC_OscConfig+0x1098>
 8004e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e10:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	fa93 f2a3 	rbit	r2, r3
 8004e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e2c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e30:	601a      	str	r2, [r3, #0]
  return result;
 8004e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e36:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e3a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3c:	fab3 f383 	clz	r3, r3
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2300      	movs	r3, #0
 8004e50:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e52:	f7fe fd41 	bl	80038d8 <HAL_GetTick>
 8004e56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5a:	e009      	b.n	8004e70 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fe fd3c 	bl	80038d8 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e0ac      	b.n	8004fca <HAL_RCC_OscConfig+0x109a>
 8004e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e74:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	fa93 f2a3 	rbit	r2, r3
 8004e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e90:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e94:	601a      	str	r2, [r3, #0]
  return result;
 8004e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e9a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004e9e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea0:	fab3 f383 	clz	r3, r3
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f043 0301 	orr.w	r3, r3, #1
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <HAL_RCC_OscConfig+0xf8a>
 8004eb4:	4b47      	ldr	r3, [pc, #284]	; (8004fd4 <HAL_RCC_OscConfig+0x10a4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	e027      	b.n	8004f0a <HAL_RCC_OscConfig+0xfda>
 8004eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ebe:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ec2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ec6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ecc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	fa93 f2a3 	rbit	r2, r3
 8004ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ef2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	fa93 f2a3 	rbit	r2, r3
 8004efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f00:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	4b33      	ldr	r3, [pc, #204]	; (8004fd4 <HAL_RCC_OscConfig+0x10a4>)
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f0e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f12:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f16:	6011      	str	r1, [r2, #0]
 8004f18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f1c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	fa92 f1a2 	rbit	r1, r2
 8004f26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f2a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004f2e:	6011      	str	r1, [r2, #0]
  return result;
 8004f30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8004f34:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	fab2 f282 	clz	r2, r2
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	f042 0220 	orr.w	r2, r2, #32
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	f002 021f 	and.w	r2, r2, #31
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d182      	bne.n	8004e5c <HAL_RCC_OscConfig+0xf2c>
 8004f56:	e037      	b.n	8004fc8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e02e      	b.n	8004fca <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_OscConfig+0x10a4>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004f74:	4b17      	ldr	r3, [pc, #92]	; (8004fd4 <HAL_RCC_OscConfig+0x10a4>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f80:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8004f84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d117      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004f94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f98:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fa0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004fb0:	f003 020f 	and.w	r2, r3, #15
 8004fb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fb8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e000      	b.n	8004fca <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40021000 	.word	0x40021000

08004fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b09e      	sub	sp, #120	; 0x78
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e162      	b.n	80052b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b90      	ldr	r3, [pc, #576]	; (8005234 <HAL_RCC_ClockConfig+0x25c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d910      	bls.n	8005020 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b8d      	ldr	r3, [pc, #564]	; (8005234 <HAL_RCC_ClockConfig+0x25c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f023 0207 	bic.w	r2, r3, #7
 8005006:	498b      	ldr	r1, [pc, #556]	; (8005234 <HAL_RCC_ClockConfig+0x25c>)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b89      	ldr	r3, [pc, #548]	; (8005234 <HAL_RCC_ClockConfig+0x25c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e14a      	b.n	80052b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800502c:	4b82      	ldr	r3, [pc, #520]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	497f      	ldr	r1, [pc, #508]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 800503a:	4313      	orrs	r3, r2
 800503c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	f000 80dc 	beq.w	8005204 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b01      	cmp	r3, #1
 8005052:	d13c      	bne.n	80050ce <HAL_RCC_ClockConfig+0xf6>
 8005054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005058:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800505c:	fa93 f3a3 	rbit	r3, r3
 8005060:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005064:	fab3 f383 	clz	r3, r3
 8005068:	b2db      	uxtb	r3, r3
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	b2db      	uxtb	r3, r3
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d102      	bne.n	800507e <HAL_RCC_ClockConfig+0xa6>
 8005078:	4b6f      	ldr	r3, [pc, #444]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	e00f      	b.n	800509e <HAL_RCC_ClockConfig+0xc6>
 800507e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005082:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005086:	fa93 f3a3 	rbit	r3, r3
 800508a:	667b      	str	r3, [r7, #100]	; 0x64
 800508c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005090:	663b      	str	r3, [r7, #96]	; 0x60
 8005092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005094:	fa93 f3a3 	rbit	r3, r3
 8005098:	65fb      	str	r3, [r7, #92]	; 0x5c
 800509a:	4b67      	ldr	r3, [pc, #412]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80050a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050a6:	fa92 f2a2 	rbit	r2, r2
 80050aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80050ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050ae:	fab2 f282 	clz	r2, r2
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	f042 0220 	orr.w	r2, r2, #32
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	f002 021f 	and.w	r2, r2, #31
 80050be:	2101      	movs	r1, #1
 80050c0:	fa01 f202 	lsl.w	r2, r1, r2
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d17b      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e0f3      	b.n	80052b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d13c      	bne.n	8005150 <HAL_RCC_ClockConfig+0x178>
 80050d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050de:	fa93 f3a3 	rbit	r3, r3
 80050e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80050e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d102      	bne.n	8005100 <HAL_RCC_ClockConfig+0x128>
 80050fa:	4b4f      	ldr	r3, [pc, #316]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	e00f      	b.n	8005120 <HAL_RCC_ClockConfig+0x148>
 8005100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005104:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005108:	fa93 f3a3 	rbit	r3, r3
 800510c:	647b      	str	r3, [r7, #68]	; 0x44
 800510e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005112:	643b      	str	r3, [r7, #64]	; 0x40
 8005114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005116:	fa93 f3a3 	rbit	r3, r3
 800511a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800511c:	4b46      	ldr	r3, [pc, #280]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005124:	63ba      	str	r2, [r7, #56]	; 0x38
 8005126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005128:	fa92 f2a2 	rbit	r2, r2
 800512c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800512e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005130:	fab2 f282 	clz	r2, r2
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	f042 0220 	orr.w	r2, r2, #32
 800513a:	b2d2      	uxtb	r2, r2
 800513c:	f002 021f 	and.w	r2, r2, #31
 8005140:	2101      	movs	r1, #1
 8005142:	fa01 f202 	lsl.w	r2, r1, r2
 8005146:	4013      	ands	r3, r2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d13a      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0b2      	b.n	80052b6 <HAL_RCC_ClockConfig+0x2de>
 8005150:	2302      	movs	r3, #2
 8005152:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005156:	fa93 f3a3 	rbit	r3, r3
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	095b      	lsrs	r3, r3, #5
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f043 0301 	orr.w	r3, r3, #1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d102      	bne.n	8005178 <HAL_RCC_ClockConfig+0x1a0>
 8005172:	4b31      	ldr	r3, [pc, #196]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	e00d      	b.n	8005194 <HAL_RCC_ClockConfig+0x1bc>
 8005178:	2302      	movs	r3, #2
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	fa93 f3a3 	rbit	r3, r3
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	2302      	movs	r3, #2
 8005186:	623b      	str	r3, [r7, #32]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	fa93 f3a3 	rbit	r3, r3
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	4b29      	ldr	r3, [pc, #164]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	2202      	movs	r2, #2
 8005196:	61ba      	str	r2, [r7, #24]
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	fa92 f2a2 	rbit	r2, r2
 800519e:	617a      	str	r2, [r7, #20]
  return result;
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	fab2 f282 	clz	r2, r2
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	f042 0220 	orr.w	r2, r2, #32
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	f002 021f 	and.w	r2, r2, #31
 80051b2:	2101      	movs	r1, #1
 80051b4:	fa01 f202 	lsl.w	r2, r1, r2
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e079      	b.n	80052b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f023 0203 	bic.w	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	491a      	ldr	r1, [pc, #104]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051d4:	f7fe fb80 	bl	80038d8 <HAL_GetTick>
 80051d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051dc:	f7fe fb7c 	bl	80038d8 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e061      	b.n	80052b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	4b11      	ldr	r3, [pc, #68]	; (8005238 <HAL_RCC_ClockConfig+0x260>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 020c 	and.w	r2, r3, #12
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	429a      	cmp	r2, r3
 8005202:	d1eb      	bne.n	80051dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RCC_ClockConfig+0x25c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d214      	bcs.n	800523c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_RCC_ClockConfig+0x25c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 0207 	bic.w	r2, r3, #7
 800521a:	4906      	ldr	r1, [pc, #24]	; (8005234 <HAL_RCC_ClockConfig+0x25c>)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b04      	ldr	r3, [pc, #16]	; (8005234 <HAL_RCC_ClockConfig+0x25c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d005      	beq.n	800523c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e040      	b.n	80052b6 <HAL_RCC_ClockConfig+0x2de>
 8005234:	40022000 	.word	0x40022000
 8005238:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCC_ClockConfig+0x2e8>)
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	491a      	ldr	r1, [pc, #104]	; (80052c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005256:	4313      	orrs	r3, r2
 8005258:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	4912      	ldr	r1, [pc, #72]	; (80052c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005276:	4313      	orrs	r3, r2
 8005278:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800527a:	f000 f829 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
 800527e:	4601      	mov	r1, r0
 8005280:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005288:	22f0      	movs	r2, #240	; 0xf0
 800528a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	fa92 f2a2 	rbit	r2, r2
 8005292:	60fa      	str	r2, [r7, #12]
  return result;
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	fab2 f282 	clz	r2, r2
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	40d3      	lsrs	r3, r2
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <HAL_RCC_ClockConfig+0x2ec>)
 80052a0:	5cd3      	ldrb	r3, [r2, r3]
 80052a2:	fa21 f303 	lsr.w	r3, r1, r3
 80052a6:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <HAL_RCC_ClockConfig+0x2f0>)
 80052a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80052aa:	4b08      	ldr	r3, [pc, #32]	; (80052cc <HAL_RCC_ClockConfig+0x2f4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fc fa84 	bl	80017bc <HAL_InitTick>
  
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3778      	adds	r7, #120	; 0x78
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	0800f2fc 	.word	0x0800f2fc
 80052c8:	20000070 	.word	0x20000070
 80052cc:	20000090 	.word	0x20000090

080052d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b08b      	sub	sp, #44	; 0x2c
 80052d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
 80052de:	2300      	movs	r3, #0
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80052ea:	4b2a      	ldr	r3, [pc, #168]	; (8005394 <HAL_RCC_GetSysClockFreq+0xc4>)
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b04      	cmp	r3, #4
 80052f8:	d002      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x30>
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d003      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0x36>
 80052fe:	e03f      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005300:	4b25      	ldr	r3, [pc, #148]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005302:	623b      	str	r3, [r7, #32]
      break;
 8005304:	e03f      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800530c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005310:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	fa92 f2a2 	rbit	r2, r2
 8005318:	607a      	str	r2, [r7, #4]
  return result;
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	fab2 f282 	clz	r2, r2
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	40d3      	lsrs	r3, r2
 8005324:	4a1d      	ldr	r2, [pc, #116]	; (800539c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005326:	5cd3      	ldrb	r3, [r2, r3]
 8005328:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800532a:	4b1a      	ldr	r3, [pc, #104]	; (8005394 <HAL_RCC_GetSysClockFreq+0xc4>)
 800532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	220f      	movs	r2, #15
 8005334:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	fa92 f2a2 	rbit	r2, r2
 800533c:	60fa      	str	r2, [r7, #12]
  return result;
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	fab2 f282 	clz	r2, r2
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	40d3      	lsrs	r3, r2
 8005348:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800534a:	5cd3      	ldrb	r3, [r2, r3]
 800534c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005358:	4a0f      	ldr	r2, [pc, #60]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc8>)
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	fb02 f303 	mul.w	r3, r2, r3
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
 8005368:	e007      	b.n	800537a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800536a:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc8>)
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	fb02 f303 	mul.w	r3, r2, r3
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	623b      	str	r3, [r7, #32]
      break;
 800537e:	e002      	b.n	8005386 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005382:	623b      	str	r3, [r7, #32]
      break;
 8005384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005386:	6a3b      	ldr	r3, [r7, #32]
}
 8005388:	4618      	mov	r0, r3
 800538a:	372c      	adds	r7, #44	; 0x2c
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr
 8005394:	40021000 	.word	0x40021000
 8005398:	007a1200 	.word	0x007a1200
 800539c:	0800f314 	.word	0x0800f314
 80053a0:	0800f324 	.word	0x0800f324

080053a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000070 	.word	0x20000070

080053bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80053c2:	f7ff ffef 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 80053c6:	4601      	mov	r1, r0
 80053c8:	4b0b      	ldr	r3, [pc, #44]	; (80053f8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80053d4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	fa92 f2a2 	rbit	r2, r2
 80053dc:	603a      	str	r2, [r7, #0]
  return result;
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	fab2 f282 	clz	r2, r2
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	40d3      	lsrs	r3, r2
 80053e8:	4a04      	ldr	r2, [pc, #16]	; (80053fc <HAL_RCC_GetPCLK1Freq+0x40>)
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	40021000 	.word	0x40021000
 80053fc:	0800f30c 	.word	0x0800f30c

08005400 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005406:	f7ff ffcd 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 800540a:	4601      	mov	r1, r0
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005414:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005418:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	fa92 f2a2 	rbit	r2, r2
 8005420:	603a      	str	r2, [r7, #0]
  return result;
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	fab2 f282 	clz	r2, r2
 8005428:	b2d2      	uxtb	r2, r2
 800542a:	40d3      	lsrs	r3, r2
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <HAL_RCC_GetPCLK2Freq+0x40>)
 800542e:	5cd3      	ldrb	r3, [r2, r3]
 8005430:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005434:	4618      	mov	r0, r3
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40021000 	.word	0x40021000
 8005440:	0800f30c 	.word	0x0800f30c

08005444 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	220f      	movs	r2, #15
 8005452:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005454:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f003 0203 	and.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800546c:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_RCC_GetClockConfig+0x5c>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	08db      	lsrs	r3, r3, #3
 800547e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005486:	4b07      	ldr	r3, [pc, #28]	; (80054a4 <HAL_RCC_GetClockConfig+0x60>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0207 	and.w	r2, r3, #7
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	601a      	str	r2, [r3, #0]
}
 8005492:	bf00      	nop
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40021000 	.word	0x40021000
 80054a4:	40022000 	.word	0x40022000

080054a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b092      	sub	sp, #72	; 0x48
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80d4 	beq.w	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054cc:	4b4e      	ldr	r3, [pc, #312]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10e      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d8:	4b4b      	ldr	r3, [pc, #300]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	4a4a      	ldr	r2, [pc, #296]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e2:	61d3      	str	r3, [r2, #28]
 80054e4:	4b48      	ldr	r3, [pc, #288]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ec:	60bb      	str	r3, [r7, #8]
 80054ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f6:	4b45      	ldr	r3, [pc, #276]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d118      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005502:	4b42      	ldr	r3, [pc, #264]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a41      	ldr	r2, [pc, #260]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550e:	f7fe f9e3 	bl	80038d8 <HAL_GetTick>
 8005512:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005514:	e008      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005516:	f7fe f9df 	bl	80038d8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	2b64      	cmp	r3, #100	; 0x64
 8005522:	d901      	bls.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e1d6      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005528:	4b38      	ldr	r3, [pc, #224]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d0f0      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005534:	4b34      	ldr	r3, [pc, #208]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800553e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8084 	beq.w	800564e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005550:	429a      	cmp	r2, r3
 8005552:	d07c      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005554:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800555c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800555e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005562:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	fa93 f3a3 	rbit	r3, r3
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800556e:	fab3 f383 	clz	r3, r3
 8005572:	b2db      	uxtb	r3, r3
 8005574:	461a      	mov	r2, r3
 8005576:	4b26      	ldr	r3, [pc, #152]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	461a      	mov	r2, r3
 800557e:	2301      	movs	r3, #1
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005586:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	fa93 f3a3 	rbit	r3, r3
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005592:	fab3 f383 	clz	r3, r3
 8005596:	b2db      	uxtb	r3, r3
 8005598:	461a      	mov	r2, r3
 800559a:	4b1d      	ldr	r3, [pc, #116]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	461a      	mov	r2, r3
 80055a2:	2300      	movs	r3, #0
 80055a4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055a6:	4a18      	ldr	r2, [pc, #96]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055aa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fe f98f 	bl	80038d8 <HAL_GetTick>
 80055ba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055bc:	e00a      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fe f98b 	bl	80038d8 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e180      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80055d4:	2302      	movs	r3, #2
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	2302      	movs	r3, #2
 80055e2:	623b      	str	r3, [r7, #32]
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	fa93 f3a3 	rbit	r3, r3
 80055ea:	61fb      	str	r3, [r7, #28]
  return result;
 80055ec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ee:	fab3 f383 	clz	r3, r3
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d108      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005602:	4b01      	ldr	r3, [pc, #4]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	e00d      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005608:	40021000 	.word	0x40021000
 800560c:	40007000 	.word	0x40007000
 8005610:	10908100 	.word	0x10908100
 8005614:	2302      	movs	r3, #2
 8005616:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	fa93 f3a3 	rbit	r3, r3
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	4b9a      	ldr	r3, [pc, #616]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2202      	movs	r2, #2
 8005626:	613a      	str	r2, [r7, #16]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	fa92 f2a2 	rbit	r2, r2
 800562e:	60fa      	str	r2, [r7, #12]
  return result;
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	fab2 f282 	clz	r2, r2
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800563c:	b2d2      	uxtb	r2, r2
 800563e:	f002 021f 	and.w	r2, r2, #31
 8005642:	2101      	movs	r1, #1
 8005644:	fa01 f202 	lsl.w	r2, r1, r2
 8005648:	4013      	ands	r3, r2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0b7      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800564e:	4b8f      	ldr	r3, [pc, #572]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	498c      	ldr	r1, [pc, #560]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800565c:	4313      	orrs	r3, r2
 800565e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005660:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005664:	2b01      	cmp	r3, #1
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005668:	4b88      	ldr	r3, [pc, #544]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	4a87      	ldr	r2, [pc, #540]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800566e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005672:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005680:	4b82      	ldr	r3, [pc, #520]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	f023 0203 	bic.w	r2, r3, #3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	497f      	ldr	r1, [pc, #508]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800568e:	4313      	orrs	r3, r2
 8005690:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d008      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800569e:	4b7b      	ldr	r3, [pc, #492]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4978      	ldr	r1, [pc, #480]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056bc:	4b73      	ldr	r3, [pc, #460]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	4970      	ldr	r1, [pc, #448]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0320 	and.w	r3, r3, #32
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056da:	4b6c      	ldr	r3, [pc, #432]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056de:	f023 0210 	bic.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	4969      	ldr	r1, [pc, #420]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80056f8:	4b64      	ldr	r3, [pc, #400]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	4961      	ldr	r1, [pc, #388]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005712:	2b00      	cmp	r3, #0
 8005714:	d008      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005716:	4b5d      	ldr	r3, [pc, #372]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	f023 0220 	bic.w	r2, r3, #32
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	495a      	ldr	r1, [pc, #360]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005724:	4313      	orrs	r3, r2
 8005726:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d008      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005734:	4b55      	ldr	r3, [pc, #340]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	4952      	ldr	r1, [pc, #328]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d008      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005752:	4b4e      	ldr	r3, [pc, #312]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	494b      	ldr	r1, [pc, #300]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005760:	4313      	orrs	r3, r2
 8005762:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005770:	4b46      	ldr	r3, [pc, #280]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	4943      	ldr	r1, [pc, #268]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800578a:	2b00      	cmp	r3, #0
 800578c:	d008      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800578e:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579a:	493c      	ldr	r1, [pc, #240]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800579c:	4313      	orrs	r3, r2
 800579e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057ac:	4b37      	ldr	r3, [pc, #220]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	4934      	ldr	r1, [pc, #208]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80057ca:	4b30      	ldr	r3, [pc, #192]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	492d      	ldr	r1, [pc, #180]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80057e8:	4b28      	ldr	r3, [pc, #160]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f4:	4925      	ldr	r1, [pc, #148]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005806:	4b21      	ldr	r3, [pc, #132]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	491e      	ldr	r1, [pc, #120]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005814:	4313      	orrs	r3, r2
 8005816:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005824:	4b19      	ldr	r3, [pc, #100]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005828:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005830:	4916      	ldr	r1, [pc, #88]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005832:	4313      	orrs	r3, r2
 8005834:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d008      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005846:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	490f      	ldr	r1, [pc, #60]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005850:	4313      	orrs	r3, r2
 8005852:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586c:	4907      	ldr	r1, [pc, #28]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800586e:	4313      	orrs	r3, r2
 8005870:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00c      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800587e:	4b03      	ldr	r3, [pc, #12]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	e002      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000
 8005890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005892:	4913      	ldr	r1, [pc, #76]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005894:	4313      	orrs	r3, r2
 8005896:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80058a4:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058b0:	490b      	ldr	r1, [pc, #44]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ce:	4904      	ldr	r1, [pc, #16]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3748      	adds	r7, #72	; 0x48
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000

080058e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e049      	b.n	800598a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fc fe82 	bl	8002614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f001 f916 	bl	8006b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e04f      	b.n	8005a4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0201 	orr.w	r2, r2, #1
 80059c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a23      	ldr	r2, [pc, #140]	; (8005a58 <HAL_TIM_Base_Start_IT+0xc4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01d      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d018      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1f      	ldr	r2, [pc, #124]	; (8005a5c <HAL_TIM_Base_Start_IT+0xc8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <HAL_TIM_Base_Start_IT+0xcc>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00e      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_TIM_Base_Start_IT+0xd0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d009      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1b      	ldr	r2, [pc, #108]	; (8005a68 <HAL_TIM_Base_Start_IT+0xd4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d004      	beq.n	8005a0a <HAL_TIM_Base_Start_IT+0x76>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a19      	ldr	r2, [pc, #100]	; (8005a6c <HAL_TIM_Base_Start_IT+0xd8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d115      	bne.n	8005a36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a12:	4013      	ands	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2b06      	cmp	r3, #6
 8005a1a:	d015      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0xb4>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a22:	d011      	beq.n	8005a48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a34:	e008      	b.n	8005a48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0201 	orr.w	r2, r2, #1
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	e000      	b.n	8005a4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40013400 	.word	0x40013400
 8005a68:	40014000 	.word	0x40014000
 8005a6c:	40015000 	.word	0x40015000
 8005a70:	00010007 	.word	0x00010007

08005a74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e049      	b.n	8005b1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f841 	bl	8005b22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f001 f84e 	bl	8006b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d109      	bne.n	8005b5c <HAL_TIM_PWM_Start+0x24>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e03c      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	d109      	bne.n	8005b76 <HAL_TIM_PWM_Start+0x3e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e02f      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d109      	bne.n	8005b90 <HAL_TIM_PWM_Start+0x58>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	bf14      	ite	ne
 8005b88:	2301      	movne	r3, #1
 8005b8a:	2300      	moveq	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	e022      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d109      	bne.n	8005baa <HAL_TIM_PWM_Start+0x72>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	bf14      	ite	ne
 8005ba2:	2301      	movne	r3, #1
 8005ba4:	2300      	moveq	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	e015      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d109      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x8c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e008      	b.n	8005bd6 <HAL_TIM_PWM_Start+0x9e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	bf14      	ite	ne
 8005bd0:	2301      	movne	r3, #1
 8005bd2:	2300      	moveq	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e0a1      	b.n	8005d22 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <HAL_TIM_PWM_Start+0xb6>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bec:	e023      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d104      	bne.n	8005bfe <HAL_TIM_PWM_Start+0xc6>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bfc:	e01b      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_PWM_Start+0xd6>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2202      	movs	r2, #2
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c0c:	e013      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_PWM_Start+0xe6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c1c:	e00b      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b10      	cmp	r3, #16
 8005c22:	d104      	bne.n	8005c2e <HAL_TIM_PWM_Start+0xf6>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c2c:	e003      	b.n	8005c36 <HAL_TIM_PWM_Start+0xfe>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2202      	movs	r2, #2
 8005c32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	6839      	ldr	r1, [r7, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 fcea 	bl	8007618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a38      	ldr	r2, [pc, #224]	; (8005d2c <HAL_TIM_PWM_Start+0x1f4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d018      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a37      	ldr	r2, [pc, #220]	; (8005d30 <HAL_TIM_PWM_Start+0x1f8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d013      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a35      	ldr	r2, [pc, #212]	; (8005d34 <HAL_TIM_PWM_Start+0x1fc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00e      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a34      	ldr	r2, [pc, #208]	; (8005d38 <HAL_TIM_PWM_Start+0x200>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d009      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a32      	ldr	r2, [pc, #200]	; (8005d3c <HAL_TIM_PWM_Start+0x204>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <HAL_TIM_PWM_Start+0x148>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a31      	ldr	r2, [pc, #196]	; (8005d40 <HAL_TIM_PWM_Start+0x208>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_PWM_Start+0x14c>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <HAL_TIM_PWM_Start+0x14e>
 8005c84:	2300      	movs	r3, #0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d007      	beq.n	8005c9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a23      	ldr	r2, [pc, #140]	; (8005d2c <HAL_TIM_PWM_Start+0x1f4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cac:	d018      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a24      	ldr	r2, [pc, #144]	; (8005d44 <HAL_TIM_PWM_Start+0x20c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <HAL_TIM_PWM_Start+0x210>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a1a      	ldr	r2, [pc, #104]	; (8005d30 <HAL_TIM_PWM_Start+0x1f8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <HAL_TIM_PWM_Start+0x1fc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_PWM_Start+0x1a8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a19      	ldr	r2, [pc, #100]	; (8005d40 <HAL_TIM_PWM_Start+0x208>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d115      	bne.n	8005d0c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	4b19      	ldr	r3, [pc, #100]	; (8005d4c <HAL_TIM_PWM_Start+0x214>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d015      	beq.n	8005d1e <HAL_TIM_PWM_Start+0x1e6>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d011      	beq.n	8005d1e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0201 	orr.w	r2, r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0a:	e008      	b.n	8005d1e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	e000      	b.n	8005d20 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800
 8005d40:	40015000 	.word	0x40015000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	00010007 	.word	0x00010007

08005d50 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f001 fc58 	bl	8007618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a40      	ldr	r2, [pc, #256]	; (8005e70 <HAL_TIM_PWM_Stop+0x120>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d018      	beq.n	8005da4 <HAL_TIM_PWM_Stop+0x54>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a3f      	ldr	r2, [pc, #252]	; (8005e74 <HAL_TIM_PWM_Stop+0x124>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <HAL_TIM_PWM_Stop+0x54>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3d      	ldr	r2, [pc, #244]	; (8005e78 <HAL_TIM_PWM_Stop+0x128>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00e      	beq.n	8005da4 <HAL_TIM_PWM_Stop+0x54>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a3c      	ldr	r2, [pc, #240]	; (8005e7c <HAL_TIM_PWM_Stop+0x12c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d009      	beq.n	8005da4 <HAL_TIM_PWM_Stop+0x54>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a3a      	ldr	r2, [pc, #232]	; (8005e80 <HAL_TIM_PWM_Stop+0x130>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_TIM_PWM_Stop+0x54>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a39      	ldr	r2, [pc, #228]	; (8005e84 <HAL_TIM_PWM_Stop+0x134>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d101      	bne.n	8005da8 <HAL_TIM_PWM_Stop+0x58>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <HAL_TIM_PWM_Stop+0x5a>
 8005da8:	2300      	movs	r3, #0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d017      	beq.n	8005dde <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a1a      	ldr	r2, [r3, #32]
 8005db4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10f      	bne.n	8005dde <HAL_TIM_PWM_Stop+0x8e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	f240 4344 	movw	r3, #1092	; 0x444
 8005dc8:	4013      	ands	r3, r2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d107      	bne.n	8005dde <HAL_TIM_PWM_Stop+0x8e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	6a1a      	ldr	r2, [r3, #32]
 8005de4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10f      	bne.n	8005e0e <HAL_TIM_PWM_Stop+0xbe>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6a1a      	ldr	r2, [r3, #32]
 8005df4:	f240 4344 	movw	r3, #1092	; 0x444
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d107      	bne.n	8005e0e <HAL_TIM_PWM_Stop+0xbe>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_PWM_Stop+0xce>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e1c:	e023      	b.n	8005e66 <HAL_TIM_PWM_Stop+0x116>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_PWM_Stop+0xde>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e2c:	e01b      	b.n	8005e66 <HAL_TIM_PWM_Stop+0x116>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_PWM_Stop+0xee>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e3c:	e013      	b.n	8005e66 <HAL_TIM_PWM_Stop+0x116>
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d104      	bne.n	8005e4e <HAL_TIM_PWM_Stop+0xfe>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e4c:	e00b      	b.n	8005e66 <HAL_TIM_PWM_Stop+0x116>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d104      	bne.n	8005e5e <HAL_TIM_PWM_Stop+0x10e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5c:	e003      	b.n	8005e66 <HAL_TIM_PWM_Stop+0x116>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	40012c00 	.word	0x40012c00
 8005e74:	40013400 	.word	0x40013400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800
 8005e84:	40015000 	.word	0x40015000

08005e88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e049      	b.n	8005f2e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d106      	bne.n	8005eb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f841 	bl	8005f36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	f000 fe44 	bl	8006b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_IC_Start_IT+0x1e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	e023      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x66>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_IC_Start_IT+0x2e>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	e01b      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x66>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_IC_Start_IT+0x3e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	e013      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x66>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	d104      	bne.n	8005f9a <HAL_TIM_IC_Start_IT+0x4e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e00b      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x66>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b10      	cmp	r3, #16
 8005f9e:	d104      	bne.n	8005faa <HAL_TIM_IC_Start_IT+0x5e>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	e003      	b.n	8005fb2 <HAL_TIM_IC_Start_IT+0x66>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d104      	bne.n	8005fc4 <HAL_TIM_IC_Start_IT+0x78>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e013      	b.n	8005fec <HAL_TIM_IC_Start_IT+0xa0>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	d104      	bne.n	8005fd4 <HAL_TIM_IC_Start_IT+0x88>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	e00b      	b.n	8005fec <HAL_TIM_IC_Start_IT+0xa0>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d104      	bne.n	8005fe4 <HAL_TIM_IC_Start_IT+0x98>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	e003      	b.n	8005fec <HAL_TIM_IC_Start_IT+0xa0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fee:	7bbb      	ldrb	r3, [r7, #14]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d102      	bne.n	8005ffa <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ff4:	7b7b      	ldrb	r3, [r7, #13]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d001      	beq.n	8005ffe <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e0dd      	b.n	80061ba <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <HAL_TIM_IC_Start_IT+0xc2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800600c:	e023      	b.n	8006056 <HAL_TIM_IC_Start_IT+0x10a>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b04      	cmp	r3, #4
 8006012:	d104      	bne.n	800601e <HAL_TIM_IC_Start_IT+0xd2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800601c:	e01b      	b.n	8006056 <HAL_TIM_IC_Start_IT+0x10a>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b08      	cmp	r3, #8
 8006022:	d104      	bne.n	800602e <HAL_TIM_IC_Start_IT+0xe2>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800602c:	e013      	b.n	8006056 <HAL_TIM_IC_Start_IT+0x10a>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b0c      	cmp	r3, #12
 8006032:	d104      	bne.n	800603e <HAL_TIM_IC_Start_IT+0xf2>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2202      	movs	r2, #2
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800603c:	e00b      	b.n	8006056 <HAL_TIM_IC_Start_IT+0x10a>
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	2b10      	cmp	r3, #16
 8006042:	d104      	bne.n	800604e <HAL_TIM_IC_Start_IT+0x102>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800604c:	e003      	b.n	8006056 <HAL_TIM_IC_Start_IT+0x10a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <HAL_TIM_IC_Start_IT+0x11a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006064:	e013      	b.n	800608e <HAL_TIM_IC_Start_IT+0x142>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b04      	cmp	r3, #4
 800606a:	d104      	bne.n	8006076 <HAL_TIM_IC_Start_IT+0x12a>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006074:	e00b      	b.n	800608e <HAL_TIM_IC_Start_IT+0x142>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d104      	bne.n	8006086 <HAL_TIM_IC_Start_IT+0x13a>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006084:	e003      	b.n	800608e <HAL_TIM_IC_Start_IT+0x142>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b0c      	cmp	r3, #12
 8006092:	d841      	bhi.n	8006118 <HAL_TIM_IC_Start_IT+0x1cc>
 8006094:	a201      	add	r2, pc, #4	; (adr r2, 800609c <HAL_TIM_IC_Start_IT+0x150>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060d1 	.word	0x080060d1
 80060a0:	08006119 	.word	0x08006119
 80060a4:	08006119 	.word	0x08006119
 80060a8:	08006119 	.word	0x08006119
 80060ac:	080060e3 	.word	0x080060e3
 80060b0:	08006119 	.word	0x08006119
 80060b4:	08006119 	.word	0x08006119
 80060b8:	08006119 	.word	0x08006119
 80060bc:	080060f5 	.word	0x080060f5
 80060c0:	08006119 	.word	0x08006119
 80060c4:	08006119 	.word	0x08006119
 80060c8:	08006119 	.word	0x08006119
 80060cc:	08006107 	.word	0x08006107
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f042 0202 	orr.w	r2, r2, #2
 80060de:	60da      	str	r2, [r3, #12]
      break;
 80060e0:	e01d      	b.n	800611e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0204 	orr.w	r2, r2, #4
 80060f0:	60da      	str	r2, [r3, #12]
      break;
 80060f2:	e014      	b.n	800611e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0208 	orr.w	r2, r2, #8
 8006102:	60da      	str	r2, [r3, #12]
      break;
 8006104:	e00b      	b.n	800611e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0210 	orr.w	r2, r2, #16
 8006114:	60da      	str	r2, [r3, #12]
      break;
 8006116:	e002      	b.n	800611e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	73fb      	strb	r3, [r7, #15]
      break;
 800611c:	bf00      	nop
  }

  if (status == HAL_OK)
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d149      	bne.n	80061b8 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2201      	movs	r2, #1
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	4618      	mov	r0, r3
 800612e:	f001 fa73 	bl	8007618 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a23      	ldr	r2, [pc, #140]	; (80061c4 <HAL_TIM_IC_Start_IT+0x278>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d01d      	beq.n	8006178 <HAL_TIM_IC_Start_IT+0x22c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006144:	d018      	beq.n	8006178 <HAL_TIM_IC_Start_IT+0x22c>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1f      	ldr	r2, [pc, #124]	; (80061c8 <HAL_TIM_IC_Start_IT+0x27c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d013      	beq.n	8006178 <HAL_TIM_IC_Start_IT+0x22c>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1d      	ldr	r2, [pc, #116]	; (80061cc <HAL_TIM_IC_Start_IT+0x280>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00e      	beq.n	8006178 <HAL_TIM_IC_Start_IT+0x22c>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1c      	ldr	r2, [pc, #112]	; (80061d0 <HAL_TIM_IC_Start_IT+0x284>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d009      	beq.n	8006178 <HAL_TIM_IC_Start_IT+0x22c>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <HAL_TIM_IC_Start_IT+0x288>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_TIM_IC_Start_IT+0x22c>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a19      	ldr	r2, [pc, #100]	; (80061d8 <HAL_TIM_IC_Start_IT+0x28c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d115      	bne.n	80061a4 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689a      	ldr	r2, [r3, #8]
 800617e:	4b17      	ldr	r3, [pc, #92]	; (80061dc <HAL_TIM_IC_Start_IT+0x290>)
 8006180:	4013      	ands	r3, r2
 8006182:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b06      	cmp	r3, #6
 8006188:	d015      	beq.n	80061b6 <HAL_TIM_IC_Start_IT+0x26a>
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006190:	d011      	beq.n	80061b6 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f042 0201 	orr.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061a2:	e008      	b.n	80061b6 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	e000      	b.n	80061b8 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40013400 	.word	0x40013400
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40015000 	.word	0x40015000
 80061dc:	00010007 	.word	0x00010007

080061e0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b0c      	cmp	r3, #12
 80061f2:	d841      	bhi.n	8006278 <HAL_TIM_IC_Stop_IT+0x98>
 80061f4:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <HAL_TIM_IC_Stop_IT+0x1c>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	08006231 	.word	0x08006231
 8006200:	08006279 	.word	0x08006279
 8006204:	08006279 	.word	0x08006279
 8006208:	08006279 	.word	0x08006279
 800620c:	08006243 	.word	0x08006243
 8006210:	08006279 	.word	0x08006279
 8006214:	08006279 	.word	0x08006279
 8006218:	08006279 	.word	0x08006279
 800621c:	08006255 	.word	0x08006255
 8006220:	08006279 	.word	0x08006279
 8006224:	08006279 	.word	0x08006279
 8006228:	08006279 	.word	0x08006279
 800622c:	08006267 	.word	0x08006267
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0202 	bic.w	r2, r2, #2
 800623e:	60da      	str	r2, [r3, #12]
      break;
 8006240:	e01d      	b.n	800627e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68da      	ldr	r2, [r3, #12]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0204 	bic.w	r2, r2, #4
 8006250:	60da      	str	r2, [r3, #12]
      break;
 8006252:	e014      	b.n	800627e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0208 	bic.w	r2, r2, #8
 8006262:	60da      	str	r2, [r3, #12]
      break;
 8006264:	e00b      	b.n	800627e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0210 	bic.w	r2, r2, #16
 8006274:	60da      	str	r2, [r3, #12]
      break;
 8006276:	e002      	b.n	800627e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
      break;
 800627c:	bf00      	nop
  }

  if (status == HAL_OK)
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d166      	bne.n	8006352 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2200      	movs	r2, #0
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f9c3 	bl	8007618 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6a1a      	ldr	r2, [r3, #32]
 8006298:	f241 1311 	movw	r3, #4369	; 0x1111
 800629c:	4013      	ands	r3, r2
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10f      	bne.n	80062c2 <HAL_TIM_IC_Stop_IT+0xe2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a1a      	ldr	r2, [r3, #32]
 80062a8:	f240 4344 	movw	r3, #1092	; 0x444
 80062ac:	4013      	ands	r3, r2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d107      	bne.n	80062c2 <HAL_TIM_IC_Stop_IT+0xe2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0201 	bic.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d104      	bne.n	80062d2 <HAL_TIM_IC_Stop_IT+0xf2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062d0:	e023      	b.n	800631a <HAL_TIM_IC_Stop_IT+0x13a>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d104      	bne.n	80062e2 <HAL_TIM_IC_Stop_IT+0x102>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062e0:	e01b      	b.n	800631a <HAL_TIM_IC_Stop_IT+0x13a>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d104      	bne.n	80062f2 <HAL_TIM_IC_Stop_IT+0x112>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062f0:	e013      	b.n	800631a <HAL_TIM_IC_Stop_IT+0x13a>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	2b0c      	cmp	r3, #12
 80062f6:	d104      	bne.n	8006302 <HAL_TIM_IC_Stop_IT+0x122>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006300:	e00b      	b.n	800631a <HAL_TIM_IC_Stop_IT+0x13a>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b10      	cmp	r3, #16
 8006306:	d104      	bne.n	8006312 <HAL_TIM_IC_Stop_IT+0x132>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006310:	e003      	b.n	800631a <HAL_TIM_IC_Stop_IT+0x13a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d104      	bne.n	800632a <HAL_TIM_IC_Stop_IT+0x14a>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006328:	e013      	b.n	8006352 <HAL_TIM_IC_Stop_IT+0x172>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b04      	cmp	r3, #4
 800632e:	d104      	bne.n	800633a <HAL_TIM_IC_Stop_IT+0x15a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	e00b      	b.n	8006352 <HAL_TIM_IC_Stop_IT+0x172>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d104      	bne.n	800634a <HAL_TIM_IC_Stop_IT+0x16a>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006348:	e003      	b.n	8006352 <HAL_TIM_IC_Stop_IT+0x172>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8006352:	7bfb      	ldrb	r3, [r7, #15]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b02      	cmp	r3, #2
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0202 	mvn.w	r2, #2
 8006388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fd f8e4 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fbb6 	bl	8006b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fbbd 	bl	8006b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0204 	mvn.w	r2, #4
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fd f8ba 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fb8c 	bl	8006b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fb93 	bl	8006b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b08      	cmp	r3, #8
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b08      	cmp	r3, #8
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0208 	mvn.w	r2, #8
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fd f890 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fb62 	bl	8006b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fb69 	bl	8006b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b10      	cmp	r3, #16
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0210 	mvn.w	r2, #16
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2208      	movs	r2, #8
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fd f866 	bl	800356c <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb38 	bl	8006b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fb3f 	bl	8006b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0201 	mvn.w	r2, #1
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb f92e 	bl	800173c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b80      	cmp	r3, #128	; 0x80
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f001 f9c8 	bl	800789c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	d10e      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d107      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f001 f9bb 	bl	80078b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d10e      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 faed 	bl	8006b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b20      	cmp	r3, #32
 8006572:	d10e      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d107      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f06f 0220 	mvn.w	r2, #32
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 f97b 	bl	8007888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b086      	sub	sp, #24
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e088      	b.n	80066ca <HAL_TIM_IC_ConfigChannel+0x130>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d11b      	bne.n	80065fe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80065d6:	f000 fe61 	bl	800729c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	699a      	ldr	r2, [r3, #24]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 020c 	bic.w	r2, r2, #12
 80065e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6999      	ldr	r1, [r3, #24]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	619a      	str	r2, [r3, #24]
 80065fc:	e060      	b.n	80066c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d11c      	bne.n	800663e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006614:	f000 fedf 	bl	80073d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006626:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6999      	ldr	r1, [r3, #24]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	021a      	lsls	r2, r3, #8
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	619a      	str	r2, [r3, #24]
 800663c:	e040      	b.n	80066c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b08      	cmp	r3, #8
 8006642:	d11b      	bne.n	800667c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006654:	f000 ff2c 	bl	80074b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 020c 	bic.w	r2, r2, #12
 8006666:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69d9      	ldr	r1, [r3, #28]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	61da      	str	r2, [r3, #28]
 800667a:	e021      	b.n	80066c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b0c      	cmp	r3, #12
 8006680:	d11c      	bne.n	80066bc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006692:	f000 ff49 	bl	8007528 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69d9      	ldr	r1, [r3, #28]
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	021a      	lsls	r2, r3, #8
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	61da      	str	r2, [r3, #28]
 80066ba:	e001      	b.n	80066c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
	...

080066d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e0ff      	b.n	80068f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b14      	cmp	r3, #20
 80066fe:	f200 80f0 	bhi.w	80068e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800675d 	.word	0x0800675d
 800670c:	080068e3 	.word	0x080068e3
 8006710:	080068e3 	.word	0x080068e3
 8006714:	080068e3 	.word	0x080068e3
 8006718:	0800679d 	.word	0x0800679d
 800671c:	080068e3 	.word	0x080068e3
 8006720:	080068e3 	.word	0x080068e3
 8006724:	080068e3 	.word	0x080068e3
 8006728:	080067df 	.word	0x080067df
 800672c:	080068e3 	.word	0x080068e3
 8006730:	080068e3 	.word	0x080068e3
 8006734:	080068e3 	.word	0x080068e3
 8006738:	0800681f 	.word	0x0800681f
 800673c:	080068e3 	.word	0x080068e3
 8006740:	080068e3 	.word	0x080068e3
 8006744:	080068e3 	.word	0x080068e3
 8006748:	08006861 	.word	0x08006861
 800674c:	080068e3 	.word	0x080068e3
 8006750:	080068e3 	.word	0x080068e3
 8006754:	080068e3 	.word	0x080068e3
 8006758:	080068a1 	.word	0x080068a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fa94 	bl	8006c90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0208 	orr.w	r2, r2, #8
 8006776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0204 	bic.w	r2, r2, #4
 8006786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6999      	ldr	r1, [r3, #24]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	619a      	str	r2, [r3, #24]
      break;
 800679a:	e0a5      	b.n	80068e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fb0e 	bl	8006dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6999      	ldr	r1, [r3, #24]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	021a      	lsls	r2, r3, #8
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	619a      	str	r2, [r3, #24]
      break;
 80067dc:	e084      	b.n	80068e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fb81 	bl	8006eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f042 0208 	orr.w	r2, r2, #8
 80067f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0204 	bic.w	r2, r2, #4
 8006808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69d9      	ldr	r1, [r3, #28]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691a      	ldr	r2, [r3, #16]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	61da      	str	r2, [r3, #28]
      break;
 800681c:	e064      	b.n	80068e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68b9      	ldr	r1, [r7, #8]
 8006824:	4618      	mov	r0, r3
 8006826:	f000 fbf3 	bl	8007010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69d9      	ldr	r1, [r3, #28]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	691b      	ldr	r3, [r3, #16]
 8006854:	021a      	lsls	r2, r3, #8
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	61da      	str	r2, [r3, #28]
      break;
 800685e:	e043      	b.n	80068e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 fc42 	bl	80070f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0208 	orr.w	r2, r2, #8
 800687a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0204 	bic.w	r2, r2, #4
 800688a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	691a      	ldr	r2, [r3, #16]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800689e:	e023      	b.n	80068e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68b9      	ldr	r1, [r7, #8]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f000 fc8c 	bl	80071c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	021a      	lsls	r2, r3, #8
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068e0:	e002      	b.n	80068e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	75fb      	strb	r3, [r7, #23]
      break;
 80068e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop

080068fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006910:	2b01      	cmp	r3, #1
 8006912:	d101      	bne.n	8006918 <HAL_TIM_ConfigClockSource+0x1c>
 8006914:	2302      	movs	r3, #2
 8006916:	e0b6      	b.n	8006a86 <HAL_TIM_ConfigClockSource+0x18a>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800693a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006954:	d03e      	beq.n	80069d4 <HAL_TIM_ConfigClockSource+0xd8>
 8006956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800695a:	f200 8087 	bhi.w	8006a6c <HAL_TIM_ConfigClockSource+0x170>
 800695e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006962:	f000 8086 	beq.w	8006a72 <HAL_TIM_ConfigClockSource+0x176>
 8006966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696a:	d87f      	bhi.n	8006a6c <HAL_TIM_ConfigClockSource+0x170>
 800696c:	2b70      	cmp	r3, #112	; 0x70
 800696e:	d01a      	beq.n	80069a6 <HAL_TIM_ConfigClockSource+0xaa>
 8006970:	2b70      	cmp	r3, #112	; 0x70
 8006972:	d87b      	bhi.n	8006a6c <HAL_TIM_ConfigClockSource+0x170>
 8006974:	2b60      	cmp	r3, #96	; 0x60
 8006976:	d050      	beq.n	8006a1a <HAL_TIM_ConfigClockSource+0x11e>
 8006978:	2b60      	cmp	r3, #96	; 0x60
 800697a:	d877      	bhi.n	8006a6c <HAL_TIM_ConfigClockSource+0x170>
 800697c:	2b50      	cmp	r3, #80	; 0x50
 800697e:	d03c      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0xfe>
 8006980:	2b50      	cmp	r3, #80	; 0x50
 8006982:	d873      	bhi.n	8006a6c <HAL_TIM_ConfigClockSource+0x170>
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d058      	beq.n	8006a3a <HAL_TIM_ConfigClockSource+0x13e>
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	d86f      	bhi.n	8006a6c <HAL_TIM_ConfigClockSource+0x170>
 800698c:	2b30      	cmp	r3, #48	; 0x30
 800698e:	d064      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x15e>
 8006990:	2b30      	cmp	r3, #48	; 0x30
 8006992:	d86b      	bhi.n	8006a6c <HAL_TIM_ConfigClockSource+0x170>
 8006994:	2b20      	cmp	r3, #32
 8006996:	d060      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x15e>
 8006998:	2b20      	cmp	r3, #32
 800699a:	d867      	bhi.n	8006a6c <HAL_TIM_ConfigClockSource+0x170>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d05c      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x15e>
 80069a0:	2b10      	cmp	r3, #16
 80069a2:	d05a      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0x15e>
 80069a4:	e062      	b.n	8006a6c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069b6:	f000 fe0f 	bl	80075d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	609a      	str	r2, [r3, #8]
      break;
 80069d2:	e04f      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069e4:	f000 fdf8 	bl	80075d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069f6:	609a      	str	r2, [r3, #8]
      break;
 80069f8:	e03c      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a06:	461a      	mov	r2, r3
 8006a08:	f000 fcb6 	bl	8007378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2150      	movs	r1, #80	; 0x50
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fdc5 	bl	80075a2 <TIM_ITRx_SetConfig>
      break;
 8006a18:	e02c      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a26:	461a      	mov	r2, r3
 8006a28:	f000 fd12 	bl	8007450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2160      	movs	r1, #96	; 0x60
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fdb5 	bl	80075a2 <TIM_ITRx_SetConfig>
      break;
 8006a38:	e01c      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a46:	461a      	mov	r2, r3
 8006a48:	f000 fc96 	bl	8007378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2140      	movs	r1, #64	; 0x40
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fda5 	bl	80075a2 <TIM_ITRx_SetConfig>
      break;
 8006a58:	e00c      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f000 fd9c 	bl	80075a2 <TIM_ITRx_SetConfig>
      break;
 8006a6a:	e003      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a70:	e000      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b0c      	cmp	r3, #12
 8006aa2:	d831      	bhi.n	8006b08 <HAL_TIM_ReadCapturedValue+0x78>
 8006aa4:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <HAL_TIM_ReadCapturedValue+0x1c>)
 8006aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aaa:	bf00      	nop
 8006aac:	08006ae1 	.word	0x08006ae1
 8006ab0:	08006b09 	.word	0x08006b09
 8006ab4:	08006b09 	.word	0x08006b09
 8006ab8:	08006b09 	.word	0x08006b09
 8006abc:	08006aeb 	.word	0x08006aeb
 8006ac0:	08006b09 	.word	0x08006b09
 8006ac4:	08006b09 	.word	0x08006b09
 8006ac8:	08006b09 	.word	0x08006b09
 8006acc:	08006af5 	.word	0x08006af5
 8006ad0:	08006b09 	.word	0x08006b09
 8006ad4:	08006b09 	.word	0x08006b09
 8006ad8:	08006b09 	.word	0x08006b09
 8006adc:	08006aff 	.word	0x08006aff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae6:	60fb      	str	r3, [r7, #12]

      break;
 8006ae8:	e00f      	b.n	8006b0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af0:	60fb      	str	r3, [r7, #12]

      break;
 8006af2:	e00a      	b.n	8006b0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afa:	60fb      	str	r3, [r7, #12]

      break;
 8006afc:	e005      	b.n	8006b0a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b04:	60fb      	str	r3, [r7, #12]

      break;
 8006b06:	e000      	b.n	8006b0a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006b08:	bf00      	nop
  }

  return tmpreg;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a42      	ldr	r2, [pc, #264]	; (8006c70 <TIM_Base_SetConfig+0x11c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b72:	d00f      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a3f      	ldr	r2, [pc, #252]	; (8006c74 <TIM_Base_SetConfig+0x120>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00b      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a3e      	ldr	r2, [pc, #248]	; (8006c78 <TIM_Base_SetConfig+0x124>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d007      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3d      	ldr	r2, [pc, #244]	; (8006c7c <TIM_Base_SetConfig+0x128>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d003      	beq.n	8006b94 <TIM_Base_SetConfig+0x40>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	4a3c      	ldr	r2, [pc, #240]	; (8006c80 <TIM_Base_SetConfig+0x12c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d108      	bne.n	8006ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a31      	ldr	r2, [pc, #196]	; (8006c70 <TIM_Base_SetConfig+0x11c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01f      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb4:	d01b      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a2e      	ldr	r2, [pc, #184]	; (8006c74 <TIM_Base_SetConfig+0x120>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d017      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2d      	ldr	r2, [pc, #180]	; (8006c78 <TIM_Base_SetConfig+0x124>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2c      	ldr	r2, [pc, #176]	; (8006c7c <TIM_Base_SetConfig+0x128>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d00f      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2c      	ldr	r2, [pc, #176]	; (8006c84 <TIM_Base_SetConfig+0x130>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00b      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2b      	ldr	r2, [pc, #172]	; (8006c88 <TIM_Base_SetConfig+0x134>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d007      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2a      	ldr	r2, [pc, #168]	; (8006c8c <TIM_Base_SetConfig+0x138>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_Base_SetConfig+0x9a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a25      	ldr	r2, [pc, #148]	; (8006c80 <TIM_Base_SetConfig+0x12c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d108      	bne.n	8006c00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a12      	ldr	r2, [pc, #72]	; (8006c70 <TIM_Base_SetConfig+0x11c>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d013      	beq.n	8006c54 <TIM_Base_SetConfig+0x100>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a13      	ldr	r2, [pc, #76]	; (8006c7c <TIM_Base_SetConfig+0x128>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00f      	beq.n	8006c54 <TIM_Base_SetConfig+0x100>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a13      	ldr	r2, [pc, #76]	; (8006c84 <TIM_Base_SetConfig+0x130>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00b      	beq.n	8006c54 <TIM_Base_SetConfig+0x100>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a12      	ldr	r2, [pc, #72]	; (8006c88 <TIM_Base_SetConfig+0x134>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d007      	beq.n	8006c54 <TIM_Base_SetConfig+0x100>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a11      	ldr	r2, [pc, #68]	; (8006c8c <TIM_Base_SetConfig+0x138>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_Base_SetConfig+0x100>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0c      	ldr	r2, [pc, #48]	; (8006c80 <TIM_Base_SetConfig+0x12c>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d103      	bne.n	8006c5c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	615a      	str	r2, [r3, #20]
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40015000 	.word	0x40015000
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800

08006c90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b087      	sub	sp, #28
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f023 0302 	bic.w	r3, r3, #2
 8006cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a30      	ldr	r2, [pc, #192]	; (8006dac <TIM_OC1_SetConfig+0x11c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d013      	beq.n	8006d18 <TIM_OC1_SetConfig+0x88>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a2f      	ldr	r2, [pc, #188]	; (8006db0 <TIM_OC1_SetConfig+0x120>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d00f      	beq.n	8006d18 <TIM_OC1_SetConfig+0x88>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a2e      	ldr	r2, [pc, #184]	; (8006db4 <TIM_OC1_SetConfig+0x124>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00b      	beq.n	8006d18 <TIM_OC1_SetConfig+0x88>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a2d      	ldr	r2, [pc, #180]	; (8006db8 <TIM_OC1_SetConfig+0x128>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d007      	beq.n	8006d18 <TIM_OC1_SetConfig+0x88>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a2c      	ldr	r2, [pc, #176]	; (8006dbc <TIM_OC1_SetConfig+0x12c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_OC1_SetConfig+0x88>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2b      	ldr	r2, [pc, #172]	; (8006dc0 <TIM_OC1_SetConfig+0x130>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10c      	bne.n	8006d32 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f023 0308 	bic.w	r3, r3, #8
 8006d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 0304 	bic.w	r3, r3, #4
 8006d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a1d      	ldr	r2, [pc, #116]	; (8006dac <TIM_OC1_SetConfig+0x11c>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d013      	beq.n	8006d62 <TIM_OC1_SetConfig+0xd2>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a1c      	ldr	r2, [pc, #112]	; (8006db0 <TIM_OC1_SetConfig+0x120>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00f      	beq.n	8006d62 <TIM_OC1_SetConfig+0xd2>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a1b      	ldr	r2, [pc, #108]	; (8006db4 <TIM_OC1_SetConfig+0x124>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00b      	beq.n	8006d62 <TIM_OC1_SetConfig+0xd2>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a1a      	ldr	r2, [pc, #104]	; (8006db8 <TIM_OC1_SetConfig+0x128>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <TIM_OC1_SetConfig+0xd2>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <TIM_OC1_SetConfig+0x12c>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_OC1_SetConfig+0xd2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a18      	ldr	r2, [pc, #96]	; (8006dc0 <TIM_OC1_SetConfig+0x130>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d111      	bne.n	8006d86 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	621a      	str	r2, [r3, #32]
}
 8006da0:	bf00      	nop
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	40012c00 	.word	0x40012c00
 8006db0:	40013400 	.word	0x40013400
 8006db4:	40014000 	.word	0x40014000
 8006db8:	40014400 	.word	0x40014400
 8006dbc:	40014800 	.word	0x40014800
 8006dc0:	40015000 	.word	0x40015000

08006dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f023 0210 	bic.w	r2, r3, #16
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	021b      	lsls	r3, r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f023 0320 	bic.w	r3, r3, #32
 8006e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <TIM_OC2_SetConfig+0x110>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d007      	beq.n	8006e38 <TIM_OC2_SetConfig+0x74>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a2b      	ldr	r2, [pc, #172]	; (8006ed8 <TIM_OC2_SetConfig+0x114>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d003      	beq.n	8006e38 <TIM_OC2_SetConfig+0x74>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a2a      	ldr	r2, [pc, #168]	; (8006edc <TIM_OC2_SetConfig+0x118>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d10d      	bne.n	8006e54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	011b      	lsls	r3, r3, #4
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1f      	ldr	r2, [pc, #124]	; (8006ed4 <TIM_OC2_SetConfig+0x110>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d013      	beq.n	8006e84 <TIM_OC2_SetConfig+0xc0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1e      	ldr	r2, [pc, #120]	; (8006ed8 <TIM_OC2_SetConfig+0x114>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00f      	beq.n	8006e84 <TIM_OC2_SetConfig+0xc0>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1e      	ldr	r2, [pc, #120]	; (8006ee0 <TIM_OC2_SetConfig+0x11c>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_OC2_SetConfig+0xc0>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ee4 <TIM_OC2_SetConfig+0x120>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_OC2_SetConfig+0xc0>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a1c      	ldr	r2, [pc, #112]	; (8006ee8 <TIM_OC2_SetConfig+0x124>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_OC2_SetConfig+0xc0>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a17      	ldr	r2, [pc, #92]	; (8006edc <TIM_OC2_SetConfig+0x118>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d113      	bne.n	8006eac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e8a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e92:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40013400 	.word	0x40013400
 8006edc:	40015000 	.word	0x40015000
 8006ee0:	40014000 	.word	0x40014000
 8006ee4:	40014400 	.word	0x40014400
 8006ee8:	40014800 	.word	0x40014800

08006eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	021b      	lsls	r3, r3, #8
 8006f40:	697a      	ldr	r2, [r7, #20]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2b      	ldr	r2, [pc, #172]	; (8006ff8 <TIM_OC3_SetConfig+0x10c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d007      	beq.n	8006f5e <TIM_OC3_SetConfig+0x72>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2a      	ldr	r2, [pc, #168]	; (8006ffc <TIM_OC3_SetConfig+0x110>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d003      	beq.n	8006f5e <TIM_OC3_SetConfig+0x72>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a29      	ldr	r2, [pc, #164]	; (8007000 <TIM_OC3_SetConfig+0x114>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d10d      	bne.n	8006f7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	021b      	lsls	r3, r3, #8
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f78:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a1e      	ldr	r2, [pc, #120]	; (8006ff8 <TIM_OC3_SetConfig+0x10c>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <TIM_OC3_SetConfig+0xbe>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a1d      	ldr	r2, [pc, #116]	; (8006ffc <TIM_OC3_SetConfig+0x110>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00f      	beq.n	8006faa <TIM_OC3_SetConfig+0xbe>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <TIM_OC3_SetConfig+0x118>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d00b      	beq.n	8006faa <TIM_OC3_SetConfig+0xbe>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a1c      	ldr	r2, [pc, #112]	; (8007008 <TIM_OC3_SetConfig+0x11c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d007      	beq.n	8006faa <TIM_OC3_SetConfig+0xbe>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a1b      	ldr	r2, [pc, #108]	; (800700c <TIM_OC3_SetConfig+0x120>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d003      	beq.n	8006faa <TIM_OC3_SetConfig+0xbe>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a16      	ldr	r2, [pc, #88]	; (8007000 <TIM_OC3_SetConfig+0x114>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d113      	bne.n	8006fd2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	697a      	ldr	r2, [r7, #20]
 8006fea:	621a      	str	r2, [r3, #32]
}
 8006fec:	bf00      	nop
 8006fee:	371c      	adds	r7, #28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	40012c00 	.word	0x40012c00
 8006ffc:	40013400 	.word	0x40013400
 8007000:	40015000 	.word	0x40015000
 8007004:	40014000 	.word	0x40014000
 8007008:	40014400 	.word	0x40014400
 800700c:	40014800 	.word	0x40014800

08007010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a1b      	ldr	r3, [r3, #32]
 800702a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800703e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800704a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800705e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	031b      	lsls	r3, r3, #12
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1a      	ldr	r2, [pc, #104]	; (80070d8 <TIM_OC4_SetConfig+0xc8>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <TIM_OC4_SetConfig+0x8c>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a19      	ldr	r2, [pc, #100]	; (80070dc <TIM_OC4_SetConfig+0xcc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00f      	beq.n	800709c <TIM_OC4_SetConfig+0x8c>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a18      	ldr	r2, [pc, #96]	; (80070e0 <TIM_OC4_SetConfig+0xd0>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d00b      	beq.n	800709c <TIM_OC4_SetConfig+0x8c>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a17      	ldr	r2, [pc, #92]	; (80070e4 <TIM_OC4_SetConfig+0xd4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d007      	beq.n	800709c <TIM_OC4_SetConfig+0x8c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <TIM_OC4_SetConfig+0xd8>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d003      	beq.n	800709c <TIM_OC4_SetConfig+0x8c>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a15      	ldr	r2, [pc, #84]	; (80070ec <TIM_OC4_SetConfig+0xdc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d109      	bne.n	80070b0 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	019b      	lsls	r3, r3, #6
 80070aa:	697a      	ldr	r2, [r7, #20]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685a      	ldr	r2, [r3, #4]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	621a      	str	r2, [r3, #32]
}
 80070ca:	bf00      	nop
 80070cc:	371c      	adds	r7, #28
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40014000 	.word	0x40014000
 80070e4:	40014400 	.word	0x40014400
 80070e8:	40014800 	.word	0x40014800
 80070ec:	40015000 	.word	0x40015000

080070f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800711e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007134:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a19      	ldr	r2, [pc, #100]	; (80071ac <TIM_OC5_SetConfig+0xbc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a18      	ldr	r2, [pc, #96]	; (80071b0 <TIM_OC5_SetConfig+0xc0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00f      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a17      	ldr	r2, [pc, #92]	; (80071b4 <TIM_OC5_SetConfig+0xc4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00b      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <TIM_OC5_SetConfig+0xc8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d007      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a15      	ldr	r2, [pc, #84]	; (80071bc <TIM_OC5_SetConfig+0xcc>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d003      	beq.n	8007172 <TIM_OC5_SetConfig+0x82>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <TIM_OC5_SetConfig+0xd0>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d109      	bne.n	8007186 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007178:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	021b      	lsls	r3, r3, #8
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	685a      	ldr	r2, [r3, #4]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	621a      	str	r2, [r3, #32]
}
 80071a0:	bf00      	nop
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	40012c00 	.word	0x40012c00
 80071b0:	40013400 	.word	0x40013400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800
 80071c0:	40015000 	.word	0x40015000

080071c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	021b      	lsls	r3, r3, #8
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800720a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	051b      	lsls	r3, r3, #20
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4313      	orrs	r3, r2
 8007216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a1a      	ldr	r2, [pc, #104]	; (8007284 <TIM_OC6_SetConfig+0xc0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a19      	ldr	r2, [pc, #100]	; (8007288 <TIM_OC6_SetConfig+0xc4>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00f      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a18      	ldr	r2, [pc, #96]	; (800728c <TIM_OC6_SetConfig+0xc8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00b      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a17      	ldr	r2, [pc, #92]	; (8007290 <TIM_OC6_SetConfig+0xcc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a16      	ldr	r2, [pc, #88]	; (8007294 <TIM_OC6_SetConfig+0xd0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_OC6_SetConfig+0x84>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a15      	ldr	r2, [pc, #84]	; (8007298 <TIM_OC6_SetConfig+0xd4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d109      	bne.n	800725c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800724e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	029b      	lsls	r3, r3, #10
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	621a      	str	r2, [r3, #32]
}
 8007276:	bf00      	nop
 8007278:	371c      	adds	r7, #28
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40012c00 	.word	0x40012c00
 8007288:	40013400 	.word	0x40013400
 800728c:	40014000 	.word	0x40014000
 8007290:	40014400 	.word	0x40014400
 8007294:	40014800 	.word	0x40014800
 8007298:	40015000 	.word	0x40015000

0800729c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	f023 0201 	bic.w	r2, r3, #1
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4a26      	ldr	r2, [pc, #152]	; (8007360 <TIM_TI1_SetConfig+0xc4>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d017      	beq.n	80072fa <TIM_TI1_SetConfig+0x5e>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d0:	d013      	beq.n	80072fa <TIM_TI1_SetConfig+0x5e>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4a23      	ldr	r2, [pc, #140]	; (8007364 <TIM_TI1_SetConfig+0xc8>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d00f      	beq.n	80072fa <TIM_TI1_SetConfig+0x5e>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4a22      	ldr	r2, [pc, #136]	; (8007368 <TIM_TI1_SetConfig+0xcc>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d00b      	beq.n	80072fa <TIM_TI1_SetConfig+0x5e>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a21      	ldr	r2, [pc, #132]	; (800736c <TIM_TI1_SetConfig+0xd0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d007      	beq.n	80072fa <TIM_TI1_SetConfig+0x5e>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	4a20      	ldr	r2, [pc, #128]	; (8007370 <TIM_TI1_SetConfig+0xd4>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d003      	beq.n	80072fa <TIM_TI1_SetConfig+0x5e>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4a1f      	ldr	r2, [pc, #124]	; (8007374 <TIM_TI1_SetConfig+0xd8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d101      	bne.n	80072fe <TIM_TI1_SetConfig+0x62>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <TIM_TI1_SetConfig+0x64>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d008      	beq.n	8007316 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f023 0303 	bic.w	r3, r3, #3
 800730a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4313      	orrs	r3, r2
 8007312:	617b      	str	r3, [r7, #20]
 8007314:	e003      	b.n	800731e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	f043 0301 	orr.w	r3, r3, #1
 800731c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007324:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	b2db      	uxtb	r3, r3
 800732c:	697a      	ldr	r2, [r7, #20]
 800732e:	4313      	orrs	r3, r2
 8007330:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f023 030a 	bic.w	r3, r3, #10
 8007338:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	f003 030a 	and.w	r3, r3, #10
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	4313      	orrs	r3, r2
 8007344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40012c00 	.word	0x40012c00
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800
 800736c:	40013400 	.word	0x40013400
 8007370:	40014000 	.word	0x40014000
 8007374:	40015000 	.word	0x40015000

08007378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6a1b      	ldr	r3, [r3, #32]
 8007388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	f023 0201 	bic.w	r2, r3, #1
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	f023 030a 	bic.w	r3, r3, #10
 80073b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	693a      	ldr	r2, [r7, #16]
 80073c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	621a      	str	r2, [r3, #32]
}
 80073ca:	bf00      	nop
 80073cc:	371c      	adds	r7, #28
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b087      	sub	sp, #28
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	f023 0210 	bic.w	r2, r3, #16
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007402:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	031b      	lsls	r3, r3, #12
 800741a:	b29b      	uxth	r3, r3
 800741c:	697a      	ldr	r2, [r7, #20]
 800741e:	4313      	orrs	r3, r2
 8007420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007428:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	011b      	lsls	r3, r3, #4
 800742e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007432:	693a      	ldr	r2, [r7, #16]
 8007434:	4313      	orrs	r3, r2
 8007436:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	621a      	str	r2, [r3, #32]
}
 8007444:	bf00      	nop
 8007446:	371c      	adds	r7, #28
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a1b      	ldr	r3, [r3, #32]
 8007460:	f023 0210 	bic.w	r2, r3, #16
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800747a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	031b      	lsls	r3, r3, #12
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	4313      	orrs	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800748c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	621a      	str	r2, [r3, #32]
}
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
 80074bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f023 0303 	bic.w	r3, r3, #3
 80074dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	011b      	lsls	r3, r3, #4
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007500:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	621a      	str	r2, [r3, #32]
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007554:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007566:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	031b      	lsls	r3, r3, #12
 800756c:	b29b      	uxth	r3, r3
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800757a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	031b      	lsls	r3, r3, #12
 8007580:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b085      	sub	sp, #20
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	f043 0307 	orr.w	r3, r3, #7
 80075c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	609a      	str	r2, [r3, #8]
}
 80075cc:	bf00      	nop
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	021a      	lsls	r2, r3, #8
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	431a      	orrs	r2, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	4313      	orrs	r3, r2
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	4313      	orrs	r3, r2
 8007604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	609a      	str	r2, [r3, #8]
}
 800760c:	bf00      	nop
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	2201      	movs	r2, #1
 800762c:	fa02 f303 	lsl.w	r3, r2, r3
 8007630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1a      	ldr	r2, [r3, #32]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	43db      	mvns	r3, r3
 800763a:	401a      	ands	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a1a      	ldr	r2, [r3, #32]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	fa01 f303 	lsl.w	r3, r1, r3
 8007650:	431a      	orrs	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	621a      	str	r2, [r3, #32]
}
 8007656:	bf00      	nop
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
	...

08007664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007674:	2b01      	cmp	r3, #1
 8007676:	d101      	bne.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007678:	2302      	movs	r3, #2
 800767a:	e06d      	b.n	8007758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2201      	movs	r2, #1
 8007680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2202      	movs	r2, #2
 8007688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a30      	ldr	r2, [pc, #192]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d009      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a2f      	ldr	r2, [pc, #188]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a2d      	ldr	r2, [pc, #180]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d108      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d01d      	beq.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f8:	d018      	beq.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1c      	ldr	r2, [pc, #112]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1a      	ldr	r2, [pc, #104]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00e      	beq.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a15      	ldr	r2, [pc, #84]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d009      	beq.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a16      	ldr	r2, [pc, #88]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a11      	ldr	r2, [pc, #68]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10c      	bne.n	8007746 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	4313      	orrs	r3, r2
 800773c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	40012c00 	.word	0x40012c00
 8007768:	40013400 	.word	0x40013400
 800776c:	40015000 	.word	0x40015000
 8007770:	40000400 	.word	0x40000400
 8007774:	40000800 	.word	0x40000800
 8007778:	40014000 	.word	0x40014000

0800777c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007794:	2302      	movs	r3, #2
 8007796:	e06a      	b.n	800786e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a19      	ldr	r2, [pc, #100]	; (800787c <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d009      	beq.n	8007830 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a17      	ldr	r2, [pc, #92]	; (8007880 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d004      	beq.n	8007830 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a16      	ldr	r2, [pc, #88]	; (8007884 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d115      	bne.n	800785c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783a:	051b      	lsls	r3, r3, #20
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	40012c00 	.word	0x40012c00
 8007880:	40013400 	.word	0x40013400
 8007884:	40015000 	.word	0x40015000

08007888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e040      	b.n	8007958 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fb f9ca 	bl	8002c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2224      	movs	r2, #36	; 0x24
 80078f0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb76 	bl	8007ff4 <UART_SetConfig>
 8007908:	4603      	mov	r3, r0
 800790a:	2b01      	cmp	r3, #1
 800790c:	d101      	bne.n	8007912 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e022      	b.n	8007958 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fd3e 	bl	800839c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800792e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800793e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0201 	orr.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fdc5 	bl	80084e0 <UART_CheckIdleState>
 8007956:	4603      	mov	r3, r0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08a      	sub	sp, #40	; 0x28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	4613      	mov	r3, r2
 800796c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007974:	2b20      	cmp	r3, #32
 8007976:	d132      	bne.n	80079de <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <HAL_UART_Receive_IT+0x24>
 800797e:	88fb      	ldrh	r3, [r7, #6]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e02b      	b.n	80079e0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d018      	beq.n	80079ce <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	613b      	str	r3, [r7, #16]
   return(result);
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	461a      	mov	r2, r3
 80079b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ba:	623b      	str	r3, [r7, #32]
 80079bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079be:	69f9      	ldr	r1, [r7, #28]
 80079c0:	6a3a      	ldr	r2, [r7, #32]
 80079c2:	e841 2300 	strex	r3, r2, [r1]
 80079c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1e6      	bne.n	800799c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80079ce:	88fb      	ldrh	r3, [r7, #6]
 80079d0:	461a      	mov	r2, r3
 80079d2:	68b9      	ldr	r1, [r7, #8]
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fe93 	bl	8008700 <UART_Start_Receive_IT>
 80079da:	4603      	mov	r3, r0
 80079dc:	e000      	b.n	80079e0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80079de:	2302      	movs	r3, #2
  }
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3728      	adds	r7, #40	; 0x28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b0ba      	sub	sp, #232	; 0xe8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007a0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007a12:	f640 030f 	movw	r3, #2063	; 0x80f
 8007a16:	4013      	ands	r3, r2
 8007a18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d115      	bne.n	8007a50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a28:	f003 0320 	and.w	r3, r3, #32
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00f      	beq.n	8007a50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a34:	f003 0320 	and.w	r3, r3, #32
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d009      	beq.n	8007a50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 82ab 	beq.w	8007f9c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
      }
      return;
 8007a4e:	e2a5      	b.n	8007f9c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8117 	beq.w	8007c88 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d106      	bne.n	8007a74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a6a:	4b85      	ldr	r3, [pc, #532]	; (8007c80 <HAL_UART_IRQHandler+0x298>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 810a 	beq.w	8007c88 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d011      	beq.n	8007aa4 <HAL_UART_IRQHandler+0xbc>
 8007a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2201      	movs	r2, #1
 8007a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a9a:	f043 0201 	orr.w	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	f003 0302 	and.w	r3, r3, #2
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d011      	beq.n	8007ad4 <HAL_UART_IRQHandler+0xec>
 8007ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00b      	beq.n	8007ad4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aca:	f043 0204 	orr.w	r2, r3, #4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad8:	f003 0304 	and.w	r3, r3, #4
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d011      	beq.n	8007b04 <HAL_UART_IRQHandler+0x11c>
 8007ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2204      	movs	r2, #4
 8007af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007afa:	f043 0202 	orr.w	r2, r3, #2
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d017      	beq.n	8007b40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b14:	f003 0320 	and.w	r3, r3, #32
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d105      	bne.n	8007b28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b36:	f043 0208 	orr.w	r2, r3, #8
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d012      	beq.n	8007b72 <HAL_UART_IRQHandler+0x18a>
 8007b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00c      	beq.n	8007b72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b68:	f043 0220 	orr.w	r2, r3, #32
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 8211 	beq.w	8007fa0 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b82:	f003 0320 	and.w	r3, r3, #32
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00d      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bba:	2b40      	cmp	r3, #64	; 0x40
 8007bbc:	d005      	beq.n	8007bca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d04f      	beq.n	8007c6a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fe5e 	bl	800888c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bda:	2b40      	cmp	r3, #64	; 0x40
 8007bdc:	d141      	bne.n	8007c62 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	3308      	adds	r3, #8
 8007be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bec:	e853 3f00 	ldrex	r3, [r3]
 8007bf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bfc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	3308      	adds	r3, #8
 8007c06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c0a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1d9      	bne.n	8007bde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d013      	beq.n	8007c5a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c36:	4a13      	ldr	r2, [pc, #76]	; (8007c84 <HAL_UART_IRQHandler+0x29c>)
 8007c38:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fb ff95 	bl	8003b6e <HAL_DMA_Abort_IT>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d017      	beq.n	8007c7a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007c54:	4610      	mov	r0, r2
 8007c56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c58:	e00f      	b.n	8007c7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f9b4 	bl	8007fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c60:	e00b      	b.n	8007c7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f9b0 	bl	8007fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c68:	e007      	b.n	8007c7a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f9ac 	bl	8007fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007c78:	e192      	b.n	8007fa0 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7a:	bf00      	nop
    return;
 8007c7c:	e190      	b.n	8007fa0 <HAL_UART_IRQHandler+0x5b8>
 8007c7e:	bf00      	nop
 8007c80:	04000120 	.word	0x04000120
 8007c84:	08008955 	.word	0x08008955

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	f040 814b 	bne.w	8007f28 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c96:	f003 0310 	and.w	r3, r3, #16
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8144 	beq.w	8007f28 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 813d 	beq.w	8007f28 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2210      	movs	r2, #16
 8007cb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b40      	cmp	r3, #64	; 0x40
 8007cc2:	f040 80b5 	bne.w	8007e30 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cd2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 8164 	beq.w	8007fa4 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ce2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	f080 815c 	bcs.w	8007fa4 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	f000 8086 	beq.w	8007e0e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	461a      	mov	r2, r3
 8007d28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d3c:	e841 2300 	strex	r3, r2, [r1]
 8007d40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1da      	bne.n	8007d02 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3308      	adds	r3, #8
 8007d52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d5e:	f023 0301 	bic.w	r3, r3, #1
 8007d62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3308      	adds	r3, #8
 8007d6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d7c:	e841 2300 	strex	r3, r2, [r1]
 8007d80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e1      	bne.n	8007d4c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	3308      	adds	r3, #8
 8007d8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3308      	adds	r3, #8
 8007da8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dac:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007dae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007db2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007dba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e3      	bne.n	8007d88 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dde:	f023 0310 	bic.w	r3, r3, #16
 8007de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007df2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e4      	bne.n	8007dce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fb fe77 	bl	8003afc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2202      	movs	r2, #2
 8007e12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f8d7 	bl	8007fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e2e:	e0b9      	b.n	8007fa4 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 80ab 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007e52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80a6 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e4      	bne.n	8007e5c <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3308      	adds	r3, #8
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	e853 3f00 	ldrex	r3, [r3]
 8007ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	f023 0301 	bic.w	r3, r3, #1
 8007ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007eb6:	633a      	str	r2, [r7, #48]	; 0x30
 8007eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ebe:	e841 2300 	strex	r3, r2, [r1]
 8007ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1e3      	bne.n	8007e92 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f023 0310 	bic.w	r3, r3, #16
 8007ef2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	461a      	mov	r2, r3
 8007efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f04:	69b9      	ldr	r1, [r7, #24]
 8007f06:	69fa      	ldr	r2, [r7, #28]
 8007f08:	e841 2300 	strex	r3, r2, [r1]
 8007f0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1e4      	bne.n	8007ede <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f85b 	bl	8007fdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f26:	e03f      	b.n	8007fa8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00e      	beq.n	8007f52 <HAL_UART_IRQHandler+0x56a>
 8007f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d008      	beq.n	8007f52 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 feea 	bl	8008d24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f50:	e02d      	b.n	8007fae <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d008      	beq.n	8007f7c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d01c      	beq.n	8007fac <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	4798      	blx	r3
    }
    return;
 8007f7a:	e017      	b.n	8007fac <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d012      	beq.n	8007fae <HAL_UART_IRQHandler+0x5c6>
 8007f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d00c      	beq.n	8007fae <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fcf3 	bl	8008980 <UART_EndTransmit_IT>
    return;
 8007f9a:	e008      	b.n	8007fae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007f9c:	bf00      	nop
 8007f9e:	e006      	b.n	8007fae <HAL_UART_IRQHandler+0x5c6>
    return;
 8007fa0:	bf00      	nop
 8007fa2:	e004      	b.n	8007fae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007fa4:	bf00      	nop
 8007fa6:	e002      	b.n	8007fae <HAL_UART_IRQHandler+0x5c6>
      return;
 8007fa8:	bf00      	nop
 8007faa:	e000      	b.n	8007fae <HAL_UART_IRQHandler+0x5c6>
    return;
 8007fac:	bf00      	nop
  }

}
 8007fae:	37e8      	adds	r7, #232	; 0xe8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689a      	ldr	r2, [r3, #8]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	431a      	orrs	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69db      	ldr	r3, [r3, #28]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b92      	ldr	r3, [pc, #584]	; (8008268 <UART_SetConfig+0x274>)
 8008020:	4013      	ands	r3, r2
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6812      	ldr	r2, [r2, #0]
 8008026:	6979      	ldr	r1, [r7, #20]
 8008028:	430b      	orrs	r3, r1
 800802a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68da      	ldr	r2, [r3, #12]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	4313      	orrs	r3, r2
 8008050:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	430a      	orrs	r2, r1
 8008064:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a80      	ldr	r2, [pc, #512]	; (800826c <UART_SetConfig+0x278>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d120      	bne.n	80080b2 <UART_SetConfig+0xbe>
 8008070:	4b7f      	ldr	r3, [pc, #508]	; (8008270 <UART_SetConfig+0x27c>)
 8008072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008074:	f003 0303 	and.w	r3, r3, #3
 8008078:	2b03      	cmp	r3, #3
 800807a:	d817      	bhi.n	80080ac <UART_SetConfig+0xb8>
 800807c:	a201      	add	r2, pc, #4	; (adr r2, 8008084 <UART_SetConfig+0x90>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	08008095 	.word	0x08008095
 8008088:	080080a1 	.word	0x080080a1
 800808c:	080080a7 	.word	0x080080a7
 8008090:	0800809b 	.word	0x0800809b
 8008094:	2301      	movs	r3, #1
 8008096:	77fb      	strb	r3, [r7, #31]
 8008098:	e0b5      	b.n	8008206 <UART_SetConfig+0x212>
 800809a:	2302      	movs	r3, #2
 800809c:	77fb      	strb	r3, [r7, #31]
 800809e:	e0b2      	b.n	8008206 <UART_SetConfig+0x212>
 80080a0:	2304      	movs	r3, #4
 80080a2:	77fb      	strb	r3, [r7, #31]
 80080a4:	e0af      	b.n	8008206 <UART_SetConfig+0x212>
 80080a6:	2308      	movs	r3, #8
 80080a8:	77fb      	strb	r3, [r7, #31]
 80080aa:	e0ac      	b.n	8008206 <UART_SetConfig+0x212>
 80080ac:	2310      	movs	r3, #16
 80080ae:	77fb      	strb	r3, [r7, #31]
 80080b0:	e0a9      	b.n	8008206 <UART_SetConfig+0x212>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a6f      	ldr	r2, [pc, #444]	; (8008274 <UART_SetConfig+0x280>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d124      	bne.n	8008106 <UART_SetConfig+0x112>
 80080bc:	4b6c      	ldr	r3, [pc, #432]	; (8008270 <UART_SetConfig+0x27c>)
 80080be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080c8:	d011      	beq.n	80080ee <UART_SetConfig+0xfa>
 80080ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080ce:	d817      	bhi.n	8008100 <UART_SetConfig+0x10c>
 80080d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080d4:	d011      	beq.n	80080fa <UART_SetConfig+0x106>
 80080d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080da:	d811      	bhi.n	8008100 <UART_SetConfig+0x10c>
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d003      	beq.n	80080e8 <UART_SetConfig+0xf4>
 80080e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080e4:	d006      	beq.n	80080f4 <UART_SetConfig+0x100>
 80080e6:	e00b      	b.n	8008100 <UART_SetConfig+0x10c>
 80080e8:	2300      	movs	r3, #0
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	e08b      	b.n	8008206 <UART_SetConfig+0x212>
 80080ee:	2302      	movs	r3, #2
 80080f0:	77fb      	strb	r3, [r7, #31]
 80080f2:	e088      	b.n	8008206 <UART_SetConfig+0x212>
 80080f4:	2304      	movs	r3, #4
 80080f6:	77fb      	strb	r3, [r7, #31]
 80080f8:	e085      	b.n	8008206 <UART_SetConfig+0x212>
 80080fa:	2308      	movs	r3, #8
 80080fc:	77fb      	strb	r3, [r7, #31]
 80080fe:	e082      	b.n	8008206 <UART_SetConfig+0x212>
 8008100:	2310      	movs	r3, #16
 8008102:	77fb      	strb	r3, [r7, #31]
 8008104:	e07f      	b.n	8008206 <UART_SetConfig+0x212>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a5b      	ldr	r2, [pc, #364]	; (8008278 <UART_SetConfig+0x284>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d124      	bne.n	800815a <UART_SetConfig+0x166>
 8008110:	4b57      	ldr	r3, [pc, #348]	; (8008270 <UART_SetConfig+0x27c>)
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008118:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800811c:	d011      	beq.n	8008142 <UART_SetConfig+0x14e>
 800811e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008122:	d817      	bhi.n	8008154 <UART_SetConfig+0x160>
 8008124:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008128:	d011      	beq.n	800814e <UART_SetConfig+0x15a>
 800812a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800812e:	d811      	bhi.n	8008154 <UART_SetConfig+0x160>
 8008130:	2b00      	cmp	r3, #0
 8008132:	d003      	beq.n	800813c <UART_SetConfig+0x148>
 8008134:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008138:	d006      	beq.n	8008148 <UART_SetConfig+0x154>
 800813a:	e00b      	b.n	8008154 <UART_SetConfig+0x160>
 800813c:	2300      	movs	r3, #0
 800813e:	77fb      	strb	r3, [r7, #31]
 8008140:	e061      	b.n	8008206 <UART_SetConfig+0x212>
 8008142:	2302      	movs	r3, #2
 8008144:	77fb      	strb	r3, [r7, #31]
 8008146:	e05e      	b.n	8008206 <UART_SetConfig+0x212>
 8008148:	2304      	movs	r3, #4
 800814a:	77fb      	strb	r3, [r7, #31]
 800814c:	e05b      	b.n	8008206 <UART_SetConfig+0x212>
 800814e:	2308      	movs	r3, #8
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e058      	b.n	8008206 <UART_SetConfig+0x212>
 8008154:	2310      	movs	r3, #16
 8008156:	77fb      	strb	r3, [r7, #31]
 8008158:	e055      	b.n	8008206 <UART_SetConfig+0x212>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a47      	ldr	r2, [pc, #284]	; (800827c <UART_SetConfig+0x288>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d124      	bne.n	80081ae <UART_SetConfig+0x1ba>
 8008164:	4b42      	ldr	r3, [pc, #264]	; (8008270 <UART_SetConfig+0x27c>)
 8008166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008168:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800816c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008170:	d011      	beq.n	8008196 <UART_SetConfig+0x1a2>
 8008172:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008176:	d817      	bhi.n	80081a8 <UART_SetConfig+0x1b4>
 8008178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800817c:	d011      	beq.n	80081a2 <UART_SetConfig+0x1ae>
 800817e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008182:	d811      	bhi.n	80081a8 <UART_SetConfig+0x1b4>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d003      	beq.n	8008190 <UART_SetConfig+0x19c>
 8008188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818c:	d006      	beq.n	800819c <UART_SetConfig+0x1a8>
 800818e:	e00b      	b.n	80081a8 <UART_SetConfig+0x1b4>
 8008190:	2300      	movs	r3, #0
 8008192:	77fb      	strb	r3, [r7, #31]
 8008194:	e037      	b.n	8008206 <UART_SetConfig+0x212>
 8008196:	2302      	movs	r3, #2
 8008198:	77fb      	strb	r3, [r7, #31]
 800819a:	e034      	b.n	8008206 <UART_SetConfig+0x212>
 800819c:	2304      	movs	r3, #4
 800819e:	77fb      	strb	r3, [r7, #31]
 80081a0:	e031      	b.n	8008206 <UART_SetConfig+0x212>
 80081a2:	2308      	movs	r3, #8
 80081a4:	77fb      	strb	r3, [r7, #31]
 80081a6:	e02e      	b.n	8008206 <UART_SetConfig+0x212>
 80081a8:	2310      	movs	r3, #16
 80081aa:	77fb      	strb	r3, [r7, #31]
 80081ac:	e02b      	b.n	8008206 <UART_SetConfig+0x212>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a33      	ldr	r2, [pc, #204]	; (8008280 <UART_SetConfig+0x28c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d124      	bne.n	8008202 <UART_SetConfig+0x20e>
 80081b8:	4b2d      	ldr	r3, [pc, #180]	; (8008270 <UART_SetConfig+0x27c>)
 80081ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081bc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80081c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081c4:	d011      	beq.n	80081ea <UART_SetConfig+0x1f6>
 80081c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081ca:	d817      	bhi.n	80081fc <UART_SetConfig+0x208>
 80081cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081d0:	d011      	beq.n	80081f6 <UART_SetConfig+0x202>
 80081d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081d6:	d811      	bhi.n	80081fc <UART_SetConfig+0x208>
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <UART_SetConfig+0x1f0>
 80081dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e0:	d006      	beq.n	80081f0 <UART_SetConfig+0x1fc>
 80081e2:	e00b      	b.n	80081fc <UART_SetConfig+0x208>
 80081e4:	2300      	movs	r3, #0
 80081e6:	77fb      	strb	r3, [r7, #31]
 80081e8:	e00d      	b.n	8008206 <UART_SetConfig+0x212>
 80081ea:	2302      	movs	r3, #2
 80081ec:	77fb      	strb	r3, [r7, #31]
 80081ee:	e00a      	b.n	8008206 <UART_SetConfig+0x212>
 80081f0:	2304      	movs	r3, #4
 80081f2:	77fb      	strb	r3, [r7, #31]
 80081f4:	e007      	b.n	8008206 <UART_SetConfig+0x212>
 80081f6:	2308      	movs	r3, #8
 80081f8:	77fb      	strb	r3, [r7, #31]
 80081fa:	e004      	b.n	8008206 <UART_SetConfig+0x212>
 80081fc:	2310      	movs	r3, #16
 80081fe:	77fb      	strb	r3, [r7, #31]
 8008200:	e001      	b.n	8008206 <UART_SetConfig+0x212>
 8008202:	2310      	movs	r3, #16
 8008204:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820e:	d16b      	bne.n	80082e8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008210:	7ffb      	ldrb	r3, [r7, #31]
 8008212:	2b08      	cmp	r3, #8
 8008214:	d838      	bhi.n	8008288 <UART_SetConfig+0x294>
 8008216:	a201      	add	r2, pc, #4	; (adr r2, 800821c <UART_SetConfig+0x228>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008241 	.word	0x08008241
 8008220:	08008249 	.word	0x08008249
 8008224:	08008251 	.word	0x08008251
 8008228:	08008289 	.word	0x08008289
 800822c:	08008257 	.word	0x08008257
 8008230:	08008289 	.word	0x08008289
 8008234:	08008289 	.word	0x08008289
 8008238:	08008289 	.word	0x08008289
 800823c:	0800825f 	.word	0x0800825f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008240:	f7fd f8bc 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 8008244:	61b8      	str	r0, [r7, #24]
        break;
 8008246:	e024      	b.n	8008292 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008248:	f7fd f8da 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 800824c:	61b8      	str	r0, [r7, #24]
        break;
 800824e:	e020      	b.n	8008292 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008250:	4b0c      	ldr	r3, [pc, #48]	; (8008284 <UART_SetConfig+0x290>)
 8008252:	61bb      	str	r3, [r7, #24]
        break;
 8008254:	e01d      	b.n	8008292 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008256:	f7fd f83b 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
 800825a:	61b8      	str	r0, [r7, #24]
        break;
 800825c:	e019      	b.n	8008292 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008262:	61bb      	str	r3, [r7, #24]
        break;
 8008264:	e015      	b.n	8008292 <UART_SetConfig+0x29e>
 8008266:	bf00      	nop
 8008268:	efff69f3 	.word	0xefff69f3
 800826c:	40013800 	.word	0x40013800
 8008270:	40021000 	.word	0x40021000
 8008274:	40004400 	.word	0x40004400
 8008278:	40004800 	.word	0x40004800
 800827c:	40004c00 	.word	0x40004c00
 8008280:	40005000 	.word	0x40005000
 8008284:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	77bb      	strb	r3, [r7, #30]
        break;
 8008290:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d073      	beq.n	8008380 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	005a      	lsls	r2, r3, #1
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	085b      	lsrs	r3, r3, #1
 80082a2:	441a      	add	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b0f      	cmp	r3, #15
 80082b2:	d916      	bls.n	80082e2 <UART_SetConfig+0x2ee>
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ba:	d212      	bcs.n	80082e2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	f023 030f 	bic.w	r3, r3, #15
 80082c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	085b      	lsrs	r3, r3, #1
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	89fb      	ldrh	r3, [r7, #14]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	89fa      	ldrh	r2, [r7, #14]
 80082de:	60da      	str	r2, [r3, #12]
 80082e0:	e04e      	b.n	8008380 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	77bb      	strb	r3, [r7, #30]
 80082e6:	e04b      	b.n	8008380 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082e8:	7ffb      	ldrb	r3, [r7, #31]
 80082ea:	2b08      	cmp	r3, #8
 80082ec:	d827      	bhi.n	800833e <UART_SetConfig+0x34a>
 80082ee:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <UART_SetConfig+0x300>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	08008319 	.word	0x08008319
 80082f8:	08008321 	.word	0x08008321
 80082fc:	08008329 	.word	0x08008329
 8008300:	0800833f 	.word	0x0800833f
 8008304:	0800832f 	.word	0x0800832f
 8008308:	0800833f 	.word	0x0800833f
 800830c:	0800833f 	.word	0x0800833f
 8008310:	0800833f 	.word	0x0800833f
 8008314:	08008337 	.word	0x08008337
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008318:	f7fd f850 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 800831c:	61b8      	str	r0, [r7, #24]
        break;
 800831e:	e013      	b.n	8008348 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008320:	f7fd f86e 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
 8008324:	61b8      	str	r0, [r7, #24]
        break;
 8008326:	e00f      	b.n	8008348 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008328:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <UART_SetConfig+0x3a4>)
 800832a:	61bb      	str	r3, [r7, #24]
        break;
 800832c:	e00c      	b.n	8008348 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800832e:	f7fc ffcf 	bl	80052d0 <HAL_RCC_GetSysClockFreq>
 8008332:	61b8      	str	r0, [r7, #24]
        break;
 8008334:	e008      	b.n	8008348 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800833a:	61bb      	str	r3, [r7, #24]
        break;
 800833c:	e004      	b.n	8008348 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	77bb      	strb	r3, [r7, #30]
        break;
 8008346:	bf00      	nop
    }

    if (pclk != 0U)
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d018      	beq.n	8008380 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	085a      	lsrs	r2, r3, #1
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	441a      	add	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008360:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b0f      	cmp	r3, #15
 8008366:	d909      	bls.n	800837c <UART_SetConfig+0x388>
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836e:	d205      	bcs.n	800837c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	b29a      	uxth	r2, r3
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60da      	str	r2, [r3, #12]
 800837a:	e001      	b.n	8008380 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800838c:	7fbb      	ldrb	r3, [r7, #30]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3720      	adds	r7, #32
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	007a1200 	.word	0x007a1200

0800839c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a8:	f003 0301 	and.w	r3, r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ca:	f003 0302 	and.w	r3, r3, #2
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ec:	f003 0304 	and.w	r3, r3, #4
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00a      	beq.n	800840a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b00      	cmp	r3, #0
 8008414:	d00a      	beq.n	800842c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	430a      	orrs	r2, r1
 800842a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	f003 0310 	and.w	r3, r3, #16
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00a      	beq.n	800844e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	430a      	orrs	r2, r1
 800846e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01a      	beq.n	80084b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	430a      	orrs	r2, r1
 8008490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800849a:	d10a      	bne.n	80084b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	605a      	str	r2, [r3, #4]
  }
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b098      	sub	sp, #96	; 0x60
 80084e4:	af02      	add	r7, sp, #8
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084f0:	f7fb f9f2 	bl	80038d8 <HAL_GetTick>
 80084f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0308 	and.w	r3, r3, #8
 8008500:	2b08      	cmp	r3, #8
 8008502:	d12e      	bne.n	8008562 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800850c:	2200      	movs	r2, #0
 800850e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 f88c 	bl	8008630 <UART_WaitOnFlagUntilTimeout>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d021      	beq.n	8008562 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008532:	653b      	str	r3, [r7, #80]	; 0x50
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	461a      	mov	r2, r3
 800853a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800853c:	647b      	str	r3, [r7, #68]	; 0x44
 800853e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008540:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008544:	e841 2300 	strex	r3, r2, [r1]
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1e6      	bne.n	800851e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e062      	b.n	8008628 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b04      	cmp	r3, #4
 800856e:	d149      	bne.n	8008604 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008578:	2200      	movs	r2, #0
 800857a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 f856 	bl	8008630 <UART_WaitOnFlagUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d03c      	beq.n	8008604 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	623b      	str	r3, [r7, #32]
   return(result);
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800859e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a8:	633b      	str	r3, [r7, #48]	; 0x30
 80085aa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e6      	bne.n	800858a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f023 0301 	bic.w	r3, r3, #1
 80085d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3308      	adds	r3, #8
 80085da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085dc:	61fa      	str	r2, [r7, #28]
 80085de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	617b      	str	r3, [r7, #20]
   return(result);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e5      	bne.n	80085bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e011      	b.n	8008628 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3758      	adds	r7, #88	; 0x58
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	4613      	mov	r3, r2
 800863e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008640:	e049      	b.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008648:	d045      	beq.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800864a:	f7fb f945 	bl	80038d8 <HAL_GetTick>
 800864e:	4602      	mov	r2, r0
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	429a      	cmp	r2, r3
 8008658:	d302      	bcc.n	8008660 <UART_WaitOnFlagUntilTimeout+0x30>
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008660:	2303      	movs	r3, #3
 8008662:	e048      	b.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0304 	and.w	r3, r3, #4
 800866e:	2b00      	cmp	r3, #0
 8008670:	d031      	beq.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69db      	ldr	r3, [r3, #28]
 8008678:	f003 0308 	and.w	r3, r3, #8
 800867c:	2b08      	cmp	r3, #8
 800867e:	d110      	bne.n	80086a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	2208      	movs	r2, #8
 8008686:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f000 f8ff 	bl	800888c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2208      	movs	r2, #8
 8008692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e029      	b.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086b0:	d111      	bne.n	80086d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f000 f8e5 	bl	800888c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2220      	movs	r2, #32
 80086c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e00f      	b.n	80086f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	69da      	ldr	r2, [r3, #28]
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4013      	ands	r3, r2
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	bf0c      	ite	eq
 80086e6:	2301      	moveq	r3, #1
 80086e8:	2300      	movne	r3, #0
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	461a      	mov	r2, r3
 80086ee:	79fb      	ldrb	r3, [r7, #7]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d0a6      	beq.n	8008642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086f4:	2300      	movs	r3, #0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}
	...

08008700 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008700:	b480      	push	{r7}
 8008702:	b097      	sub	sp, #92	; 0x5c
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	4613      	mov	r3, r2
 800870c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	88fa      	ldrh	r2, [r7, #6]
 8008718:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	88fa      	ldrh	r2, [r7, #6]
 8008720:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008732:	d10e      	bne.n	8008752 <UART_Start_Receive_IT+0x52>
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d105      	bne.n	8008748 <UART_Start_Receive_IT+0x48>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008746:	e02d      	b.n	80087a4 <UART_Start_Receive_IT+0xa4>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	22ff      	movs	r2, #255	; 0xff
 800874c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008750:	e028      	b.n	80087a4 <UART_Start_Receive_IT+0xa4>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10d      	bne.n	8008776 <UART_Start_Receive_IT+0x76>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d104      	bne.n	800876c <UART_Start_Receive_IT+0x6c>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	22ff      	movs	r2, #255	; 0xff
 8008766:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800876a:	e01b      	b.n	80087a4 <UART_Start_Receive_IT+0xa4>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	227f      	movs	r2, #127	; 0x7f
 8008770:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008774:	e016      	b.n	80087a4 <UART_Start_Receive_IT+0xa4>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800877e:	d10d      	bne.n	800879c <UART_Start_Receive_IT+0x9c>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d104      	bne.n	8008792 <UART_Start_Receive_IT+0x92>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	227f      	movs	r2, #127	; 0x7f
 800878c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008790:	e008      	b.n	80087a4 <UART_Start_Receive_IT+0xa4>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	223f      	movs	r2, #63	; 0x3f
 8008796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800879a:	e003      	b.n	80087a4 <UART_Start_Receive_IT+0xa4>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	2222      	movs	r2, #34	; 0x22
 80087b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3308      	adds	r3, #8
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087be:	e853 3f00 	ldrex	r3, [r3]
 80087c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	657b      	str	r3, [r7, #84]	; 0x54
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3308      	adds	r3, #8
 80087d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80087d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087dc:	e841 2300 	strex	r3, r2, [r1]
 80087e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1e5      	bne.n	80087b4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f0:	d107      	bne.n	8008802 <UART_Start_Receive_IT+0x102>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4a21      	ldr	r2, [pc, #132]	; (8008884 <UART_Start_Receive_IT+0x184>)
 80087fe:	669a      	str	r2, [r3, #104]	; 0x68
 8008800:	e002      	b.n	8008808 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a20      	ldr	r2, [pc, #128]	; (8008888 <UART_Start_Receive_IT+0x188>)
 8008806:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d019      	beq.n	8008844 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008824:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882e:	637b      	str	r3, [r7, #52]	; 0x34
 8008830:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e6      	bne.n	8008810 <UART_Start_Receive_IT+0x110>
 8008842:	e018      	b.n	8008876 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	613b      	str	r3, [r7, #16]
   return(result);
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	f043 0320 	orr.w	r3, r3, #32
 8008858:	653b      	str	r3, [r7, #80]	; 0x50
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008862:	623b      	str	r3, [r7, #32]
 8008864:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	69f9      	ldr	r1, [r7, #28]
 8008868:	6a3a      	ldr	r2, [r7, #32]
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e6      	bne.n	8008844 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	375c      	adds	r7, #92	; 0x5c
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	08008b7d 	.word	0x08008b7d
 8008888:	080089d5 	.word	0x080089d5

0800888c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800888c:	b480      	push	{r7}
 800888e:	b095      	sub	sp, #84	; 0x54
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	e853 3f00 	ldrex	r3, [r3]
 80088a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b2:	643b      	str	r3, [r7, #64]	; 0x40
 80088b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088ba:	e841 2300 	strex	r3, r2, [r1]
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d1e6      	bne.n	8008894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	e853 3f00 	ldrex	r3, [r3]
 80088d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3308      	adds	r3, #8
 80088e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d1e5      	bne.n	80088c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d118      	bne.n	8008934 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f023 0310 	bic.w	r3, r3, #16
 8008916:	647b      	str	r3, [r7, #68]	; 0x44
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008920:	61bb      	str	r3, [r7, #24]
 8008922:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6979      	ldr	r1, [r7, #20]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	613b      	str	r3, [r7, #16]
   return(result);
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e6      	bne.n	8008902 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2220      	movs	r2, #32
 8008938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008948:	bf00      	nop
 800894a:	3754      	adds	r7, #84	; 0x54
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff fb28 	bl	8007fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	60bb      	str	r3, [r7, #8]
   return(result);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800899c:	61fb      	str	r3, [r7, #28]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6979      	ldr	r1, [r7, #20]
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	613b      	str	r3, [r7, #16]
   return(result);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e6      	bne.n	8008988 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff faf4 	bl	8007fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089cc:	bf00      	nop
 80089ce:	3720      	adds	r7, #32
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b09c      	sub	sp, #112	; 0x70
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089e2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ec:	2b22      	cmp	r3, #34	; 0x22
 80089ee:	f040 80b9 	bne.w	8008b64 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80089f8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008a00:	b2d9      	uxtb	r1, r3
 8008a02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a06:	b2da      	uxtb	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0c:	400a      	ands	r2, r1
 8008a0e:	b2d2      	uxtb	r2, r2
 8008a10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a16:	1c5a      	adds	r2, r3, #1
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	3b01      	subs	r3, #1
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f040 809c 	bne.w	8008b74 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a50:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008a60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a62:	e841 2300 	strex	r3, r2, [r1]
 8008a66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e6      	bne.n	8008a3c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	f023 0301 	bic.w	r3, r3, #1
 8008a84:	667b      	str	r3, [r7, #100]	; 0x64
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a8e:	647a      	str	r2, [r7, #68]	; 0x44
 8008a90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e5      	bne.n	8008a6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d018      	beq.n	8008af6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	e853 3f00 	ldrex	r3, [r3]
 8008ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ad8:	663b      	str	r3, [r7, #96]	; 0x60
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ae2:	633b      	str	r3, [r7, #48]	; 0x30
 8008ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1e6      	bne.n	8008ac4 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d12e      	bne.n	8008b5c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f023 0310 	bic.w	r3, r3, #16
 8008b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b22:	61fb      	str	r3, [r7, #28]
 8008b24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	69fa      	ldr	r2, [r7, #28]
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e6      	bne.n	8008b04 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f003 0310 	and.w	r3, r3, #16
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	d103      	bne.n	8008b4c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2210      	movs	r2, #16
 8008b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff fa41 	bl	8007fdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b5a:	e00b      	b.n	8008b74 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7fa f937 	bl	8002dd0 <HAL_UART_RxCpltCallback>
}
 8008b62:	e007      	b.n	8008b74 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0208 	orr.w	r2, r2, #8
 8008b72:	619a      	str	r2, [r3, #24]
}
 8008b74:	bf00      	nop
 8008b76:	3770      	adds	r7, #112	; 0x70
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b09c      	sub	sp, #112	; 0x70
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b8a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b94:	2b22      	cmp	r3, #34	; 0x22
 8008b96:	f040 80b9 	bne.w	8008d0c <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ba0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008baa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008bae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bb8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bbe:	1c9a      	adds	r2, r3, #2
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f040 809c 	bne.w	8008d1c <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bec:	e853 3f00 	ldrex	r3, [r3]
 8008bf0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008bf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bf8:	667b      	str	r3, [r7, #100]	; 0x64
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c02:	657b      	str	r3, [r7, #84]	; 0x54
 8008c04:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c0a:	e841 2300 	strex	r3, r2, [r1]
 8008c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1e6      	bne.n	8008be4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3308      	adds	r3, #8
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	f023 0301 	bic.w	r3, r3, #1
 8008c2c:	663b      	str	r3, [r7, #96]	; 0x60
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c36:	643a      	str	r2, [r7, #64]	; 0x40
 8008c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c3e:	e841 2300 	strex	r3, r2, [r1]
 8008c42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1e5      	bne.n	8008c16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d018      	beq.n	8008c9e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c8c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e6      	bne.n	8008c6c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d12e      	bne.n	8008d04 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	f023 0310 	bic.w	r3, r3, #16
 8008cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cca:	61bb      	str	r3, [r7, #24]
 8008ccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6979      	ldr	r1, [r7, #20]
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e6      	bne.n	8008cac <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	f003 0310 	and.w	r3, r3, #16
 8008ce8:	2b10      	cmp	r3, #16
 8008cea:	d103      	bne.n	8008cf4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2210      	movs	r2, #16
 8008cf2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff f96d 	bl	8007fdc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d02:	e00b      	b.n	8008d1c <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7fa f863 	bl	8002dd0 <HAL_UART_RxCpltCallback>
}
 8008d0a:	e007      	b.n	8008d1c <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699a      	ldr	r2, [r3, #24]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0208 	orr.w	r2, r2, #8
 8008d1a:	619a      	str	r2, [r3, #24]
}
 8008d1c:	bf00      	nop
 8008d1e:	3770      	adds	r7, #112	; 0x70
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d2c:	bf00      	nop
 8008d2e:	370c      	adds	r7, #12
 8008d30:	46bd      	mov	sp, r7
 8008d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d36:	4770      	bx	lr

08008d38 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008d38:	b480      	push	{r7}
 8008d3a:	b085      	sub	sp, #20
 8008d3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d3e:	f3ef 8305 	mrs	r3, IPSR
 8008d42:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d44:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10f      	bne.n	8008d6a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d4e:	607b      	str	r3, [r7, #4]
  return(result);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d109      	bne.n	8008d6a <osKernelInitialize+0x32>
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <osKernelInitialize+0x64>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d109      	bne.n	8008d72 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8008d62:	603b      	str	r3, [r7, #0]
  return(result);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008d6a:	f06f 0305 	mvn.w	r3, #5
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	e00c      	b.n	8008d8c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008d72:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <osKernelInitialize+0x64>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d105      	bne.n	8008d86 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008d7a:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <osKernelInitialize+0x64>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e002      	b.n	8008d8c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008d86:	f04f 33ff 	mov.w	r3, #4294967295
 8008d8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	200006f0 	.word	0x200006f0

08008da0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da6:	f3ef 8305 	mrs	r3, IPSR
 8008daa:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10f      	bne.n	8008dd2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008db2:	f3ef 8310 	mrs	r3, PRIMASK
 8008db6:	607b      	str	r3, [r7, #4]
  return(result);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <osKernelStart+0x32>
 8008dbe:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <osKernelStart+0x64>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d109      	bne.n	8008dda <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8008dca:	603b      	str	r3, [r7, #0]
  return(result);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <osKernelStart+0x3a>
    stat = osErrorISR;
 8008dd2:	f06f 0305 	mvn.w	r3, #5
 8008dd6:	60fb      	str	r3, [r7, #12]
 8008dd8:	e00e      	b.n	8008df8 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <osKernelStart+0x64>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d107      	bne.n	8008df2 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8008de2:	4b08      	ldr	r3, [pc, #32]	; (8008e04 <osKernelStart+0x64>)
 8008de4:	2202      	movs	r2, #2
 8008de6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8008de8:	f001 fdfa 	bl	800a9e0 <vTaskStartScheduler>
      stat = osOK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e002      	b.n	8008df8 <osKernelStart+0x58>
    } else {
      stat = osError;
 8008df2:	f04f 33ff 	mov.w	r3, #4294967295
 8008df6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008df8:	68fb      	ldr	r3, [r7, #12]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200006f0 	.word	0x200006f0

08008e08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b092      	sub	sp, #72	; 0x48
 8008e0c:	af04      	add	r7, sp, #16
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e18:	f3ef 8305 	mrs	r3, IPSR
 8008e1c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f040 8094 	bne.w	8008f4e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e26:	f3ef 8310 	mrs	r3, PRIMASK
 8008e2a:	623b      	str	r3, [r7, #32]
  return(result);
 8008e2c:	6a3b      	ldr	r3, [r7, #32]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f040 808d 	bne.w	8008f4e <osThreadNew+0x146>
 8008e34:	4b48      	ldr	r3, [pc, #288]	; (8008f58 <osThreadNew+0x150>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d106      	bne.n	8008e4a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8008e40:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e42:	69fb      	ldr	r3, [r7, #28]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f040 8082 	bne.w	8008f4e <osThreadNew+0x146>
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d07e      	beq.n	8008f4e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8008e50:	2380      	movs	r3, #128	; 0x80
 8008e52:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008e54:	2318      	movs	r3, #24
 8008e56:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008e58:	2300      	movs	r3, #0
 8008e5a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008e5c:	f107 031b 	add.w	r3, r7, #27
 8008e60:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8008e62:	f04f 33ff 	mov.w	r3, #4294967295
 8008e66:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d045      	beq.n	8008efa <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <osThreadNew+0x74>
        name = attr->name;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d008      	beq.n	8008ea2 <osThreadNew+0x9a>
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	2b38      	cmp	r3, #56	; 0x38
 8008e94:	d805      	bhi.n	8008ea2 <osThreadNew+0x9a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <osThreadNew+0x9e>
        return (NULL);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	e054      	b.n	8008f50 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	089b      	lsrs	r3, r3, #2
 8008eb4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00e      	beq.n	8008edc <osThreadNew+0xd4>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	2bab      	cmp	r3, #171	; 0xab
 8008ec4:	d90a      	bls.n	8008edc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d006      	beq.n	8008edc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <osThreadNew+0xd4>
        mem = 1;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008eda:	e010      	b.n	8008efe <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10c      	bne.n	8008efe <osThreadNew+0xf6>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d108      	bne.n	8008efe <osThreadNew+0xf6>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d104      	bne.n	8008efe <osThreadNew+0xf6>
          mem = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ef8:	e001      	b.n	8008efe <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d110      	bne.n	8008f26 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f0c:	9202      	str	r2, [sp, #8]
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	9300      	str	r3, [sp, #0]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f001 fa6c 	bl	800a3f8 <xTaskCreateStatic>
 8008f20:	4603      	mov	r3, r0
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	e013      	b.n	8008f4e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d110      	bne.n	8008f4e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	f107 0314 	add.w	r3, r7, #20
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f001 fab6 	bl	800a4b0 <xTaskCreate>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d001      	beq.n	8008f4e <osThreadNew+0x146>
          hTask = NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f4e:	697b      	ldr	r3, [r7, #20]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3738      	adds	r7, #56	; 0x38
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	200006f0 	.word	0x200006f0

08008f5c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f62:	f3ef 8305 	mrs	r3, IPSR
 8008f66:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f68:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10f      	bne.n	8008f8e <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f72:	607b      	str	r3, [r7, #4]
  return(result);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d109      	bne.n	8008f8e <osThreadGetId+0x32>
 8008f7a:	4b0a      	ldr	r3, [pc, #40]	; (8008fa4 <osThreadGetId+0x48>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d108      	bne.n	8008f94 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f82:	f3ef 8311 	mrs	r3, BASEPRI
 8008f86:	603b      	str	r3, [r7, #0]
  return(result);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <osThreadGetId+0x38>
    id = NULL;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	60fb      	str	r3, [r7, #12]
 8008f92:	e002      	b.n	8008f9a <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8008f94:	f002 f9ec 	bl	800b370 <xTaskGetCurrentTaskHandle>
 8008f98:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	200006f0 	.word	0x200006f0

08008fa8 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b088      	sub	sp, #32
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fb4:	f3ef 8305 	mrs	r3, IPSR
 8008fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8008fba:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10f      	bne.n	8008fe0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d109      	bne.n	8008fe0 <osThreadSuspend+0x38>
 8008fcc:	4b0f      	ldr	r3, [pc, #60]	; (800900c <osThreadSuspend+0x64>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d109      	bne.n	8008fe8 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fd4:	f3ef 8311 	mrs	r3, BASEPRI
 8008fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d003      	beq.n	8008fe8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8008fe0:	f06f 0305 	mvn.w	r3, #5
 8008fe4:	61fb      	str	r3, [r7, #28]
 8008fe6:	e00b      	b.n	8009000 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d103      	bne.n	8008ff6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8008fee:	f06f 0303 	mvn.w	r3, #3
 8008ff2:	61fb      	str	r3, [r7, #28]
 8008ff4:	e004      	b.n	8009000 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8008ffa:	69b8      	ldr	r0, [r7, #24]
 8008ffc:	f001 fbe0 	bl	800a7c0 <vTaskSuspend>
  }

  return (stat);
 8009000:	69fb      	ldr	r3, [r7, #28]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3720      	adds	r7, #32
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	200006f0 	.word	0x200006f0

08009010 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8009010:	b580      	push	{r7, lr}
 8009012:	b088      	sub	sp, #32
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800901c:	f3ef 8305 	mrs	r3, IPSR
 8009020:	617b      	str	r3, [r7, #20]
  return(result);
 8009022:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10f      	bne.n	8009048 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009028:	f3ef 8310 	mrs	r3, PRIMASK
 800902c:	613b      	str	r3, [r7, #16]
  return(result);
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <osThreadResume+0x38>
 8009034:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <osThreadResume+0x64>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b02      	cmp	r3, #2
 800903a:	d109      	bne.n	8009050 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800903c:	f3ef 8311 	mrs	r3, BASEPRI
 8009040:	60fb      	str	r3, [r7, #12]
  return(result);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <osThreadResume+0x40>
    stat = osErrorISR;
 8009048:	f06f 0305 	mvn.w	r3, #5
 800904c:	61fb      	str	r3, [r7, #28]
 800904e:	e00b      	b.n	8009068 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d103      	bne.n	800905e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8009056:	f06f 0303 	mvn.w	r3, #3
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	e004      	b.n	8009068 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 800905e:	2300      	movs	r3, #0
 8009060:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8009062:	69b8      	ldr	r0, [r7, #24]
 8009064:	f001 fc5e 	bl	800a924 <vTaskResume>
  }

  return (stat);
 8009068:	69fb      	ldr	r3, [r7, #28]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	200006f0 	.word	0x200006f0

08009078 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009080:	f3ef 8305 	mrs	r3, IPSR
 8009084:	613b      	str	r3, [r7, #16]
  return(result);
 8009086:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10f      	bne.n	80090ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800908c:	f3ef 8310 	mrs	r3, PRIMASK
 8009090:	60fb      	str	r3, [r7, #12]
  return(result);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d109      	bne.n	80090ac <osDelay+0x34>
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <osDelay+0x58>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b02      	cmp	r3, #2
 800909e:	d109      	bne.n	80090b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80090a0:	f3ef 8311 	mrs	r3, BASEPRI
 80090a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d003      	beq.n	80090b4 <osDelay+0x3c>
    stat = osErrorISR;
 80090ac:	f06f 0305 	mvn.w	r3, #5
 80090b0:	617b      	str	r3, [r7, #20]
 80090b2:	e007      	b.n	80090c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 fb4a 	bl	800a758 <vTaskDelay>
    }
  }

  return (stat);
 80090c4:	697b      	ldr	r3, [r7, #20]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	200006f0 	.word	0x200006f0

080090d4 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80090dc:	2300      	movs	r3, #0
 80090de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090e0:	f3ef 8305 	mrs	r3, IPSR
 80090e4:	617b      	str	r3, [r7, #20]
  return(result);
 80090e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d13d      	bne.n	8009168 <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ec:	f3ef 8310 	mrs	r3, PRIMASK
 80090f0:	613b      	str	r3, [r7, #16]
  return(result);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d137      	bne.n	8009168 <osEventFlagsNew+0x94>
 80090f8:	4b1e      	ldr	r3, [pc, #120]	; (8009174 <osEventFlagsNew+0xa0>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d105      	bne.n	800910c <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009100:	f3ef 8311 	mrs	r3, BASEPRI
 8009104:	60fb      	str	r3, [r7, #12]
  return(result);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d12d      	bne.n	8009168 <osEventFlagsNew+0x94>
    mem = -1;
 800910c:	f04f 33ff 	mov.w	r3, #4294967295
 8009110:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d015      	beq.n	8009144 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d006      	beq.n	800912e <osEventFlagsNew+0x5a>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	2b1f      	cmp	r3, #31
 8009126:	d902      	bls.n	800912e <osEventFlagsNew+0x5a>
        mem = 1;
 8009128:	2301      	movs	r3, #1
 800912a:	61bb      	str	r3, [r7, #24]
 800912c:	e00c      	b.n	8009148 <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d108      	bne.n	8009148 <osEventFlagsNew+0x74>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d104      	bne.n	8009148 <osEventFlagsNew+0x74>
          mem = 0;
 800913e:	2300      	movs	r3, #0
 8009140:	61bb      	str	r3, [r7, #24]
 8009142:	e001      	b.n	8009148 <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d106      	bne.n	800915c <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f9ae 	bl	80094b4 <xEventGroupCreateStatic>
 8009158:	61f8      	str	r0, [r7, #28]
 800915a:	e005      	b.n	8009168 <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d102      	bne.n	8009168 <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8009162:	f000 f9de 	bl	8009522 <xEventGroupCreate>
 8009166:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009168:	69fb      	ldr	r3, [r7, #28]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3720      	adds	r7, #32
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	200006f0 	.word	0x200006f0

08009178 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <osEventFlagsSet+0x1e>
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8009196:	f06f 0303 	mvn.w	r3, #3
 800919a:	61fb      	str	r3, [r7, #28]
 800919c:	e03a      	b.n	8009214 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800919e:	f3ef 8305 	mrs	r3, IPSR
 80091a2:	617b      	str	r3, [r7, #20]
  return(result);
 80091a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10f      	bne.n	80091ca <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091aa:	f3ef 8310 	mrs	r3, PRIMASK
 80091ae:	613b      	str	r3, [r7, #16]
  return(result);
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d109      	bne.n	80091ca <osEventFlagsSet+0x52>
 80091b6:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <osEventFlagsSet+0xa8>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d123      	bne.n	8009206 <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80091be:	f3ef 8311 	mrs	r3, BASEPRI
 80091c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d01d      	beq.n	8009206 <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80091ce:	f107 0308 	add.w	r3, r7, #8
 80091d2:	461a      	mov	r2, r3
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	69b8      	ldr	r0, [r7, #24]
 80091d8:	f000 fad4 	bl	8009784 <xEventGroupSetBitsFromISR>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 80091e2:	f06f 0302 	mvn.w	r3, #2
 80091e6:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 80091e8:	e013      	b.n	8009212 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00e      	beq.n	8009212 <osEventFlagsSet+0x9a>
 80091f4:	4b0b      	ldr	r3, [pc, #44]	; (8009224 <osEventFlagsSet+0xac>)
 80091f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009204:	e005      	b.n	8009212 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	69b8      	ldr	r0, [r7, #24]
 800920a:	f000 fa15 	bl	8009638 <xEventGroupSetBits>
 800920e:	61f8      	str	r0, [r7, #28]
 8009210:	e000      	b.n	8009214 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8009212:	bf00      	nop
  }

  return (rflags);
 8009214:	69fb      	ldr	r3, [r7, #28]
}
 8009216:	4618      	mov	r0, r3
 8009218:	3720      	adds	r7, #32
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	200006f0 	.word	0x200006f0
 8009224:	e000ed04 	.word	0xe000ed04

08009228 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d004      	beq.n	8009246 <osEventFlagsClear+0x1e>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009242:	2b00      	cmp	r3, #0
 8009244:	d003      	beq.n	800924e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8009246:	f06f 0303 	mvn.w	r3, #3
 800924a:	61fb      	str	r3, [r7, #28]
 800924c:	e029      	b.n	80092a2 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800924e:	f3ef 8305 	mrs	r3, IPSR
 8009252:	617b      	str	r3, [r7, #20]
  return(result);
 8009254:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10f      	bne.n	800927a <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800925a:	f3ef 8310 	mrs	r3, PRIMASK
 800925e:	613b      	str	r3, [r7, #16]
  return(result);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <osEventFlagsClear+0x52>
 8009266:	4b11      	ldr	r3, [pc, #68]	; (80092ac <osEventFlagsClear+0x84>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2b02      	cmp	r3, #2
 800926c:	d114      	bne.n	8009298 <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800926e:	f3ef 8311 	mrs	r3, BASEPRI
 8009272:	60fb      	str	r3, [r7, #12]
  return(result);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00e      	beq.n	8009298 <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800927a:	69b8      	ldr	r0, [r7, #24]
 800927c:	f000 f9b8 	bl	80095f0 <xEventGroupGetBitsFromISR>
 8009280:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8009282:	6839      	ldr	r1, [r7, #0]
 8009284:	69b8      	ldr	r0, [r7, #24]
 8009286:	f000 f99f 	bl	80095c8 <xEventGroupClearBitsFromISR>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d108      	bne.n	80092a2 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 8009290:	f06f 0302 	mvn.w	r3, #2
 8009294:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8009296:	e004      	b.n	80092a2 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	69b8      	ldr	r0, [r7, #24]
 800929c:	f000 f95b 	bl	8009556 <xEventGroupClearBits>
 80092a0:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80092a2:	69fb      	ldr	r3, [r7, #28]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3720      	adds	r7, #32
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	200006f0 	.word	0x200006f0

080092b0 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <osEventFlagsGet+0x18>
    rflags = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	61fb      	str	r3, [r7, #28]
 80092c6:	e01f      	b.n	8009308 <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c8:	f3ef 8305 	mrs	r3, IPSR
 80092cc:	617b      	str	r3, [r7, #20]
  return(result);
 80092ce:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d10f      	bne.n	80092f4 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092d4:	f3ef 8310 	mrs	r3, PRIMASK
 80092d8:	613b      	str	r3, [r7, #16]
  return(result);
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d109      	bne.n	80092f4 <osEventFlagsGet+0x44>
 80092e0:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <osEventFlagsGet+0x64>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d10a      	bne.n	80092fe <osEventFlagsGet+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092e8:	f3ef 8311 	mrs	r3, BASEPRI
 80092ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d004      	beq.n	80092fe <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80092f4:	69b8      	ldr	r0, [r7, #24]
 80092f6:	f000 f97b 	bl	80095f0 <xEventGroupGetBitsFromISR>
 80092fa:	61f8      	str	r0, [r7, #28]
 80092fc:	e004      	b.n	8009308 <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 80092fe:	2100      	movs	r1, #0
 8009300:	69b8      	ldr	r0, [r7, #24]
 8009302:	f000 f928 	bl	8009556 <xEventGroupClearBits>
 8009306:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 8009308:	69fb      	ldr	r3, [r7, #28]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3720      	adds	r7, #32
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	200006f0 	.word	0x200006f0

08009318 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009318:	b580      	push	{r7, lr}
 800931a:	b08a      	sub	sp, #40	; 0x28
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009320:	2300      	movs	r3, #0
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009324:	f3ef 8305 	mrs	r3, IPSR
 8009328:	613b      	str	r3, [r7, #16]
  return(result);
 800932a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 8085 	bne.w	800943c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009332:	f3ef 8310 	mrs	r3, PRIMASK
 8009336:	60fb      	str	r3, [r7, #12]
  return(result);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d17e      	bne.n	800943c <osMutexNew+0x124>
 800933e:	4b42      	ldr	r3, [pc, #264]	; (8009448 <osMutexNew+0x130>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d105      	bne.n	8009352 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009346:	f3ef 8311 	mrs	r3, BASEPRI
 800934a:	60bb      	str	r3, [r7, #8]
  return(result);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d174      	bne.n	800943c <osMutexNew+0x124>
    if (attr != NULL) {
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d003      	beq.n	8009360 <osMutexNew+0x48>
      type = attr->attr_bits;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	623b      	str	r3, [r7, #32]
 800935e:	e001      	b.n	8009364 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009364:	6a3b      	ldr	r3, [r7, #32]
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <osMutexNew+0x5c>
      rmtx = 1U;
 800936e:	2301      	movs	r3, #1
 8009370:	61fb      	str	r3, [r7, #28]
 8009372:	e001      	b.n	8009378 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009374:	2300      	movs	r3, #0
 8009376:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009378:	6a3b      	ldr	r3, [r7, #32]
 800937a:	f003 0308 	and.w	r3, r3, #8
 800937e:	2b00      	cmp	r3, #0
 8009380:	d15c      	bne.n	800943c <osMutexNew+0x124>
      mem = -1;
 8009382:	f04f 33ff 	mov.w	r3, #4294967295
 8009386:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d015      	beq.n	80093ba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d006      	beq.n	80093a4 <osMutexNew+0x8c>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	2b4f      	cmp	r3, #79	; 0x4f
 800939c:	d902      	bls.n	80093a4 <osMutexNew+0x8c>
          mem = 1;
 800939e:	2301      	movs	r3, #1
 80093a0:	61bb      	str	r3, [r7, #24]
 80093a2:	e00c      	b.n	80093be <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d108      	bne.n	80093be <osMutexNew+0xa6>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d104      	bne.n	80093be <osMutexNew+0xa6>
            mem = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61bb      	str	r3, [r7, #24]
 80093b8:	e001      	b.n	80093be <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d112      	bne.n	80093ea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d007      	beq.n	80093da <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	4619      	mov	r1, r3
 80093d0:	2004      	movs	r0, #4
 80093d2:	f000 fc11 	bl	8009bf8 <xQueueCreateMutexStatic>
 80093d6:	6278      	str	r0, [r7, #36]	; 0x24
 80093d8:	e016      	b.n	8009408 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	4619      	mov	r1, r3
 80093e0:	2001      	movs	r0, #1
 80093e2:	f000 fc09 	bl	8009bf8 <xQueueCreateMutexStatic>
 80093e6:	6278      	str	r0, [r7, #36]	; 0x24
 80093e8:	e00e      	b.n	8009408 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10b      	bne.n	8009408 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d004      	beq.n	8009400 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80093f6:	2004      	movs	r0, #4
 80093f8:	f000 fbe6 	bl	8009bc8 <xQueueCreateMutex>
 80093fc:	6278      	str	r0, [r7, #36]	; 0x24
 80093fe:	e003      	b.n	8009408 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8009400:	2001      	movs	r0, #1
 8009402:	f000 fbe1 	bl	8009bc8 <xQueueCreateMutex>
 8009406:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	2b00      	cmp	r3, #0
 800940c:	d00c      	beq.n	8009428 <osMutexNew+0x110>
        if (attr != NULL) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <osMutexNew+0x104>
          name = attr->name;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	617b      	str	r3, [r7, #20]
 800941a:	e001      	b.n	8009420 <osMutexNew+0x108>
        } else {
          name = NULL;
 800941c:	2300      	movs	r3, #0
 800941e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8009420:	6979      	ldr	r1, [r7, #20]
 8009422:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009424:	f000 ff8a 	bl	800a33c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800942a:	2b00      	cmp	r3, #0
 800942c:	d006      	beq.n	800943c <osMutexNew+0x124>
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800943e:	4618      	mov	r0, r3
 8009440:	3728      	adds	r7, #40	; 0x28
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	200006f0 	.word	0x200006f0

0800944c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	4a07      	ldr	r2, [pc, #28]	; (8009478 <vApplicationGetIdleTaskMemory+0x2c>)
 800945c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	4a06      	ldr	r2, [pc, #24]	; (800947c <vApplicationGetIdleTaskMemory+0x30>)
 8009462:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2280      	movs	r2, #128	; 0x80
 8009468:	601a      	str	r2, [r3, #0]
}
 800946a:	bf00      	nop
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	200006f4 	.word	0x200006f4
 800947c:	200007a0 	.word	0x200007a0

08009480 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a07      	ldr	r2, [pc, #28]	; (80094ac <vApplicationGetTimerTaskMemory+0x2c>)
 8009490:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	4a06      	ldr	r2, [pc, #24]	; (80094b0 <vApplicationGetTimerTaskMemory+0x30>)
 8009496:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800949e:	601a      	str	r2, [r3, #0]
}
 80094a0:	bf00      	nop
 80094a2:	3714      	adds	r7, #20
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	200009a0 	.word	0x200009a0
 80094b0:	20000a4c 	.word	0x20000a4c

080094b4 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10a      	bne.n	80094d8 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80094d8:	2320      	movs	r3, #32
 80094da:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2b20      	cmp	r3, #32
 80094e0:	d00a      	beq.n	80094f8 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	60fb      	str	r3, [r7, #12]
}
 80094f4:	bf00      	nop
 80094f6:	e7fe      	b.n	80094f6 <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	3304      	adds	r3, #4
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f94d 	bl	80097ac <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2201      	movs	r2, #1
 8009516:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8009518:	697b      	ldr	r3, [r7, #20]
	}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8009528:	2020      	movs	r0, #32
 800952a:	f002 fd95 	bl	800c058 <pvPortMalloc>
 800952e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f933 	bl	80097ac <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800954c:	687b      	ldr	r3, [r7, #4]
	}
 800954e:	4618      	mov	r0, r3
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d10a      	bne.n	8009580 <xEventGroupClearBits+0x2a>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	60fb      	str	r3, [r7, #12]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <xEventGroupClearBits+0x4a>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	60bb      	str	r3, [r7, #8]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80095a0:	f002 fc38 	bl	800be14 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	43db      	mvns	r3, r3
 80095b2:	401a      	ands	r2, r3
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80095b8:	f002 fc5c 	bl	800be74 <vPortExitCritical>

	return uxReturn;
 80095bc:	693b      	ldr	r3, [r7, #16]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 80095d2:	2300      	movs	r3, #0
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4804      	ldr	r0, [pc, #16]	; (80095ec <xEventGroupClearBitsFromISR+0x24>)
 80095da:	f002 facb 	bl	800bb74 <xTimerPendFunctionCallFromISR>
 80095de:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80095e0:	68fb      	ldr	r3, [r7, #12]
	}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	08009769 	.word	0x08009769

080095f0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b089      	sub	sp, #36	; 0x24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095fc:	f3ef 8211 	mrs	r2, BASEPRI
 8009600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009604:	f383 8811 	msr	BASEPRI, r3
 8009608:	f3bf 8f6f 	isb	sy
 800960c:	f3bf 8f4f 	dsb	sy
 8009610:	60fa      	str	r2, [r7, #12]
 8009612:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009614:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009616:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009628:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800962a:	697b      	ldr	r3, [r7, #20]
}
 800962c:	4618      	mov	r0, r3
 800962e:	3724      	adds	r7, #36	; 0x24
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08e      	sub	sp, #56	; 0x38
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009642:	2300      	movs	r3, #0
 8009644:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800964a:	2300      	movs	r3, #0
 800964c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10a      	bne.n	800966a <xEventGroupSetBits+0x32>
	__asm volatile
 8009654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009658:	f383 8811 	msr	BASEPRI, r3
 800965c:	f3bf 8f6f 	isb	sy
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	613b      	str	r3, [r7, #16]
}
 8009666:	bf00      	nop
 8009668:	e7fe      	b.n	8009668 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00a      	beq.n	800968a <xEventGroupSetBits+0x52>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800968a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968c:	3304      	adds	r3, #4
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009692:	3308      	adds	r3, #8
 8009694:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009696:	f001 fa13 	bl	800aac0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	431a      	orrs	r2, r3
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80096ac:	e03c      	b.n	8009728 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80096ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80096b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80096ba:	2300      	movs	r3, #0
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80096c4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80096cc:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d108      	bne.n	80096ea <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	4013      	ands	r3, r2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80096e4:	2301      	movs	r3, #1
 80096e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096e8:	e008      	b.n	80096fc <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	4013      	ands	r3, r2
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d101      	bne.n	80096fc <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80096f8:	2301      	movs	r3, #1
 80096fa:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80096fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d010      	beq.n	8009724 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800970c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	4313      	orrs	r3, r2
 8009712:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800971c:	4619      	mov	r1, r3
 800971e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009720:	f001 fc60 	bl	800afe4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	429a      	cmp	r2, r3
 800972e:	d1be      	bne.n	80096ae <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	43db      	mvns	r3, r3
 8009738:	401a      	ands	r2, r3
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800973e:	f001 f9cd 	bl	800aadc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009744:	681b      	ldr	r3, [r3, #0]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3738      	adds	r7, #56	; 0x38
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff ff6c 	bl	8009638 <xEventGroupSetBits>
}
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7ff feee 	bl	8009556 <xEventGroupClearBits>
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
	...

08009784 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009784:	b580      	push	{r7, lr}
 8009786:	b086      	sub	sp, #24
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	68f9      	ldr	r1, [r7, #12]
 8009796:	4804      	ldr	r0, [pc, #16]	; (80097a8 <xEventGroupSetBitsFromISR+0x24>)
 8009798:	f002 f9ec 	bl	800bb74 <xTimerPendFunctionCallFromISR>
 800979c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800979e:	697b      	ldr	r3, [r7, #20]
	}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	0800974f 	.word	0x0800974f

080097ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f103 0208 	add.w	r2, r3, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f04f 32ff 	mov.w	r2, #4294967295
 80097c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f103 0208 	add.w	r2, r3, #8
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f103 0208 	add.w	r2, r3, #8
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097e0:	bf00      	nop
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097fa:	bf00      	nop
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009806:	b480      	push	{r7}
 8009808:	b085      	sub	sp, #20
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68fa      	ldr	r2, [r7, #12]
 800981a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	689a      	ldr	r2, [r3, #8]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	601a      	str	r2, [r3, #0]
}
 8009842:	bf00      	nop
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800984e:	b480      	push	{r7}
 8009850:	b085      	sub	sp, #20
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d103      	bne.n	800986e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e00c      	b.n	8009888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3308      	adds	r3, #8
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e002      	b.n	800987c <vListInsert+0x2e>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	429a      	cmp	r2, r3
 8009886:	d2f6      	bcs.n	8009876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	683a      	ldr	r2, [r7, #0]
 80098a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	1c5a      	adds	r2, r3, #1
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	601a      	str	r2, [r3, #0]
}
 80098b4:	bf00      	nop
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	687a      	ldr	r2, [r7, #4]
 80098d4:	6892      	ldr	r2, [r2, #8]
 80098d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	6852      	ldr	r2, [r2, #4]
 80098e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d103      	bne.n	80098f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	1e5a      	subs	r2, r3, #1
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <xQueueGenericReset+0x2a>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	60bb      	str	r3, [r7, #8]
}
 800993a:	bf00      	nop
 800993c:	e7fe      	b.n	800993c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800993e:	f002 fa69 	bl	800be14 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800994a:	68f9      	ldr	r1, [r7, #12]
 800994c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800994e:	fb01 f303 	mul.w	r3, r1, r3
 8009952:	441a      	add	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996e:	3b01      	subs	r3, #1
 8009970:	68f9      	ldr	r1, [r7, #12]
 8009972:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009974:	fb01 f303 	mul.w	r3, r1, r3
 8009978:	441a      	add	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	22ff      	movs	r2, #255	; 0xff
 8009982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	22ff      	movs	r2, #255	; 0xff
 800998a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d114      	bne.n	80099be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01a      	beq.n	80099d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3310      	adds	r3, #16
 80099a0:	4618      	mov	r0, r3
 80099a2:	f001 fabb 	bl	800af1c <xTaskRemoveFromEventList>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d012      	beq.n	80099d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099ac:	4b0c      	ldr	r3, [pc, #48]	; (80099e0 <xQueueGenericReset+0xcc>)
 80099ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b2:	601a      	str	r2, [r3, #0]
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	e009      	b.n	80099d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	3310      	adds	r3, #16
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fef2 	bl	80097ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3324      	adds	r3, #36	; 0x24
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff feed 	bl	80097ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099d2:	f002 fa4f 	bl	800be74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099d6:	2301      	movs	r3, #1
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	e000ed04 	.word	0xe000ed04

080099e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08e      	sub	sp, #56	; 0x38
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <xQueueGenericCreateStatic+0x52>
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <xQueueGenericCreateStatic+0x56>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <xQueueGenericCreateStatic+0x58>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	623b      	str	r3, [r7, #32]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <xQueueGenericCreateStatic+0x7e>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <xQueueGenericCreateStatic+0x82>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e000      	b.n	8009a68 <xQueueGenericCreateStatic+0x84>
 8009a66:	2300      	movs	r3, #0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	61fb      	str	r3, [r7, #28]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a82:	2350      	movs	r3, #80	; 0x50
 8009a84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b50      	cmp	r3, #80	; 0x50
 8009a8a:	d00a      	beq.n	8009aa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	61bb      	str	r3, [r7, #24]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00d      	beq.n	8009ac8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ab4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	4613      	mov	r3, r2
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	68b9      	ldr	r1, [r7, #8]
 8009ac2:	68f8      	ldr	r0, [r7, #12]
 8009ac4:	f000 f843 	bl	8009b4e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3730      	adds	r7, #48	; 0x30
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b08a      	sub	sp, #40	; 0x28
 8009ad6:	af02      	add	r7, sp, #8
 8009ad8:	60f8      	str	r0, [r7, #12]
 8009ada:	60b9      	str	r1, [r7, #8]
 8009adc:	4613      	mov	r3, r2
 8009ade:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10a      	bne.n	8009afc <xQueueGenericCreate+0x2a>
	__asm volatile
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	613b      	str	r3, [r7, #16]
}
 8009af8:	bf00      	nop
 8009afa:	e7fe      	b.n	8009afa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d102      	bne.n	8009b08 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	61fb      	str	r3, [r7, #28]
 8009b06:	e004      	b.n	8009b12 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	fb02 f303 	mul.w	r3, r2, r3
 8009b10:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	3350      	adds	r3, #80	; 0x50
 8009b16:	4618      	mov	r0, r3
 8009b18:	f002 fa9e 	bl	800c058 <pvPortMalloc>
 8009b1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00f      	beq.n	8009b44 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	3350      	adds	r3, #80	; 0x50
 8009b28:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b32:	79fa      	ldrb	r2, [r7, #7]
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	68b9      	ldr	r1, [r7, #8]
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f000 f805 	bl	8009b4e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009b44:	69bb      	ldr	r3, [r7, #24]
	}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3720      	adds	r7, #32
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b084      	sub	sp, #16
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	60f8      	str	r0, [r7, #12]
 8009b56:	60b9      	str	r1, [r7, #8]
 8009b58:	607a      	str	r2, [r7, #4]
 8009b5a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d103      	bne.n	8009b6a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	69ba      	ldr	r2, [r7, #24]
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	e002      	b.n	8009b70 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b7c:	2101      	movs	r1, #1
 8009b7e:	69b8      	ldr	r0, [r7, #24]
 8009b80:	f7ff fec8 	bl	8009914 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00e      	beq.n	8009bc0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f838 	bl	8009c30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	617b      	str	r3, [r7, #20]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	6939      	ldr	r1, [r7, #16]
 8009be0:	6978      	ldr	r0, [r7, #20]
 8009be2:	f7ff ff76 	bl	8009ad2 <xQueueGenericCreate>
 8009be6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f7ff ffd3 	bl	8009b94 <prvInitialiseMutex>

		return pxNewQueue;
 8009bee:	68fb      	ldr	r3, [r7, #12]
	}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b088      	sub	sp, #32
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	4603      	mov	r3, r0
 8009c00:	6039      	str	r1, [r7, #0]
 8009c02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c04:	2301      	movs	r3, #1
 8009c06:	617b      	str	r3, [r7, #20]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	9300      	str	r3, [sp, #0]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2200      	movs	r2, #0
 8009c14:	6939      	ldr	r1, [r7, #16]
 8009c16:	6978      	ldr	r0, [r7, #20]
 8009c18:	f7ff fee4 	bl	80099e4 <xQueueGenericCreateStatic>
 8009c1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff ffb8 	bl	8009b94 <prvInitialiseMutex>

		return pxNewQueue;
 8009c24:	68fb      	ldr	r3, [r7, #12]
	}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3718      	adds	r7, #24
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08e      	sub	sp, #56	; 0x38
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
 8009c3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <xQueueGenericSend+0x32>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d103      	bne.n	8009c70 <xQueueGenericSend+0x40>
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <xQueueGenericSend+0x44>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e000      	b.n	8009c76 <xQueueGenericSend+0x46>
 8009c74:	2300      	movs	r3, #0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d10a      	bne.n	8009c90 <xQueueGenericSend+0x60>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c8c:	bf00      	nop
 8009c8e:	e7fe      	b.n	8009c8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d103      	bne.n	8009c9e <xQueueGenericSend+0x6e>
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d101      	bne.n	8009ca2 <xQueueGenericSend+0x72>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e000      	b.n	8009ca4 <xQueueGenericSend+0x74>
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d10a      	bne.n	8009cbe <xQueueGenericSend+0x8e>
	__asm volatile
 8009ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cac:	f383 8811 	msr	BASEPRI, r3
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	623b      	str	r3, [r7, #32]
}
 8009cba:	bf00      	nop
 8009cbc:	e7fe      	b.n	8009cbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cbe:	f001 fb67 	bl	800b390 <xTaskGetSchedulerState>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d102      	bne.n	8009cce <xQueueGenericSend+0x9e>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <xQueueGenericSend+0xa2>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <xQueueGenericSend+0xa4>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d10a      	bne.n	8009cee <xQueueGenericSend+0xbe>
	__asm volatile
 8009cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cdc:	f383 8811 	msr	BASEPRI, r3
 8009ce0:	f3bf 8f6f 	isb	sy
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	61fb      	str	r3, [r7, #28]
}
 8009cea:	bf00      	nop
 8009cec:	e7fe      	b.n	8009cec <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cee:	f002 f891 	bl	800be14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d302      	bcc.n	8009d04 <xQueueGenericSend+0xd4>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d129      	bne.n	8009d58 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d0a:	f000 fa07 	bl	800a11c <prvCopyDataToQueue>
 8009d0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d010      	beq.n	8009d3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	3324      	adds	r3, #36	; 0x24
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f001 f8fd 	bl	800af1c <xTaskRemoveFromEventList>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d013      	beq.n	8009d50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d28:	4b3f      	ldr	r3, [pc, #252]	; (8009e28 <xQueueGenericSend+0x1f8>)
 8009d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	f3bf 8f4f 	dsb	sy
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	e00a      	b.n	8009d50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d40:	4b39      	ldr	r3, [pc, #228]	; (8009e28 <xQueueGenericSend+0x1f8>)
 8009d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d50:	f002 f890 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e063      	b.n	8009e20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d5e:	f002 f889 	bl	800be74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	e05c      	b.n	8009e20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d6c:	f107 0314 	add.w	r3, r7, #20
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 f999 	bl	800b0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d76:	2301      	movs	r3, #1
 8009d78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d7a:	f002 f87b 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d7e:	f000 fe9f 	bl	800aac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d82:	f002 f847 	bl	800be14 <vPortEnterCritical>
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d8c:	b25b      	sxtb	r3, r3
 8009d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d92:	d103      	bne.n	8009d9c <xQueueGenericSend+0x16c>
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	2200      	movs	r2, #0
 8009d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009da2:	b25b      	sxtb	r3, r3
 8009da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da8:	d103      	bne.n	8009db2 <xQueueGenericSend+0x182>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009db2:	f002 f85f 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009db6:	1d3a      	adds	r2, r7, #4
 8009db8:	f107 0314 	add.w	r3, r7, #20
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f001 f988 	bl	800b0d4 <xTaskCheckForTimeOut>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d124      	bne.n	8009e14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dcc:	f000 fa9e 	bl	800a30c <prvIsQueueFull>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d018      	beq.n	8009e08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	3310      	adds	r3, #16
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f001 f84c 	bl	800ae7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009de6:	f000 fa29 	bl	800a23c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009dea:	f000 fe77 	bl	800aadc <xTaskResumeAll>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f47f af7c 	bne.w	8009cee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009df6:	4b0c      	ldr	r3, [pc, #48]	; (8009e28 <xQueueGenericSend+0x1f8>)
 8009df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	e772      	b.n	8009cee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e0a:	f000 fa17 	bl	800a23c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e0e:	f000 fe65 	bl	800aadc <xTaskResumeAll>
 8009e12:	e76c      	b.n	8009cee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e16:	f000 fa11 	bl	800a23c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e1a:	f000 fe5f 	bl	800aadc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e1e:	2300      	movs	r3, #0
		}
	}
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3738      	adds	r7, #56	; 0x38
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	e000ed04 	.word	0xe000ed04

08009e2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08e      	sub	sp, #56	; 0x38
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d103      	bne.n	8009e68 <xQueueGenericSendFromISR+0x3c>
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <xQueueGenericSendFromISR+0x40>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <xQueueGenericSendFromISR+0x42>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10a      	bne.n	8009e88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	f383 8811 	msr	BASEPRI, r3
 8009e7a:	f3bf 8f6f 	isb	sy
 8009e7e:	f3bf 8f4f 	dsb	sy
 8009e82:	623b      	str	r3, [r7, #32]
}
 8009e84:	bf00      	nop
 8009e86:	e7fe      	b.n	8009e86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d103      	bne.n	8009e96 <xQueueGenericSendFromISR+0x6a>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d101      	bne.n	8009e9a <xQueueGenericSendFromISR+0x6e>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e000      	b.n	8009e9c <xQueueGenericSendFromISR+0x70>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10a      	bne.n	8009eb6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	61fb      	str	r3, [r7, #28]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009eb6:	f002 f88f 	bl	800bfd8 <vPortValidateInterruptPriority>
	__asm volatile
 8009eba:	f3ef 8211 	mrs	r2, BASEPRI
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	61ba      	str	r2, [r7, #24]
 8009ed0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d302      	bcc.n	8009ee8 <xQueueGenericSendFromISR+0xbc>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d12c      	bne.n	8009f42 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	68b9      	ldr	r1, [r7, #8]
 8009ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef8:	f000 f910 	bl	800a11c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009efc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f04:	d112      	bne.n	8009f2c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d016      	beq.n	8009f3c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	3324      	adds	r3, #36	; 0x24
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 f802 	bl	800af1c <xTaskRemoveFromEventList>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00e      	beq.n	8009f3c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00b      	beq.n	8009f3c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	e007      	b.n	8009f3c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f30:	3301      	adds	r3, #1
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	b25a      	sxtb	r2, r3
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009f40:	e001      	b.n	8009f46 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	637b      	str	r3, [r7, #52]	; 0x34
 8009f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	f383 8811 	msr	BASEPRI, r3
}
 8009f50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3738      	adds	r7, #56	; 0x38
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08c      	sub	sp, #48	; 0x30
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <xQueueReceive+0x30>
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
 8009f86:	623b      	str	r3, [r7, #32]
}
 8009f88:	bf00      	nop
 8009f8a:	e7fe      	b.n	8009f8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d103      	bne.n	8009f9a <xQueueReceive+0x3e>
 8009f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <xQueueReceive+0x42>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e000      	b.n	8009fa0 <xQueueReceive+0x44>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d10a      	bne.n	8009fba <xQueueReceive+0x5e>
	__asm volatile
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	61fb      	str	r3, [r7, #28]
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fba:	f001 f9e9 	bl	800b390 <xTaskGetSchedulerState>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d102      	bne.n	8009fca <xQueueReceive+0x6e>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <xQueueReceive+0x72>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <xQueueReceive+0x74>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10a      	bne.n	8009fea <xQueueReceive+0x8e>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	f383 8811 	msr	BASEPRI, r3
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f3bf 8f4f 	dsb	sy
 8009fe4:	61bb      	str	r3, [r7, #24]
}
 8009fe6:	bf00      	nop
 8009fe8:	e7fe      	b.n	8009fe8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009fea:	f001 ff13 	bl	800be14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d01f      	beq.n	800a03a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ffe:	f000 f8f7 	bl	800a1f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	1e5a      	subs	r2, r3, #1
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00f      	beq.n	800a032 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a014:	3310      	adds	r3, #16
 800a016:	4618      	mov	r0, r3
 800a018:	f000 ff80 	bl	800af1c <xTaskRemoveFromEventList>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d007      	beq.n	800a032 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a022:	4b3d      	ldr	r3, [pc, #244]	; (800a118 <xQueueReceive+0x1bc>)
 800a024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a032:	f001 ff1f 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 800a036:	2301      	movs	r3, #1
 800a038:	e069      	b.n	800a10e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d103      	bne.n	800a048 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a040:	f001 ff18 	bl	800be74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a044:	2300      	movs	r3, #0
 800a046:	e062      	b.n	800a10e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a04e:	f107 0310 	add.w	r3, r7, #16
 800a052:	4618      	mov	r0, r3
 800a054:	f001 f828 	bl	800b0a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a058:	2301      	movs	r3, #1
 800a05a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a05c:	f001 ff0a 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a060:	f000 fd2e 	bl	800aac0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a064:	f001 fed6 	bl	800be14 <vPortEnterCritical>
 800a068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a06a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a06e:	b25b      	sxtb	r3, r3
 800a070:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a074:	d103      	bne.n	800a07e <xQueueReceive+0x122>
 800a076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a084:	b25b      	sxtb	r3, r3
 800a086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08a:	d103      	bne.n	800a094 <xQueueReceive+0x138>
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a094:	f001 feee 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a098:	1d3a      	adds	r2, r7, #4
 800a09a:	f107 0310 	add.w	r3, r7, #16
 800a09e:	4611      	mov	r1, r2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 f817 	bl	800b0d4 <xTaskCheckForTimeOut>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d123      	bne.n	800a0f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ae:	f000 f917 	bl	800a2e0 <prvIsQueueEmpty>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d017      	beq.n	800a0e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ba:	3324      	adds	r3, #36	; 0x24
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fedb 	bl	800ae7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a0c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0c8:	f000 f8b8 	bl	800a23c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a0cc:	f000 fd06 	bl	800aadc <xTaskResumeAll>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d189      	bne.n	8009fea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a0d6:	4b10      	ldr	r3, [pc, #64]	; (800a118 <xQueueReceive+0x1bc>)
 800a0d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	e780      	b.n	8009fea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ea:	f000 f8a7 	bl	800a23c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a0ee:	f000 fcf5 	bl	800aadc <xTaskResumeAll>
 800a0f2:	e77a      	b.n	8009fea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0f6:	f000 f8a1 	bl	800a23c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a0fa:	f000 fcef 	bl	800aadc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a100:	f000 f8ee 	bl	800a2e0 <prvIsQueueEmpty>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	f43f af6f 	beq.w	8009fea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a10c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3730      	adds	r7, #48	; 0x30
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	e000ed04 	.word	0xe000ed04

0800a11c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b086      	sub	sp, #24
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a130:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10d      	bne.n	800a156 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d14d      	bne.n	800a1de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	4618      	mov	r0, r3
 800a148:	f001 f940 	bl	800b3cc <xTaskPriorityDisinherit>
 800a14c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	605a      	str	r2, [r3, #4]
 800a154:	e043      	b.n	800a1de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d119      	bne.n	800a190 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6898      	ldr	r0, [r3, #8]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a164:	461a      	mov	r2, r3
 800a166:	68b9      	ldr	r1, [r7, #8]
 800a168:	f003 f880 	bl	800d26c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a174:	441a      	add	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	689a      	ldr	r2, [r3, #8]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	429a      	cmp	r2, r3
 800a184:	d32b      	bcc.n	800a1de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	609a      	str	r2, [r3, #8]
 800a18e:	e026      	b.n	800a1de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68d8      	ldr	r0, [r3, #12]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a198:	461a      	mov	r2, r3
 800a19a:	68b9      	ldr	r1, [r7, #8]
 800a19c:	f003 f866 	bl	800d26c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68da      	ldr	r2, [r3, #12]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a8:	425b      	negs	r3, r3
 800a1aa:	441a      	add	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	68da      	ldr	r2, [r3, #12]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d207      	bcs.n	800a1cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	441a      	add	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d105      	bne.n	800a1de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	3b01      	subs	r3, #1
 800a1dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	1c5a      	adds	r2, r3, #1
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1e6:	697b      	ldr	r3, [r7, #20]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d018      	beq.n	800a234 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	441a      	add	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d303      	bcc.n	800a224 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	68d9      	ldr	r1, [r3, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	461a      	mov	r2, r3
 800a22e:	6838      	ldr	r0, [r7, #0]
 800a230:	f003 f81c 	bl	800d26c <memcpy>
	}
}
 800a234:	bf00      	nop
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a244:	f001 fde6 	bl	800be14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a24e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a250:	e011      	b.n	800a276 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	2b00      	cmp	r3, #0
 800a258:	d012      	beq.n	800a280 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3324      	adds	r3, #36	; 0x24
 800a25e:	4618      	mov	r0, r3
 800a260:	f000 fe5c 	bl	800af1c <xTaskRemoveFromEventList>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a26a:	f000 ff95 	bl	800b198 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	3b01      	subs	r3, #1
 800a272:	b2db      	uxtb	r3, r3
 800a274:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dce9      	bgt.n	800a252 <prvUnlockQueue+0x16>
 800a27e:	e000      	b.n	800a282 <prvUnlockQueue+0x46>
					break;
 800a280:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	22ff      	movs	r2, #255	; 0xff
 800a286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a28a:	f001 fdf3 	bl	800be74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a28e:	f001 fdc1 	bl	800be14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a298:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a29a:	e011      	b.n	800a2c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d012      	beq.n	800a2ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3310      	adds	r3, #16
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 fe37 	bl	800af1c <xTaskRemoveFromEventList>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d001      	beq.n	800a2b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2b4:	f000 ff70 	bl	800b198 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2b8:	7bbb      	ldrb	r3, [r7, #14]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	b2db      	uxtb	r3, r3
 800a2be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dce9      	bgt.n	800a29c <prvUnlockQueue+0x60>
 800a2c8:	e000      	b.n	800a2cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	22ff      	movs	r2, #255	; 0xff
 800a2d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2d4:	f001 fdce 	bl	800be74 <vPortExitCritical>
}
 800a2d8:	bf00      	nop
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}

0800a2e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2e8:	f001 fd94 	bl	800be14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d102      	bne.n	800a2fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	e001      	b.n	800a2fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2fe:	f001 fdb9 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800a302:	68fb      	ldr	r3, [r7, #12]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3710      	adds	r7, #16
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a314:	f001 fd7e 	bl	800be14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a320:	429a      	cmp	r2, r3
 800a322:	d102      	bne.n	800a32a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a324:	2301      	movs	r3, #1
 800a326:	60fb      	str	r3, [r7, #12]
 800a328:	e001      	b.n	800a32e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a32e:	f001 fda1 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800a332:	68fb      	ldr	r3, [r7, #12]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	e014      	b.n	800a376 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a34c:	4a0f      	ldr	r2, [pc, #60]	; (800a38c <vQueueAddToRegistry+0x50>)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d10b      	bne.n	800a370 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a358:	490c      	ldr	r1, [pc, #48]	; (800a38c <vQueueAddToRegistry+0x50>)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a362:	4a0a      	ldr	r2, [pc, #40]	; (800a38c <vQueueAddToRegistry+0x50>)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	4413      	add	r3, r2
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a36e:	e006      	b.n	800a37e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	3301      	adds	r3, #1
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b07      	cmp	r3, #7
 800a37a:	d9e7      	bls.n	800a34c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a37c:	bf00      	nop
 800a37e:	bf00      	nop
 800a380:	3714      	adds	r7, #20
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	20000e4c 	.word	0x20000e4c

0800a390 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	60f8      	str	r0, [r7, #12]
 800a398:	60b9      	str	r1, [r7, #8]
 800a39a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3a0:	f001 fd38 	bl	800be14 <vPortEnterCritical>
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3aa:	b25b      	sxtb	r3, r3
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b0:	d103      	bne.n	800a3ba <vQueueWaitForMessageRestricted+0x2a>
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3c0:	b25b      	sxtb	r3, r3
 800a3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c6:	d103      	bne.n	800a3d0 <vQueueWaitForMessageRestricted+0x40>
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3d0:	f001 fd50 	bl	800be74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d106      	bne.n	800a3ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	3324      	adds	r3, #36	; 0x24
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fd6d 	bl	800aec4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a3ea:	6978      	ldr	r0, [r7, #20]
 800a3ec:	f7ff ff26 	bl	800a23c <prvUnlockQueue>
	}
 800a3f0:	bf00      	nop
 800a3f2:	3718      	adds	r7, #24
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08e      	sub	sp, #56	; 0x38
 800a3fc:	af04      	add	r7, sp, #16
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10a      	bne.n	800a422 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a410:	f383 8811 	msr	BASEPRI, r3
 800a414:	f3bf 8f6f 	isb	sy
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	623b      	str	r3, [r7, #32]
}
 800a41e:	bf00      	nop
 800a420:	e7fe      	b.n	800a420 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xTaskCreateStatic+0x46>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	61fb      	str	r3, [r7, #28]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a43e:	23ac      	movs	r3, #172	; 0xac
 800a440:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2bac      	cmp	r3, #172	; 0xac
 800a446:	d00a      	beq.n	800a45e <xTaskCreateStatic+0x66>
	__asm volatile
 800a448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	61bb      	str	r3, [r7, #24]
}
 800a45a:	bf00      	nop
 800a45c:	e7fe      	b.n	800a45c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	2b00      	cmp	r3, #0
 800a462:	d01e      	beq.n	800a4a2 <xTaskCreateStatic+0xaa>
 800a464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a466:	2b00      	cmp	r3, #0
 800a468:	d01b      	beq.n	800a4a2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a46c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a472:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	2202      	movs	r2, #2
 800a478:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a47c:	2300      	movs	r3, #0
 800a47e:	9303      	str	r3, [sp, #12]
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	9302      	str	r3, [sp, #8]
 800a484:	f107 0314 	add.w	r3, r7, #20
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	68b9      	ldr	r1, [r7, #8]
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f000 f851 	bl	800a53c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a49a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a49c:	f000 f8ec 	bl	800a678 <prvAddNewTaskToReadyList>
 800a4a0:	e001      	b.n	800a4a6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a4a6:	697b      	ldr	r3, [r7, #20]
	}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3728      	adds	r7, #40	; 0x28
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08c      	sub	sp, #48	; 0x30
 800a4b4:	af04      	add	r7, sp, #16
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	60b9      	str	r1, [r7, #8]
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	4613      	mov	r3, r2
 800a4be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4c0:	88fb      	ldrh	r3, [r7, #6]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f001 fdc7 	bl	800c058 <pvPortMalloc>
 800a4ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00e      	beq.n	800a4f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a4d2:	20ac      	movs	r0, #172	; 0xac
 800a4d4:	f001 fdc0 	bl	800c058 <pvPortMalloc>
 800a4d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d003      	beq.n	800a4e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	631a      	str	r2, [r3, #48]	; 0x30
 800a4e6:	e005      	b.n	800a4f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a4e8:	6978      	ldr	r0, [r7, #20]
 800a4ea:	f001 fe79 	bl	800c1e0 <vPortFree>
 800a4ee:	e001      	b.n	800a4f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d017      	beq.n	800a52a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a502:	88fa      	ldrh	r2, [r7, #6]
 800a504:	2300      	movs	r3, #0
 800a506:	9303      	str	r3, [sp, #12]
 800a508:	69fb      	ldr	r3, [r7, #28]
 800a50a:	9302      	str	r3, [sp, #8]
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	9301      	str	r3, [sp, #4]
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	68b9      	ldr	r1, [r7, #8]
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f000 f80f 	bl	800a53c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a51e:	69f8      	ldr	r0, [r7, #28]
 800a520:	f000 f8aa 	bl	800a678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a524:	2301      	movs	r3, #1
 800a526:	61bb      	str	r3, [r7, #24]
 800a528:	e002      	b.n	800a530 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a52a:	f04f 33ff 	mov.w	r3, #4294967295
 800a52e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a530:	69bb      	ldr	r3, [r7, #24]
	}
 800a532:	4618      	mov	r0, r3
 800a534:	3720      	adds	r7, #32
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b088      	sub	sp, #32
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	009b      	lsls	r3, r3, #2
 800a552:	461a      	mov	r2, r3
 800a554:	21a5      	movs	r1, #165	; 0xa5
 800a556:	f002 fdb5 	bl	800d0c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a564:	3b01      	subs	r3, #1
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	f023 0307 	bic.w	r3, r3, #7
 800a572:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	617b      	str	r3, [r7, #20]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a594:	2300      	movs	r3, #0
 800a596:	61fb      	str	r3, [r7, #28]
 800a598:	e012      	b.n	800a5c0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	4413      	add	r3, r2
 800a5a0:	7819      	ldrb	r1, [r3, #0]
 800a5a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	3334      	adds	r3, #52	; 0x34
 800a5aa:	460a      	mov	r2, r1
 800a5ac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d006      	beq.n	800a5c8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	3301      	adds	r3, #1
 800a5be:	61fb      	str	r3, [r7, #28]
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	2b13      	cmp	r3, #19
 800a5c4:	d9e9      	bls.n	800a59a <prvInitialiseNewTask+0x5e>
 800a5c6:	e000      	b.n	800a5ca <prvInitialiseNewTask+0x8e>
		{
			break;
 800a5c8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d4:	2b37      	cmp	r3, #55	; 0x37
 800a5d6:	d901      	bls.n	800a5dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a5d8:	2337      	movs	r3, #55	; 0x37
 800a5da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7ff f8fa 	bl	80097ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fa:	3318      	adds	r3, #24
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff f8f5 	bl	80097ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a606:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a616:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	2200      	movs	r2, #0
 800a61c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	2200      	movs	r2, #0
 800a624:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	3358      	adds	r3, #88	; 0x58
 800a62c:	224c      	movs	r2, #76	; 0x4c
 800a62e:	2100      	movs	r1, #0
 800a630:	4618      	mov	r0, r3
 800a632:	f002 fd47 	bl	800d0c4 <memset>
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	4a0c      	ldr	r2, [pc, #48]	; (800a66c <prvInitialiseNewTask+0x130>)
 800a63a:	65da      	str	r2, [r3, #92]	; 0x5c
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	4a0c      	ldr	r2, [pc, #48]	; (800a670 <prvInitialiseNewTask+0x134>)
 800a640:	661a      	str	r2, [r3, #96]	; 0x60
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	4a0b      	ldr	r2, [pc, #44]	; (800a674 <prvInitialiseNewTask+0x138>)
 800a646:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a648:	683a      	ldr	r2, [r7, #0]
 800a64a:	68f9      	ldr	r1, [r7, #12]
 800a64c:	69b8      	ldr	r0, [r7, #24]
 800a64e:	f001 fab1 	bl	800bbb4 <pxPortInitialiseStack>
 800a652:	4602      	mov	r2, r0
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d002      	beq.n	800a664 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a662:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a664:	bf00      	nop
 800a666:	3720      	adds	r7, #32
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	200028d8 	.word	0x200028d8
 800a670:	20002940 	.word	0x20002940
 800a674:	200029a8 	.word	0x200029a8

0800a678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a680:	f001 fbc8 	bl	800be14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a684:	4b2d      	ldr	r3, [pc, #180]	; (800a73c <prvAddNewTaskToReadyList+0xc4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	3301      	adds	r3, #1
 800a68a:	4a2c      	ldr	r2, [pc, #176]	; (800a73c <prvAddNewTaskToReadyList+0xc4>)
 800a68c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a68e:	4b2c      	ldr	r3, [pc, #176]	; (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d109      	bne.n	800a6aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a696:	4a2a      	ldr	r2, [pc, #168]	; (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a69c:	4b27      	ldr	r3, [pc, #156]	; (800a73c <prvAddNewTaskToReadyList+0xc4>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d110      	bne.n	800a6c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6a4:	f000 fd9c 	bl	800b1e0 <prvInitialiseTaskLists>
 800a6a8:	e00d      	b.n	800a6c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6aa:	4b26      	ldr	r3, [pc, #152]	; (800a744 <prvAddNewTaskToReadyList+0xcc>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6b2:	4b23      	ldr	r3, [pc, #140]	; (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d802      	bhi.n	800a6c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6c0:	4a1f      	ldr	r2, [pc, #124]	; (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6c6:	4b20      	ldr	r3, [pc, #128]	; (800a748 <prvAddNewTaskToReadyList+0xd0>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	4a1e      	ldr	r2, [pc, #120]	; (800a748 <prvAddNewTaskToReadyList+0xd0>)
 800a6ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a6d0:	4b1d      	ldr	r3, [pc, #116]	; (800a748 <prvAddNewTaskToReadyList+0xd0>)
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6dc:	4b1b      	ldr	r3, [pc, #108]	; (800a74c <prvAddNewTaskToReadyList+0xd4>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d903      	bls.n	800a6ec <prvAddNewTaskToReadyList+0x74>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	4a18      	ldr	r2, [pc, #96]	; (800a74c <prvAddNewTaskToReadyList+0xd4>)
 800a6ea:	6013      	str	r3, [r2, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4a15      	ldr	r2, [pc, #84]	; (800a750 <prvAddNewTaskToReadyList+0xd8>)
 800a6fa:	441a      	add	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4619      	mov	r1, r3
 800a702:	4610      	mov	r0, r2
 800a704:	f7ff f87f 	bl	8009806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a708:	f001 fbb4 	bl	800be74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a70c:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <prvAddNewTaskToReadyList+0xcc>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00e      	beq.n	800a732 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a714:	4b0a      	ldr	r3, [pc, #40]	; (800a740 <prvAddNewTaskToReadyList+0xc8>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71e:	429a      	cmp	r2, r3
 800a720:	d207      	bcs.n	800a732 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a722:	4b0c      	ldr	r3, [pc, #48]	; (800a754 <prvAddNewTaskToReadyList+0xdc>)
 800a724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a728:	601a      	str	r2, [r3, #0]
 800a72a:	f3bf 8f4f 	dsb	sy
 800a72e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a732:	bf00      	nop
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20001360 	.word	0x20001360
 800a740:	20000e8c 	.word	0x20000e8c
 800a744:	2000136c 	.word	0x2000136c
 800a748:	2000137c 	.word	0x2000137c
 800a74c:	20001368 	.word	0x20001368
 800a750:	20000e90 	.word	0x20000e90
 800a754:	e000ed04 	.word	0xe000ed04

0800a758 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a760:	2300      	movs	r3, #0
 800a762:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d017      	beq.n	800a79a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a76a:	4b13      	ldr	r3, [pc, #76]	; (800a7b8 <vTaskDelay+0x60>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <vTaskDelay+0x30>
	__asm volatile
 800a772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a776:	f383 8811 	msr	BASEPRI, r3
 800a77a:	f3bf 8f6f 	isb	sy
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	60bb      	str	r3, [r7, #8]
}
 800a784:	bf00      	nop
 800a786:	e7fe      	b.n	800a786 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a788:	f000 f99a 	bl	800aac0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a78c:	2100      	movs	r1, #0
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fe8a 	bl	800b4a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a794:	f000 f9a2 	bl	800aadc <xTaskResumeAll>
 800a798:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d107      	bne.n	800a7b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a7a0:	4b06      	ldr	r3, [pc, #24]	; (800a7bc <vTaskDelay+0x64>)
 800a7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a6:	601a      	str	r2, [r3, #0]
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7b0:	bf00      	nop
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	20001388 	.word	0x20001388
 800a7bc:	e000ed04 	.word	0xe000ed04

0800a7c0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a7c8:	f001 fb24 	bl	800be14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d102      	bne.n	800a7d8 <vTaskSuspend+0x18>
 800a7d2:	4b30      	ldr	r3, [pc, #192]	; (800a894 <vTaskSuspend+0xd4>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	e000      	b.n	800a7da <vTaskSuspend+0x1a>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	3304      	adds	r3, #4
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff f86d 	bl	80098c0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d004      	beq.n	800a7f8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	3318      	adds	r3, #24
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff f864 	bl	80098c0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4826      	ldr	r0, [pc, #152]	; (800a898 <vTaskSuspend+0xd8>)
 800a800:	f7ff f801 	bl	8009806 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800a80a:	b2db      	uxtb	r3, r3
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d103      	bne.n	800a818 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a818:	f001 fb2c 	bl	800be74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a81c:	4b1f      	ldr	r3, [pc, #124]	; (800a89c <vTaskSuspend+0xdc>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d005      	beq.n	800a830 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a824:	f001 faf6 	bl	800be14 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a828:	f000 fd7c 	bl	800b324 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a82c:	f001 fb22 	bl	800be74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a830:	4b18      	ldr	r3, [pc, #96]	; (800a894 <vTaskSuspend+0xd4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	429a      	cmp	r2, r3
 800a838:	d127      	bne.n	800a88a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800a83a:	4b18      	ldr	r3, [pc, #96]	; (800a89c <vTaskSuspend+0xdc>)
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d017      	beq.n	800a872 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a842:	4b17      	ldr	r3, [pc, #92]	; (800a8a0 <vTaskSuspend+0xe0>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <vTaskSuspend+0xa0>
	__asm volatile
 800a84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	60bb      	str	r3, [r7, #8]
}
 800a85c:	bf00      	nop
 800a85e:	e7fe      	b.n	800a85e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800a860:	4b10      	ldr	r3, [pc, #64]	; (800a8a4 <vTaskSuspend+0xe4>)
 800a862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a870:	e00b      	b.n	800a88a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a872:	4b09      	ldr	r3, [pc, #36]	; (800a898 <vTaskSuspend+0xd8>)
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	4b0c      	ldr	r3, [pc, #48]	; (800a8a8 <vTaskSuspend+0xe8>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d103      	bne.n	800a886 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800a87e:	4b05      	ldr	r3, [pc, #20]	; (800a894 <vTaskSuspend+0xd4>)
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]
	}
 800a884:	e001      	b.n	800a88a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800a886:	f000 fa95 	bl	800adb4 <vTaskSwitchContext>
	}
 800a88a:	bf00      	nop
 800a88c:	3710      	adds	r7, #16
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	20000e8c 	.word	0x20000e8c
 800a898:	2000134c 	.word	0x2000134c
 800a89c:	2000136c 	.word	0x2000136c
 800a8a0:	20001388 	.word	0x20001388
 800a8a4:	e000ed04 	.word	0xe000ed04
 800a8a8:	20001360 	.word	0x20001360

0800a8ac <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10a      	bne.n	800a8d8 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	60fb      	str	r3, [r7, #12]
}
 800a8d4:	bf00      	nop
 800a8d6:	e7fe      	b.n	800a8d6 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	4a0f      	ldr	r2, [pc, #60]	; (800a91c <prvTaskIsTaskSuspended+0x70>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d101      	bne.n	800a8e6 <prvTaskIsTaskSuspended+0x3a>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e000      	b.n	800a8e8 <prvTaskIsTaskSuspended+0x3c>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00f      	beq.n	800a90c <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f0:	4a0b      	ldr	r2, [pc, #44]	; (800a920 <prvTaskIsTaskSuspended+0x74>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d00a      	beq.n	800a90c <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <prvTaskIsTaskSuspended+0x56>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <prvTaskIsTaskSuspended+0x58>
 800a902:	2300      	movs	r3, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 800a908:	2301      	movs	r3, #1
 800a90a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a90c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a90e:	4618      	mov	r0, r3
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	2000134c 	.word	0x2000134c
 800a920:	20001320 	.word	0x20001320

0800a924 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10a      	bne.n	800a94c <vTaskResume+0x28>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	60bb      	str	r3, [r7, #8]
}
 800a948:	bf00      	nop
 800a94a:	e7fe      	b.n	800a94a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d03a      	beq.n	800a9c8 <vTaskResume+0xa4>
 800a952:	4b1f      	ldr	r3, [pc, #124]	; (800a9d0 <vTaskResume+0xac>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d035      	beq.n	800a9c8 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800a95c:	f001 fa5a 	bl	800be14 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f7ff ffa3 	bl	800a8ac <prvTaskIsTaskSuspended>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d02b      	beq.n	800a9c4 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3304      	adds	r3, #4
 800a970:	4618      	mov	r0, r3
 800a972:	f7fe ffa5 	bl	80098c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97a:	4b16      	ldr	r3, [pc, #88]	; (800a9d4 <vTaskResume+0xb0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d903      	bls.n	800a98a <vTaskResume+0x66>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	4a13      	ldr	r2, [pc, #76]	; (800a9d4 <vTaskResume+0xb0>)
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98e:	4613      	mov	r3, r2
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	4413      	add	r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4a10      	ldr	r2, [pc, #64]	; (800a9d8 <vTaskResume+0xb4>)
 800a998:	441a      	add	r2, r3
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	3304      	adds	r3, #4
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f7fe ff30 	bl	8009806 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9aa:	4b09      	ldr	r3, [pc, #36]	; (800a9d0 <vTaskResume+0xac>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d307      	bcc.n	800a9c4 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a9b4:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <vTaskResume+0xb8>)
 800a9b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a9c4:	f001 fa56 	bl	800be74 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9c8:	bf00      	nop
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	20000e8c 	.word	0x20000e8c
 800a9d4:	20001368 	.word	0x20001368
 800a9d8:	20000e90 	.word	0x20000e90
 800a9dc:	e000ed04 	.word	0xe000ed04

0800a9e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08a      	sub	sp, #40	; 0x28
 800a9e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9ee:	463a      	mov	r2, r7
 800a9f0:	1d39      	adds	r1, r7, #4
 800a9f2:	f107 0308 	add.w	r3, r7, #8
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fe fd28 	bl	800944c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	9202      	str	r2, [sp, #8]
 800aa04:	9301      	str	r3, [sp, #4]
 800aa06:	2300      	movs	r3, #0
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	460a      	mov	r2, r1
 800aa0e:	4924      	ldr	r1, [pc, #144]	; (800aaa0 <vTaskStartScheduler+0xc0>)
 800aa10:	4824      	ldr	r0, [pc, #144]	; (800aaa4 <vTaskStartScheduler+0xc4>)
 800aa12:	f7ff fcf1 	bl	800a3f8 <xTaskCreateStatic>
 800aa16:	4603      	mov	r3, r0
 800aa18:	4a23      	ldr	r2, [pc, #140]	; (800aaa8 <vTaskStartScheduler+0xc8>)
 800aa1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa1c:	4b22      	ldr	r3, [pc, #136]	; (800aaa8 <vTaskStartScheduler+0xc8>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d002      	beq.n	800aa2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa24:	2301      	movs	r3, #1
 800aa26:	617b      	str	r3, [r7, #20]
 800aa28:	e001      	b.n	800aa2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d102      	bne.n	800aa3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa34:	f000 fd8c 	bl	800b550 <xTimerCreateTimerTask>
 800aa38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d11b      	bne.n	800aa78 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	613b      	str	r3, [r7, #16]
}
 800aa52:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa54:	4b15      	ldr	r3, [pc, #84]	; (800aaac <vTaskStartScheduler+0xcc>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3358      	adds	r3, #88	; 0x58
 800aa5a:	4a15      	ldr	r2, [pc, #84]	; (800aab0 <vTaskStartScheduler+0xd0>)
 800aa5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa5e:	4b15      	ldr	r3, [pc, #84]	; (800aab4 <vTaskStartScheduler+0xd4>)
 800aa60:	f04f 32ff 	mov.w	r2, #4294967295
 800aa64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa66:	4b14      	ldr	r3, [pc, #80]	; (800aab8 <vTaskStartScheduler+0xd8>)
 800aa68:	2201      	movs	r2, #1
 800aa6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800aa6c:	4b13      	ldr	r3, [pc, #76]	; (800aabc <vTaskStartScheduler+0xdc>)
 800aa6e:	2200      	movs	r2, #0
 800aa70:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa72:	f001 f92d 	bl	800bcd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa76:	e00e      	b.n	800aa96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7e:	d10a      	bne.n	800aa96 <vTaskStartScheduler+0xb6>
	__asm volatile
 800aa80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa84:	f383 8811 	msr	BASEPRI, r3
 800aa88:	f3bf 8f6f 	isb	sy
 800aa8c:	f3bf 8f4f 	dsb	sy
 800aa90:	60fb      	str	r3, [r7, #12]
}
 800aa92:	bf00      	nop
 800aa94:	e7fe      	b.n	800aa94 <vTaskStartScheduler+0xb4>
}
 800aa96:	bf00      	nop
 800aa98:	3718      	adds	r7, #24
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800f224 	.word	0x0800f224
 800aaa4:	0800b1b1 	.word	0x0800b1b1
 800aaa8:	20001384 	.word	0x20001384
 800aaac:	20000e8c 	.word	0x20000e8c
 800aab0:	200000f4 	.word	0x200000f4
 800aab4:	20001380 	.word	0x20001380
 800aab8:	2000136c 	.word	0x2000136c
 800aabc:	20001364 	.word	0x20001364

0800aac0 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aac0:	b480      	push	{r7}
 800aac2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aac4:	4b04      	ldr	r3, [pc, #16]	; (800aad8 <vTaskSuspendAll+0x18>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3301      	adds	r3, #1
 800aaca:	4a03      	ldr	r2, [pc, #12]	; (800aad8 <vTaskSuspendAll+0x18>)
 800aacc:	6013      	str	r3, [r2, #0]
}
 800aace:	bf00      	nop
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	20001388 	.word	0x20001388

0800aadc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aaea:	4b42      	ldr	r3, [pc, #264]	; (800abf4 <xTaskResumeAll+0x118>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d10a      	bne.n	800ab08 <xTaskResumeAll+0x2c>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	603b      	str	r3, [r7, #0]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab08:	f001 f984 	bl	800be14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab0c:	4b39      	ldr	r3, [pc, #228]	; (800abf4 <xTaskResumeAll+0x118>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	4a38      	ldr	r2, [pc, #224]	; (800abf4 <xTaskResumeAll+0x118>)
 800ab14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab16:	4b37      	ldr	r3, [pc, #220]	; (800abf4 <xTaskResumeAll+0x118>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d162      	bne.n	800abe4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab1e:	4b36      	ldr	r3, [pc, #216]	; (800abf8 <xTaskResumeAll+0x11c>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d05e      	beq.n	800abe4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab26:	e02f      	b.n	800ab88 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ab28:	4b34      	ldr	r3, [pc, #208]	; (800abfc <xTaskResumeAll+0x120>)
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	68db      	ldr	r3, [r3, #12]
 800ab2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	3318      	adds	r3, #24
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7fe fec3 	bl	80098c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3304      	adds	r3, #4
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe febe 	bl	80098c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab48:	4b2d      	ldr	r3, [pc, #180]	; (800ac00 <xTaskResumeAll+0x124>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d903      	bls.n	800ab58 <xTaskResumeAll+0x7c>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab54:	4a2a      	ldr	r2, [pc, #168]	; (800ac00 <xTaskResumeAll+0x124>)
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4a27      	ldr	r2, [pc, #156]	; (800ac04 <xTaskResumeAll+0x128>)
 800ab66:	441a      	add	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	f7fe fe49 	bl	8009806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab78:	4b23      	ldr	r3, [pc, #140]	; (800ac08 <xTaskResumeAll+0x12c>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d302      	bcc.n	800ab88 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ab82:	4b22      	ldr	r3, [pc, #136]	; (800ac0c <xTaskResumeAll+0x130>)
 800ab84:	2201      	movs	r2, #1
 800ab86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab88:	4b1c      	ldr	r3, [pc, #112]	; (800abfc <xTaskResumeAll+0x120>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1cb      	bne.n	800ab28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab96:	f000 fbc5 	bl	800b324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab9a:	4b1d      	ldr	r3, [pc, #116]	; (800ac10 <xTaskResumeAll+0x134>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d010      	beq.n	800abc8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aba6:	f000 f847 	bl	800ac38 <xTaskIncrementTick>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800abb0:	4b16      	ldr	r3, [pc, #88]	; (800ac0c <xTaskResumeAll+0x130>)
 800abb2:	2201      	movs	r2, #1
 800abb4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3b01      	subs	r3, #1
 800abba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1f1      	bne.n	800aba6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800abc2:	4b13      	ldr	r3, [pc, #76]	; (800ac10 <xTaskResumeAll+0x134>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abc8:	4b10      	ldr	r3, [pc, #64]	; (800ac0c <xTaskResumeAll+0x130>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d009      	beq.n	800abe4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abd0:	2301      	movs	r3, #1
 800abd2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abd4:	4b0f      	ldr	r3, [pc, #60]	; (800ac14 <xTaskResumeAll+0x138>)
 800abd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abda:	601a      	str	r2, [r3, #0]
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abe4:	f001 f946 	bl	800be74 <vPortExitCritical>

	return xAlreadyYielded;
 800abe8:	68bb      	ldr	r3, [r7, #8]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	20001388 	.word	0x20001388
 800abf8:	20001360 	.word	0x20001360
 800abfc:	20001320 	.word	0x20001320
 800ac00:	20001368 	.word	0x20001368
 800ac04:	20000e90 	.word	0x20000e90
 800ac08:	20000e8c 	.word	0x20000e8c
 800ac0c:	20001374 	.word	0x20001374
 800ac10:	20001370 	.word	0x20001370
 800ac14:	e000ed04 	.word	0xe000ed04

0800ac18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac1e:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <xTaskGetTickCount+0x1c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac24:	687b      	ldr	r3, [r7, #4]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	20001364 	.word	0x20001364

0800ac38 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b086      	sub	sp, #24
 800ac3c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac42:	4b51      	ldr	r3, [pc, #324]	; (800ad88 <xTaskIncrementTick+0x150>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f040 808e 	bne.w	800ad68 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac4c:	4b4f      	ldr	r3, [pc, #316]	; (800ad8c <xTaskIncrementTick+0x154>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	3301      	adds	r3, #1
 800ac52:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac54:	4a4d      	ldr	r2, [pc, #308]	; (800ad8c <xTaskIncrementTick+0x154>)
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d120      	bne.n	800aca2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac60:	4b4b      	ldr	r3, [pc, #300]	; (800ad90 <xTaskIncrementTick+0x158>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <xTaskIncrementTick+0x48>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	603b      	str	r3, [r7, #0]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <xTaskIncrementTick+0x46>
 800ac80:	4b43      	ldr	r3, [pc, #268]	; (800ad90 <xTaskIncrementTick+0x158>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	60fb      	str	r3, [r7, #12]
 800ac86:	4b43      	ldr	r3, [pc, #268]	; (800ad94 <xTaskIncrementTick+0x15c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a41      	ldr	r2, [pc, #260]	; (800ad90 <xTaskIncrementTick+0x158>)
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	4a41      	ldr	r2, [pc, #260]	; (800ad94 <xTaskIncrementTick+0x15c>)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6013      	str	r3, [r2, #0]
 800ac94:	4b40      	ldr	r3, [pc, #256]	; (800ad98 <xTaskIncrementTick+0x160>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	4a3f      	ldr	r2, [pc, #252]	; (800ad98 <xTaskIncrementTick+0x160>)
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	f000 fb41 	bl	800b324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aca2:	4b3e      	ldr	r3, [pc, #248]	; (800ad9c <xTaskIncrementTick+0x164>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	429a      	cmp	r2, r3
 800acaa:	d34e      	bcc.n	800ad4a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acac:	4b38      	ldr	r3, [pc, #224]	; (800ad90 <xTaskIncrementTick+0x158>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d101      	bne.n	800acba <xTaskIncrementTick+0x82>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e000      	b.n	800acbc <xTaskIncrementTick+0x84>
 800acba:	2300      	movs	r3, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d004      	beq.n	800acca <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc0:	4b36      	ldr	r3, [pc, #216]	; (800ad9c <xTaskIncrementTick+0x164>)
 800acc2:	f04f 32ff 	mov.w	r2, #4294967295
 800acc6:	601a      	str	r2, [r3, #0]
					break;
 800acc8:	e03f      	b.n	800ad4a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800acca:	4b31      	ldr	r3, [pc, #196]	; (800ad90 <xTaskIncrementTick+0x158>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68db      	ldr	r3, [r3, #12]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800acda:	693a      	ldr	r2, [r7, #16]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d203      	bcs.n	800acea <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ace2:	4a2e      	ldr	r2, [pc, #184]	; (800ad9c <xTaskIncrementTick+0x164>)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6013      	str	r3, [r2, #0]
						break;
 800ace8:	e02f      	b.n	800ad4a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	3304      	adds	r3, #4
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fde6 	bl	80098c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d004      	beq.n	800ad06 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	3318      	adds	r3, #24
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fe fddd 	bl	80098c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0a:	4b25      	ldr	r3, [pc, #148]	; (800ada0 <xTaskIncrementTick+0x168>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d903      	bls.n	800ad1a <xTaskIncrementTick+0xe2>
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad16:	4a22      	ldr	r2, [pc, #136]	; (800ada0 <xTaskIncrementTick+0x168>)
 800ad18:	6013      	str	r3, [r2, #0]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1e:	4613      	mov	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	4413      	add	r3, r2
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4a1f      	ldr	r2, [pc, #124]	; (800ada4 <xTaskIncrementTick+0x16c>)
 800ad28:	441a      	add	r2, r3
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	4619      	mov	r1, r3
 800ad30:	4610      	mov	r0, r2
 800ad32:	f7fe fd68 	bl	8009806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3a:	4b1b      	ldr	r3, [pc, #108]	; (800ada8 <xTaskIncrementTick+0x170>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d3b3      	bcc.n	800acac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad44:	2301      	movs	r3, #1
 800ad46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad48:	e7b0      	b.n	800acac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad4a:	4b17      	ldr	r3, [pc, #92]	; (800ada8 <xTaskIncrementTick+0x170>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad50:	4914      	ldr	r1, [pc, #80]	; (800ada4 <xTaskIncrementTick+0x16c>)
 800ad52:	4613      	mov	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	440b      	add	r3, r1
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b01      	cmp	r3, #1
 800ad60:	d907      	bls.n	800ad72 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ad62:	2301      	movs	r3, #1
 800ad64:	617b      	str	r3, [r7, #20]
 800ad66:	e004      	b.n	800ad72 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad68:	4b10      	ldr	r3, [pc, #64]	; (800adac <xTaskIncrementTick+0x174>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	4a0f      	ldr	r2, [pc, #60]	; (800adac <xTaskIncrementTick+0x174>)
 800ad70:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad72:	4b0f      	ldr	r3, [pc, #60]	; (800adb0 <xTaskIncrementTick+0x178>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad7e:	697b      	ldr	r3, [r7, #20]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3718      	adds	r7, #24
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	20001388 	.word	0x20001388
 800ad8c:	20001364 	.word	0x20001364
 800ad90:	20001318 	.word	0x20001318
 800ad94:	2000131c 	.word	0x2000131c
 800ad98:	20001378 	.word	0x20001378
 800ad9c:	20001380 	.word	0x20001380
 800ada0:	20001368 	.word	0x20001368
 800ada4:	20000e90 	.word	0x20000e90
 800ada8:	20000e8c 	.word	0x20000e8c
 800adac:	20001370 	.word	0x20001370
 800adb0:	20001374 	.word	0x20001374

0800adb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adba:	4b2a      	ldr	r3, [pc, #168]	; (800ae64 <vTaskSwitchContext+0xb0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adc2:	4b29      	ldr	r3, [pc, #164]	; (800ae68 <vTaskSwitchContext+0xb4>)
 800adc4:	2201      	movs	r2, #1
 800adc6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800adc8:	e046      	b.n	800ae58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800adca:	4b27      	ldr	r3, [pc, #156]	; (800ae68 <vTaskSwitchContext+0xb4>)
 800adcc:	2200      	movs	r2, #0
 800adce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800add0:	4b26      	ldr	r3, [pc, #152]	; (800ae6c <vTaskSwitchContext+0xb8>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	60fb      	str	r3, [r7, #12]
 800add6:	e010      	b.n	800adfa <vTaskSwitchContext+0x46>
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10a      	bne.n	800adf4 <vTaskSwitchContext+0x40>
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	607b      	str	r3, [r7, #4]
}
 800adf0:	bf00      	nop
 800adf2:	e7fe      	b.n	800adf2 <vTaskSwitchContext+0x3e>
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	3b01      	subs	r3, #1
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	491d      	ldr	r1, [pc, #116]	; (800ae70 <vTaskSwitchContext+0xbc>)
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	4613      	mov	r3, r2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	440b      	add	r3, r1
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d0e4      	beq.n	800add8 <vTaskSwitchContext+0x24>
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	4613      	mov	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	4a15      	ldr	r2, [pc, #84]	; (800ae70 <vTaskSwitchContext+0xbc>)
 800ae1a:	4413      	add	r3, r2
 800ae1c:	60bb      	str	r3, [r7, #8]
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	605a      	str	r2, [r3, #4]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	3308      	adds	r3, #8
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d104      	bne.n	800ae3e <vTaskSwitchContext+0x8a>
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	605a      	str	r2, [r3, #4]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	68db      	ldr	r3, [r3, #12]
 800ae44:	4a0b      	ldr	r2, [pc, #44]	; (800ae74 <vTaskSwitchContext+0xc0>)
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	4a08      	ldr	r2, [pc, #32]	; (800ae6c <vTaskSwitchContext+0xb8>)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae4e:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <vTaskSwitchContext+0xc0>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	3358      	adds	r3, #88	; 0x58
 800ae54:	4a08      	ldr	r2, [pc, #32]	; (800ae78 <vTaskSwitchContext+0xc4>)
 800ae56:	6013      	str	r3, [r2, #0]
}
 800ae58:	bf00      	nop
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	20001388 	.word	0x20001388
 800ae68:	20001374 	.word	0x20001374
 800ae6c:	20001368 	.word	0x20001368
 800ae70:	20000e90 	.word	0x20000e90
 800ae74:	20000e8c 	.word	0x20000e8c
 800ae78:	200000f4 	.word	0x200000f4

0800ae7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	60fb      	str	r3, [r7, #12]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aea2:	4b07      	ldr	r3, [pc, #28]	; (800aec0 <vTaskPlaceOnEventList+0x44>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3318      	adds	r3, #24
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7fe fccf 	bl	800984e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	6838      	ldr	r0, [r7, #0]
 800aeb4:	f000 faf8 	bl	800b4a8 <prvAddCurrentTaskToDelayedList>
}
 800aeb8:	bf00      	nop
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20000e8c 	.word	0x20000e8c

0800aec4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10a      	bne.n	800aeec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	617b      	str	r3, [r7, #20]
}
 800aee8:	bf00      	nop
 800aeea:	e7fe      	b.n	800aeea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeec:	4b0a      	ldr	r3, [pc, #40]	; (800af18 <vTaskPlaceOnEventListRestricted+0x54>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	3318      	adds	r3, #24
 800aef2:	4619      	mov	r1, r3
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7fe fc86 	bl	8009806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800af00:	f04f 33ff 	mov.w	r3, #4294967295
 800af04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af06:	6879      	ldr	r1, [r7, #4]
 800af08:	68b8      	ldr	r0, [r7, #8]
 800af0a:	f000 facd 	bl	800b4a8 <prvAddCurrentTaskToDelayedList>
	}
 800af0e:	bf00      	nop
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	20000e8c 	.word	0x20000e8c

0800af1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800af32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	60fb      	str	r3, [r7, #12]
}
 800af44:	bf00      	nop
 800af46:	e7fe      	b.n	800af46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	3318      	adds	r3, #24
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7fe fcb7 	bl	80098c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af52:	4b1e      	ldr	r3, [pc, #120]	; (800afcc <xTaskRemoveFromEventList+0xb0>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d11d      	bne.n	800af96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	3304      	adds	r3, #4
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fe fcae 	bl	80098c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af68:	4b19      	ldr	r3, [pc, #100]	; (800afd0 <xTaskRemoveFromEventList+0xb4>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d903      	bls.n	800af78 <xTaskRemoveFromEventList+0x5c>
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af74:	4a16      	ldr	r2, [pc, #88]	; (800afd0 <xTaskRemoveFromEventList+0xb4>)
 800af76:	6013      	str	r3, [r2, #0]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7c:	4613      	mov	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4a13      	ldr	r2, [pc, #76]	; (800afd4 <xTaskRemoveFromEventList+0xb8>)
 800af86:	441a      	add	r2, r3
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	3304      	adds	r3, #4
 800af8c:	4619      	mov	r1, r3
 800af8e:	4610      	mov	r0, r2
 800af90:	f7fe fc39 	bl	8009806 <vListInsertEnd>
 800af94:	e005      	b.n	800afa2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	3318      	adds	r3, #24
 800af9a:	4619      	mov	r1, r3
 800af9c:	480e      	ldr	r0, [pc, #56]	; (800afd8 <xTaskRemoveFromEventList+0xbc>)
 800af9e:	f7fe fc32 	bl	8009806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa6:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <xTaskRemoveFromEventList+0xc0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afac:	429a      	cmp	r2, r3
 800afae:	d905      	bls.n	800afbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afb0:	2301      	movs	r3, #1
 800afb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afb4:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <xTaskRemoveFromEventList+0xc4>)
 800afb6:	2201      	movs	r2, #1
 800afb8:	601a      	str	r2, [r3, #0]
 800afba:	e001      	b.n	800afc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800afc0:	697b      	ldr	r3, [r7, #20]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3718      	adds	r7, #24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20001388 	.word	0x20001388
 800afd0:	20001368 	.word	0x20001368
 800afd4:	20000e90 	.word	0x20000e90
 800afd8:	20001320 	.word	0x20001320
 800afdc:	20000e8c 	.word	0x20000e8c
 800afe0:	20001374 	.word	0x20001374

0800afe4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800afee:	4b29      	ldr	r3, [pc, #164]	; (800b094 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10a      	bne.n	800b00c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	613b      	str	r3, [r7, #16]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10a      	bne.n	800b038 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	60fb      	str	r3, [r7, #12]
}
 800b034:	bf00      	nop
 800b036:	e7fe      	b.n	800b036 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7fe fc41 	bl	80098c0 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	3304      	adds	r3, #4
 800b042:	4618      	mov	r0, r3
 800b044:	f7fe fc3c 	bl	80098c0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b04c:	4b12      	ldr	r3, [pc, #72]	; (800b098 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	429a      	cmp	r2, r3
 800b052:	d903      	bls.n	800b05c <vTaskRemoveFromUnorderedEventList+0x78>
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	4a0f      	ldr	r2, [pc, #60]	; (800b098 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b060:	4613      	mov	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4a0c      	ldr	r2, [pc, #48]	; (800b09c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b06a:	441a      	add	r2, r3
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	3304      	adds	r3, #4
 800b070:	4619      	mov	r1, r3
 800b072:	4610      	mov	r0, r2
 800b074:	f7fe fbc7 	bl	8009806 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b07c:	4b08      	ldr	r3, [pc, #32]	; (800b0a0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	429a      	cmp	r2, r3
 800b084:	d902      	bls.n	800b08c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b086:	4b07      	ldr	r3, [pc, #28]	; (800b0a4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b088:	2201      	movs	r2, #1
 800b08a:	601a      	str	r2, [r3, #0]
	}
}
 800b08c:	bf00      	nop
 800b08e:	3718      	adds	r7, #24
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	20001388 	.word	0x20001388
 800b098:	20001368 	.word	0x20001368
 800b09c:	20000e90 	.word	0x20000e90
 800b0a0:	20000e8c 	.word	0x20000e8c
 800b0a4:	20001374 	.word	0x20001374

0800b0a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b0b0:	4b06      	ldr	r3, [pc, #24]	; (800b0cc <vTaskInternalSetTimeOutState+0x24>)
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b0b8:	4b05      	ldr	r3, [pc, #20]	; (800b0d0 <vTaskInternalSetTimeOutState+0x28>)
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	605a      	str	r2, [r3, #4]
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	20001378 	.word	0x20001378
 800b0d0:	20001364 	.word	0x20001364

0800b0d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b088      	sub	sp, #32
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e8:	f383 8811 	msr	BASEPRI, r3
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	f3bf 8f4f 	dsb	sy
 800b0f4:	613b      	str	r3, [r7, #16]
}
 800b0f6:	bf00      	nop
 800b0f8:	e7fe      	b.n	800b0f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	60fb      	str	r3, [r7, #12]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b116:	f000 fe7d 	bl	800be14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b11a:	4b1d      	ldr	r3, [pc, #116]	; (800b190 <xTaskCheckForTimeOut+0xbc>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	685b      	ldr	r3, [r3, #4]
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b132:	d102      	bne.n	800b13a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b134:	2300      	movs	r3, #0
 800b136:	61fb      	str	r3, [r7, #28]
 800b138:	e023      	b.n	800b182 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	4b15      	ldr	r3, [pc, #84]	; (800b194 <xTaskCheckForTimeOut+0xc0>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	429a      	cmp	r2, r3
 800b144:	d007      	beq.n	800b156 <xTaskCheckForTimeOut+0x82>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d302      	bcc.n	800b156 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b150:	2301      	movs	r3, #1
 800b152:	61fb      	str	r3, [r7, #28]
 800b154:	e015      	b.n	800b182 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d20b      	bcs.n	800b178 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	1ad2      	subs	r2, r2, r3
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7ff ff9b 	bl	800b0a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b172:	2300      	movs	r3, #0
 800b174:	61fb      	str	r3, [r7, #28]
 800b176:	e004      	b.n	800b182 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b17e:	2301      	movs	r3, #1
 800b180:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b182:	f000 fe77 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800b186:	69fb      	ldr	r3, [r7, #28]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3720      	adds	r7, #32
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	20001364 	.word	0x20001364
 800b194:	20001378 	.word	0x20001378

0800b198 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b198:	b480      	push	{r7}
 800b19a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b19c:	4b03      	ldr	r3, [pc, #12]	; (800b1ac <vTaskMissedYield+0x14>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	601a      	str	r2, [r3, #0]
}
 800b1a2:	bf00      	nop
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	20001374 	.word	0x20001374

0800b1b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b1b8:	f000 f852 	bl	800b260 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b1bc:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <prvIdleTask+0x28>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d9f9      	bls.n	800b1b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b1c4:	4b05      	ldr	r3, [pc, #20]	; (800b1dc <prvIdleTask+0x2c>)
 800b1c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ca:	601a      	str	r2, [r3, #0]
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b1d4:	e7f0      	b.n	800b1b8 <prvIdleTask+0x8>
 800b1d6:	bf00      	nop
 800b1d8:	20000e90 	.word	0x20000e90
 800b1dc:	e000ed04 	.word	0xe000ed04

0800b1e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	607b      	str	r3, [r7, #4]
 800b1ea:	e00c      	b.n	800b206 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4413      	add	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	4a12      	ldr	r2, [pc, #72]	; (800b240 <prvInitialiseTaskLists+0x60>)
 800b1f8:	4413      	add	r3, r2
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe fad6 	bl	80097ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	3301      	adds	r3, #1
 800b204:	607b      	str	r3, [r7, #4]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b37      	cmp	r3, #55	; 0x37
 800b20a:	d9ef      	bls.n	800b1ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b20c:	480d      	ldr	r0, [pc, #52]	; (800b244 <prvInitialiseTaskLists+0x64>)
 800b20e:	f7fe facd 	bl	80097ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b212:	480d      	ldr	r0, [pc, #52]	; (800b248 <prvInitialiseTaskLists+0x68>)
 800b214:	f7fe faca 	bl	80097ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b218:	480c      	ldr	r0, [pc, #48]	; (800b24c <prvInitialiseTaskLists+0x6c>)
 800b21a:	f7fe fac7 	bl	80097ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b21e:	480c      	ldr	r0, [pc, #48]	; (800b250 <prvInitialiseTaskLists+0x70>)
 800b220:	f7fe fac4 	bl	80097ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b224:	480b      	ldr	r0, [pc, #44]	; (800b254 <prvInitialiseTaskLists+0x74>)
 800b226:	f7fe fac1 	bl	80097ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b22a:	4b0b      	ldr	r3, [pc, #44]	; (800b258 <prvInitialiseTaskLists+0x78>)
 800b22c:	4a05      	ldr	r2, [pc, #20]	; (800b244 <prvInitialiseTaskLists+0x64>)
 800b22e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <prvInitialiseTaskLists+0x7c>)
 800b232:	4a05      	ldr	r2, [pc, #20]	; (800b248 <prvInitialiseTaskLists+0x68>)
 800b234:	601a      	str	r2, [r3, #0]
}
 800b236:	bf00      	nop
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20000e90 	.word	0x20000e90
 800b244:	200012f0 	.word	0x200012f0
 800b248:	20001304 	.word	0x20001304
 800b24c:	20001320 	.word	0x20001320
 800b250:	20001334 	.word	0x20001334
 800b254:	2000134c 	.word	0x2000134c
 800b258:	20001318 	.word	0x20001318
 800b25c:	2000131c 	.word	0x2000131c

0800b260 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b266:	e019      	b.n	800b29c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b268:	f000 fdd4 	bl	800be14 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b26c:	4b10      	ldr	r3, [pc, #64]	; (800b2b0 <prvCheckTasksWaitingTermination+0x50>)
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3304      	adds	r3, #4
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fe fb21 	bl	80098c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b27e:	4b0d      	ldr	r3, [pc, #52]	; (800b2b4 <prvCheckTasksWaitingTermination+0x54>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3b01      	subs	r3, #1
 800b284:	4a0b      	ldr	r2, [pc, #44]	; (800b2b4 <prvCheckTasksWaitingTermination+0x54>)
 800b286:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b288:	4b0b      	ldr	r3, [pc, #44]	; (800b2b8 <prvCheckTasksWaitingTermination+0x58>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3b01      	subs	r3, #1
 800b28e:	4a0a      	ldr	r2, [pc, #40]	; (800b2b8 <prvCheckTasksWaitingTermination+0x58>)
 800b290:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b292:	f000 fdef 	bl	800be74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f810 	bl	800b2bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b29c:	4b06      	ldr	r3, [pc, #24]	; (800b2b8 <prvCheckTasksWaitingTermination+0x58>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d1e1      	bne.n	800b268 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop
 800b2a8:	3708      	adds	r7, #8
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20001334 	.word	0x20001334
 800b2b4:	20001360 	.word	0x20001360
 800b2b8:	20001348 	.word	0x20001348

0800b2bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3358      	adds	r3, #88	; 0x58
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f001 ff17 	bl	800d0fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d108      	bne.n	800b2ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 ff7f 	bl	800c1e0 <vPortFree>
				vPortFree( pxTCB );
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 ff7c 	bl	800c1e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2e8:	e018      	b.n	800b31c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d103      	bne.n	800b2fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 ff73 	bl	800c1e0 <vPortFree>
	}
 800b2fa:	e00f      	b.n	800b31c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800b302:	2b02      	cmp	r3, #2
 800b304:	d00a      	beq.n	800b31c <prvDeleteTCB+0x60>
	__asm volatile
 800b306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	60fb      	str	r3, [r7, #12]
}
 800b318:	bf00      	nop
 800b31a:	e7fe      	b.n	800b31a <prvDeleteTCB+0x5e>
	}
 800b31c:	bf00      	nop
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b32a:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <prvResetNextTaskUnblockTime+0x44>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <prvResetNextTaskUnblockTime+0x14>
 800b334:	2301      	movs	r3, #1
 800b336:	e000      	b.n	800b33a <prvResetNextTaskUnblockTime+0x16>
 800b338:	2300      	movs	r3, #0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d004      	beq.n	800b348 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b33e:	4b0b      	ldr	r3, [pc, #44]	; (800b36c <prvResetNextTaskUnblockTime+0x48>)
 800b340:	f04f 32ff 	mov.w	r2, #4294967295
 800b344:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b346:	e008      	b.n	800b35a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b348:	4b07      	ldr	r3, [pc, #28]	; (800b368 <prvResetNextTaskUnblockTime+0x44>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	4a05      	ldr	r2, [pc, #20]	; (800b36c <prvResetNextTaskUnblockTime+0x48>)
 800b358:	6013      	str	r3, [r2, #0]
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
 800b366:	bf00      	nop
 800b368:	20001318 	.word	0x20001318
 800b36c:	20001380 	.word	0x20001380

0800b370 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b376:	4b05      	ldr	r3, [pc, #20]	; (800b38c <xTaskGetCurrentTaskHandle+0x1c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b37c:	687b      	ldr	r3, [r7, #4]
	}
 800b37e:	4618      	mov	r0, r3
 800b380:	370c      	adds	r7, #12
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	20000e8c 	.word	0x20000e8c

0800b390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b396:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <xTaskGetSchedulerState+0x34>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d102      	bne.n	800b3a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	607b      	str	r3, [r7, #4]
 800b3a2:	e008      	b.n	800b3b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3a4:	4b08      	ldr	r3, [pc, #32]	; (800b3c8 <xTaskGetSchedulerState+0x38>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d102      	bne.n	800b3b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3ac:	2302      	movs	r3, #2
 800b3ae:	607b      	str	r3, [r7, #4]
 800b3b0:	e001      	b.n	800b3b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3b6:	687b      	ldr	r3, [r7, #4]
	}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	2000136c 	.word	0x2000136c
 800b3c8:	20001388 	.word	0x20001388

0800b3cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d056      	beq.n	800b490 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3e2:	4b2e      	ldr	r3, [pc, #184]	; (800b49c <xTaskPriorityDisinherit+0xd0>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d00a      	beq.n	800b402 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	60fb      	str	r3, [r7, #12]
}
 800b3fe:	bf00      	nop
 800b400:	e7fe      	b.n	800b400 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10a      	bne.n	800b420 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	60bb      	str	r3, [r7, #8]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b424:	1e5a      	subs	r2, r3, #1
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	429a      	cmp	r2, r3
 800b434:	d02c      	beq.n	800b490 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d128      	bne.n	800b490 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	3304      	adds	r3, #4
 800b442:	4618      	mov	r0, r3
 800b444:	f7fe fa3c 	bl	80098c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b454:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b460:	4b0f      	ldr	r3, [pc, #60]	; (800b4a0 <xTaskPriorityDisinherit+0xd4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	429a      	cmp	r2, r3
 800b466:	d903      	bls.n	800b470 <xTaskPriorityDisinherit+0xa4>
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46c:	4a0c      	ldr	r2, [pc, #48]	; (800b4a0 <xTaskPriorityDisinherit+0xd4>)
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b474:	4613      	mov	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	4413      	add	r3, r2
 800b47a:	009b      	lsls	r3, r3, #2
 800b47c:	4a09      	ldr	r2, [pc, #36]	; (800b4a4 <xTaskPriorityDisinherit+0xd8>)
 800b47e:	441a      	add	r2, r3
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	3304      	adds	r3, #4
 800b484:	4619      	mov	r1, r3
 800b486:	4610      	mov	r0, r2
 800b488:	f7fe f9bd 	bl	8009806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b490:	697b      	ldr	r3, [r7, #20]
	}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	20000e8c 	.word	0x20000e8c
 800b4a0:	20001368 	.word	0x20001368
 800b4a4:	20000e90 	.word	0x20000e90

0800b4a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4b2:	4b21      	ldr	r3, [pc, #132]	; (800b538 <prvAddCurrentTaskToDelayedList+0x90>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4b8:	4b20      	ldr	r3, [pc, #128]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7fe f9fe 	bl	80098c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ca:	d10a      	bne.n	800b4e2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d007      	beq.n	800b4e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4d2:	4b1a      	ldr	r3, [pc, #104]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4819      	ldr	r0, [pc, #100]	; (800b540 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4dc:	f7fe f993 	bl	8009806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4e0:	e026      	b.n	800b530 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4e2:	68fa      	ldr	r2, [r7, #12]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4ea:	4b14      	ldr	r3, [pc, #80]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68ba      	ldr	r2, [r7, #8]
 800b4f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d209      	bcs.n	800b50e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4fa:	4b12      	ldr	r3, [pc, #72]	; (800b544 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	4b0f      	ldr	r3, [pc, #60]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	3304      	adds	r3, #4
 800b504:	4619      	mov	r1, r3
 800b506:	4610      	mov	r0, r2
 800b508:	f7fe f9a1 	bl	800984e <vListInsert>
}
 800b50c:	e010      	b.n	800b530 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b50e:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b0a      	ldr	r3, [pc, #40]	; (800b53c <prvAddCurrentTaskToDelayedList+0x94>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3304      	adds	r3, #4
 800b518:	4619      	mov	r1, r3
 800b51a:	4610      	mov	r0, r2
 800b51c:	f7fe f997 	bl	800984e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b520:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68ba      	ldr	r2, [r7, #8]
 800b526:	429a      	cmp	r2, r3
 800b528:	d202      	bcs.n	800b530 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b52a:	4a08      	ldr	r2, [pc, #32]	; (800b54c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	6013      	str	r3, [r2, #0]
}
 800b530:	bf00      	nop
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	20001364 	.word	0x20001364
 800b53c:	20000e8c 	.word	0x20000e8c
 800b540:	2000134c 	.word	0x2000134c
 800b544:	2000131c 	.word	0x2000131c
 800b548:	20001318 	.word	0x20001318
 800b54c:	20001380 	.word	0x20001380

0800b550 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b08a      	sub	sp, #40	; 0x28
 800b554:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b556:	2300      	movs	r3, #0
 800b558:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b55a:	f000 facb 	bl	800baf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b55e:	4b1c      	ldr	r3, [pc, #112]	; (800b5d0 <xTimerCreateTimerTask+0x80>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d021      	beq.n	800b5aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b566:	2300      	movs	r3, #0
 800b568:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b56a:	2300      	movs	r3, #0
 800b56c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b56e:	1d3a      	adds	r2, r7, #4
 800b570:	f107 0108 	add.w	r1, r7, #8
 800b574:	f107 030c 	add.w	r3, r7, #12
 800b578:	4618      	mov	r0, r3
 800b57a:	f7fd ff81 	bl	8009480 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	9202      	str	r2, [sp, #8]
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	2302      	movs	r3, #2
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	2300      	movs	r3, #0
 800b58e:	460a      	mov	r2, r1
 800b590:	4910      	ldr	r1, [pc, #64]	; (800b5d4 <xTimerCreateTimerTask+0x84>)
 800b592:	4811      	ldr	r0, [pc, #68]	; (800b5d8 <xTimerCreateTimerTask+0x88>)
 800b594:	f7fe ff30 	bl	800a3f8 <xTaskCreateStatic>
 800b598:	4603      	mov	r3, r0
 800b59a:	4a10      	ldr	r2, [pc, #64]	; (800b5dc <xTimerCreateTimerTask+0x8c>)
 800b59c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b59e:	4b0f      	ldr	r3, [pc, #60]	; (800b5dc <xTimerCreateTimerTask+0x8c>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d001      	beq.n	800b5aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b5c6:	697b      	ldr	r3, [r7, #20]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3718      	adds	r7, #24
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	200013bc 	.word	0x200013bc
 800b5d4:	0800f22c 	.word	0x0800f22c
 800b5d8:	0800b6fd 	.word	0x0800b6fd
 800b5dc:	200013c0 	.word	0x200013c0

0800b5e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08a      	sub	sp, #40	; 0x28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
 800b5ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10a      	bne.n	800b60e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	f383 8811 	msr	BASEPRI, r3
 800b600:	f3bf 8f6f 	isb	sy
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	623b      	str	r3, [r7, #32]
}
 800b60a:	bf00      	nop
 800b60c:	e7fe      	b.n	800b60c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b60e:	4b1a      	ldr	r3, [pc, #104]	; (800b678 <xTimerGenericCommand+0x98>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d02a      	beq.n	800b66c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	2b05      	cmp	r3, #5
 800b626:	dc18      	bgt.n	800b65a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b628:	f7ff feb2 	bl	800b390 <xTaskGetSchedulerState>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d109      	bne.n	800b646 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b632:	4b11      	ldr	r3, [pc, #68]	; (800b678 <xTimerGenericCommand+0x98>)
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	f107 0110 	add.w	r1, r7, #16
 800b63a:	2300      	movs	r3, #0
 800b63c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b63e:	f7fe faf7 	bl	8009c30 <xQueueGenericSend>
 800b642:	6278      	str	r0, [r7, #36]	; 0x24
 800b644:	e012      	b.n	800b66c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b646:	4b0c      	ldr	r3, [pc, #48]	; (800b678 <xTimerGenericCommand+0x98>)
 800b648:	6818      	ldr	r0, [r3, #0]
 800b64a:	f107 0110 	add.w	r1, r7, #16
 800b64e:	2300      	movs	r3, #0
 800b650:	2200      	movs	r2, #0
 800b652:	f7fe faed 	bl	8009c30 <xQueueGenericSend>
 800b656:	6278      	str	r0, [r7, #36]	; 0x24
 800b658:	e008      	b.n	800b66c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b65a:	4b07      	ldr	r3, [pc, #28]	; (800b678 <xTimerGenericCommand+0x98>)
 800b65c:	6818      	ldr	r0, [r3, #0]
 800b65e:	f107 0110 	add.w	r1, r7, #16
 800b662:	2300      	movs	r3, #0
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	f7fe fbe1 	bl	8009e2c <xQueueGenericSendFromISR>
 800b66a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3728      	adds	r7, #40	; 0x28
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	200013bc 	.word	0x200013bc

0800b67c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af02      	add	r7, sp, #8
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b686:	4b1c      	ldr	r3, [pc, #112]	; (800b6f8 <prvProcessExpiredTimer+0x7c>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	3304      	adds	r3, #4
 800b694:	4618      	mov	r0, r3
 800b696:	f7fe f913 	bl	80098c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d122      	bne.n	800b6e8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	699a      	ldr	r2, [r3, #24]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	18d1      	adds	r1, r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	6978      	ldr	r0, [r7, #20]
 800b6b0:	f000 f8c8 	bl	800b844 <prvInsertTimerInActiveList>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d016      	beq.n	800b6e8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	2300      	movs	r3, #0
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	6978      	ldr	r0, [r7, #20]
 800b6c6:	f7ff ff8b 	bl	800b5e0 <xTimerGenericCommand>
 800b6ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10a      	bne.n	800b6e8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800b6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	60fb      	str	r3, [r7, #12]
}
 800b6e4:	bf00      	nop
 800b6e6:	e7fe      	b.n	800b6e6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ec:	6978      	ldr	r0, [r7, #20]
 800b6ee:	4798      	blx	r3
}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200013b4 	.word	0x200013b4

0800b6fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b704:	f107 0308 	add.w	r3, r7, #8
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 f857 	bl	800b7bc <prvGetNextExpireTime>
 800b70e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4619      	mov	r1, r3
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 f803 	bl	800b720 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b71a:	f000 f8d5 	bl	800b8c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b71e:	e7f1      	b.n	800b704 <prvTimerTask+0x8>

0800b720 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b72a:	f7ff f9c9 	bl	800aac0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b72e:	f107 0308 	add.w	r3, r7, #8
 800b732:	4618      	mov	r0, r3
 800b734:	f000 f866 	bl	800b804 <prvSampleTimeNow>
 800b738:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d130      	bne.n	800b7a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10a      	bne.n	800b75c <prvProcessTimerOrBlockTask+0x3c>
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d806      	bhi.n	800b75c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b74e:	f7ff f9c5 	bl	800aadc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b752:	68f9      	ldr	r1, [r7, #12]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff ff91 	bl	800b67c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b75a:	e024      	b.n	800b7a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d008      	beq.n	800b774 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b762:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <prvProcessTimerOrBlockTask+0x90>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	bf0c      	ite	eq
 800b76c:	2301      	moveq	r3, #1
 800b76e:	2300      	movne	r3, #0
 800b770:	b2db      	uxtb	r3, r3
 800b772:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b774:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <prvProcessTimerOrBlockTask+0x94>)
 800b776:	6818      	ldr	r0, [r3, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	1ad3      	subs	r3, r2, r3
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	4619      	mov	r1, r3
 800b782:	f7fe fe05 	bl	800a390 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b786:	f7ff f9a9 	bl	800aadc <xTaskResumeAll>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d10a      	bne.n	800b7a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b790:	4b09      	ldr	r3, [pc, #36]	; (800b7b8 <prvProcessTimerOrBlockTask+0x98>)
 800b792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	f3bf 8f6f 	isb	sy
}
 800b7a0:	e001      	b.n	800b7a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7a2:	f7ff f99b 	bl	800aadc <xTaskResumeAll>
}
 800b7a6:	bf00      	nop
 800b7a8:	3710      	adds	r7, #16
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	200013b8 	.word	0x200013b8
 800b7b4:	200013bc 	.word	0x200013bc
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7c4:	4b0e      	ldr	r3, [pc, #56]	; (800b800 <prvGetNextExpireTime+0x44>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	bf0c      	ite	eq
 800b7ce:	2301      	moveq	r3, #1
 800b7d0:	2300      	movne	r3, #0
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d105      	bne.n	800b7ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7e2:	4b07      	ldr	r3, [pc, #28]	; (800b800 <prvGetNextExpireTime+0x44>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]
 800b7ec:	e001      	b.n	800b7f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3714      	adds	r7, #20
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr
 800b800:	200013b4 	.word	0x200013b4

0800b804 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b80c:	f7ff fa04 	bl	800ac18 <xTaskGetTickCount>
 800b810:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b812:	4b0b      	ldr	r3, [pc, #44]	; (800b840 <prvSampleTimeNow+0x3c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68fa      	ldr	r2, [r7, #12]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d205      	bcs.n	800b828 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b81c:	f000 f908 	bl	800ba30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	e002      	b.n	800b82e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b82e:	4a04      	ldr	r2, [pc, #16]	; (800b840 <prvSampleTimeNow+0x3c>)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b834:	68fb      	ldr	r3, [r7, #12]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	200013c4 	.word	0x200013c4

0800b844 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b862:	68ba      	ldr	r2, [r7, #8]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	429a      	cmp	r2, r3
 800b868:	d812      	bhi.n	800b890 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	1ad2      	subs	r2, r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	429a      	cmp	r2, r3
 800b876:	d302      	bcc.n	800b87e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b878:	2301      	movs	r3, #1
 800b87a:	617b      	str	r3, [r7, #20]
 800b87c:	e01b      	b.n	800b8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b87e:	4b10      	ldr	r3, [pc, #64]	; (800b8c0 <prvInsertTimerInActiveList+0x7c>)
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3304      	adds	r3, #4
 800b886:	4619      	mov	r1, r3
 800b888:	4610      	mov	r0, r2
 800b88a:	f7fd ffe0 	bl	800984e <vListInsert>
 800b88e:	e012      	b.n	800b8b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	429a      	cmp	r2, r3
 800b896:	d206      	bcs.n	800b8a6 <prvInsertTimerInActiveList+0x62>
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d302      	bcc.n	800b8a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	617b      	str	r3, [r7, #20]
 800b8a4:	e007      	b.n	800b8b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8a6:	4b07      	ldr	r3, [pc, #28]	; (800b8c4 <prvInsertTimerInActiveList+0x80>)
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3304      	adds	r3, #4
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	f7fd ffcc 	bl	800984e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8b6:	697b      	ldr	r3, [r7, #20]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	200013b8 	.word	0x200013b8
 800b8c4:	200013b4 	.word	0x200013b4

0800b8c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b08e      	sub	sp, #56	; 0x38
 800b8cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8ce:	e09d      	b.n	800ba0c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	da18      	bge.n	800b908 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8d6:	1d3b      	adds	r3, r7, #4
 800b8d8:	3304      	adds	r3, #4
 800b8da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10a      	bne.n	800b8f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	61fb      	str	r3, [r7, #28]
}
 800b8f4:	bf00      	nop
 800b8f6:	e7fe      	b.n	800b8f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8fe:	6850      	ldr	r0, [r2, #4]
 800b900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b902:	6892      	ldr	r2, [r2, #8]
 800b904:	4611      	mov	r1, r2
 800b906:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	db7e      	blt.n	800ba0c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d004      	beq.n	800b924 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	3304      	adds	r3, #4
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fd ffce 	bl	80098c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b924:	463b      	mov	r3, r7
 800b926:	4618      	mov	r0, r3
 800b928:	f7ff ff6c 	bl	800b804 <prvSampleTimeNow>
 800b92c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b09      	cmp	r3, #9
 800b932:	d86a      	bhi.n	800ba0a <prvProcessReceivedCommands+0x142>
 800b934:	a201      	add	r2, pc, #4	; (adr r2, 800b93c <prvProcessReceivedCommands+0x74>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b965 	.word	0x0800b965
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b965 	.word	0x0800b965
 800b948:	0800ba0d 	.word	0x0800ba0d
 800b94c:	0800b9c1 	.word	0x0800b9c1
 800b950:	0800b9f9 	.word	0x0800b9f9
 800b954:	0800b965 	.word	0x0800b965
 800b958:	0800b965 	.word	0x0800b965
 800b95c:	0800ba0d 	.word	0x0800ba0d
 800b960:	0800b9c1 	.word	0x0800b9c1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	18d1      	adds	r1, r2, r3
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b972:	f7ff ff67 	bl	800b844 <prvInsertTimerInActiveList>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d047      	beq.n	800ba0c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b982:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d13f      	bne.n	800ba0c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b98c:	68ba      	ldr	r2, [r7, #8]
 800b98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	441a      	add	r2, r3
 800b994:	2300      	movs	r3, #0
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	2300      	movs	r3, #0
 800b99a:	2100      	movs	r1, #0
 800b99c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b99e:	f7ff fe1f 	bl	800b5e0 <xTimerGenericCommand>
 800b9a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9a4:	6a3b      	ldr	r3, [r7, #32]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d130      	bne.n	800ba0c <prvProcessReceivedCommands+0x144>
	__asm volatile
 800b9aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	61bb      	str	r3, [r7, #24]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800b9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	617b      	str	r3, [r7, #20]
}
 800b9e0:	bf00      	nop
 800b9e2:	e7fe      	b.n	800b9e2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e6:	699a      	ldr	r2, [r3, #24]
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	18d1      	adds	r1, r2, r3
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f2:	f7ff ff27 	bl	800b844 <prvInsertTimerInActiveList>
					break;
 800b9f6:	e009      	b.n	800ba0c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d104      	bne.n	800ba0c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800ba02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba04:	f000 fbec 	bl	800c1e0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba08:	e000      	b.n	800ba0c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800ba0a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba0c:	4b07      	ldr	r3, [pc, #28]	; (800ba2c <prvProcessReceivedCommands+0x164>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	1d39      	adds	r1, r7, #4
 800ba12:	2200      	movs	r2, #0
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe faa1 	bl	8009f5c <xQueueReceive>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	f47f af57 	bne.w	800b8d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800ba22:	bf00      	nop
 800ba24:	bf00      	nop
 800ba26:	3730      	adds	r7, #48	; 0x30
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	200013bc 	.word	0x200013bc

0800ba30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b088      	sub	sp, #32
 800ba34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba36:	e045      	b.n	800bac4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba38:	4b2c      	ldr	r3, [pc, #176]	; (800baec <prvSwitchTimerLists+0xbc>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba42:	4b2a      	ldr	r3, [pc, #168]	; (800baec <prvSwitchTimerLists+0xbc>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fd ff35 	bl	80098c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	69db      	ldr	r3, [r3, #28]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d12e      	bne.n	800bac4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d90e      	bls.n	800ba96 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	68ba      	ldr	r2, [r7, #8]
 800ba7c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba84:	4b19      	ldr	r3, [pc, #100]	; (800baec <prvSwitchTimerLists+0xbc>)
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4610      	mov	r0, r2
 800ba90:	f7fd fedd 	bl	800984e <vListInsert>
 800ba94:	e016      	b.n	800bac4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba96:	2300      	movs	r3, #0
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	2100      	movs	r1, #0
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f7ff fd9d 	bl	800b5e0 <xTimerGenericCommand>
 800baa6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10a      	bne.n	800bac4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	603b      	str	r3, [r7, #0]
}
 800bac0:	bf00      	nop
 800bac2:	e7fe      	b.n	800bac2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bac4:	4b09      	ldr	r3, [pc, #36]	; (800baec <prvSwitchTimerLists+0xbc>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1b4      	bne.n	800ba38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bace:	4b07      	ldr	r3, [pc, #28]	; (800baec <prvSwitchTimerLists+0xbc>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bad4:	4b06      	ldr	r3, [pc, #24]	; (800baf0 <prvSwitchTimerLists+0xc0>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a04      	ldr	r2, [pc, #16]	; (800baec <prvSwitchTimerLists+0xbc>)
 800bada:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800badc:	4a04      	ldr	r2, [pc, #16]	; (800baf0 <prvSwitchTimerLists+0xc0>)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	6013      	str	r3, [r2, #0]
}
 800bae2:	bf00      	nop
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200013b4 	.word	0x200013b4
 800baf0:	200013b8 	.word	0x200013b8

0800baf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bafa:	f000 f98b 	bl	800be14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bafe:	4b15      	ldr	r3, [pc, #84]	; (800bb54 <prvCheckForValidListAndQueue+0x60>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d120      	bne.n	800bb48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb06:	4814      	ldr	r0, [pc, #80]	; (800bb58 <prvCheckForValidListAndQueue+0x64>)
 800bb08:	f7fd fe50 	bl	80097ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb0c:	4813      	ldr	r0, [pc, #76]	; (800bb5c <prvCheckForValidListAndQueue+0x68>)
 800bb0e:	f7fd fe4d 	bl	80097ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb12:	4b13      	ldr	r3, [pc, #76]	; (800bb60 <prvCheckForValidListAndQueue+0x6c>)
 800bb14:	4a10      	ldr	r2, [pc, #64]	; (800bb58 <prvCheckForValidListAndQueue+0x64>)
 800bb16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb18:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <prvCheckForValidListAndQueue+0x70>)
 800bb1a:	4a10      	ldr	r2, [pc, #64]	; (800bb5c <prvCheckForValidListAndQueue+0x68>)
 800bb1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	4b11      	ldr	r3, [pc, #68]	; (800bb68 <prvCheckForValidListAndQueue+0x74>)
 800bb24:	4a11      	ldr	r2, [pc, #68]	; (800bb6c <prvCheckForValidListAndQueue+0x78>)
 800bb26:	2110      	movs	r1, #16
 800bb28:	200a      	movs	r0, #10
 800bb2a:	f7fd ff5b 	bl	80099e4 <xQueueGenericCreateStatic>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4a08      	ldr	r2, [pc, #32]	; (800bb54 <prvCheckForValidListAndQueue+0x60>)
 800bb32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb34:	4b07      	ldr	r3, [pc, #28]	; (800bb54 <prvCheckForValidListAndQueue+0x60>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d005      	beq.n	800bb48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb3c:	4b05      	ldr	r3, [pc, #20]	; (800bb54 <prvCheckForValidListAndQueue+0x60>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	490b      	ldr	r1, [pc, #44]	; (800bb70 <prvCheckForValidListAndQueue+0x7c>)
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe fbfa 	bl	800a33c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb48:	f000 f994 	bl	800be74 <vPortExitCritical>
}
 800bb4c:	bf00      	nop
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	200013bc 	.word	0x200013bc
 800bb58:	2000138c 	.word	0x2000138c
 800bb5c:	200013a0 	.word	0x200013a0
 800bb60:	200013b4 	.word	0x200013b4
 800bb64:	200013b8 	.word	0x200013b8
 800bb68:	20001468 	.word	0x20001468
 800bb6c:	200013c8 	.word	0x200013c8
 800bb70:	0800f234 	.word	0x0800f234

0800bb74 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08a      	sub	sp, #40	; 0x28
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	607a      	str	r2, [r7, #4]
 800bb80:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800bb82:	f06f 0301 	mvn.w	r3, #1
 800bb86:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb94:	4b06      	ldr	r3, [pc, #24]	; (800bbb0 <xTimerPendFunctionCallFromISR+0x3c>)
 800bb96:	6818      	ldr	r0, [r3, #0]
 800bb98:	f107 0114 	add.w	r1, r7, #20
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	683a      	ldr	r2, [r7, #0]
 800bba0:	f7fe f944 	bl	8009e2c <xQueueGenericSendFromISR>
 800bba4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3728      	adds	r7, #40	; 0x28
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	200013bc 	.word	0x200013bc

0800bbb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	3b04      	subs	r3, #4
 800bbc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3b04      	subs	r3, #4
 800bbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	f023 0201 	bic.w	r2, r3, #1
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	3b04      	subs	r3, #4
 800bbe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbe4:	4a0c      	ldr	r2, [pc, #48]	; (800bc18 <pxPortInitialiseStack+0x64>)
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3b14      	subs	r3, #20
 800bbee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f06f 0202 	mvn.w	r2, #2
 800bc02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	3b20      	subs	r3, #32
 800bc08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr
 800bc18:	0800bc1d 	.word	0x0800bc1d

0800bc1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc26:	4b12      	ldr	r3, [pc, #72]	; (800bc70 <prvTaskExitError+0x54>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc2e:	d00a      	beq.n	800bc46 <prvTaskExitError+0x2a>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	60fb      	str	r3, [r7, #12]
}
 800bc42:	bf00      	nop
 800bc44:	e7fe      	b.n	800bc44 <prvTaskExitError+0x28>
	__asm volatile
 800bc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc4a:	f383 8811 	msr	BASEPRI, r3
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f3bf 8f4f 	dsb	sy
 800bc56:	60bb      	str	r3, [r7, #8]
}
 800bc58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc5a:	bf00      	nop
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d0fc      	beq.n	800bc5c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc62:	bf00      	nop
 800bc64:	bf00      	nop
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr
 800bc70:	20000098 	.word	0x20000098
	...

0800bc80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <pxCurrentTCBConst2>)
 800bc82:	6819      	ldr	r1, [r3, #0]
 800bc84:	6808      	ldr	r0, [r1, #0]
 800bc86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8a:	f380 8809 	msr	PSP, r0
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f04f 0000 	mov.w	r0, #0
 800bc96:	f380 8811 	msr	BASEPRI, r0
 800bc9a:	4770      	bx	lr
 800bc9c:	f3af 8000 	nop.w

0800bca0 <pxCurrentTCBConst2>:
 800bca0:	20000e8c 	.word	0x20000e8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bca4:	bf00      	nop
 800bca6:	bf00      	nop

0800bca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bca8:	4808      	ldr	r0, [pc, #32]	; (800bccc <prvPortStartFirstTask+0x24>)
 800bcaa:	6800      	ldr	r0, [r0, #0]
 800bcac:	6800      	ldr	r0, [r0, #0]
 800bcae:	f380 8808 	msr	MSP, r0
 800bcb2:	f04f 0000 	mov.w	r0, #0
 800bcb6:	f380 8814 	msr	CONTROL, r0
 800bcba:	b662      	cpsie	i
 800bcbc:	b661      	cpsie	f
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	df00      	svc	0
 800bcc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcca:	bf00      	nop
 800bccc:	e000ed08 	.word	0xe000ed08

0800bcd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b086      	sub	sp, #24
 800bcd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bcd6:	4b46      	ldr	r3, [pc, #280]	; (800bdf0 <xPortStartScheduler+0x120>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a46      	ldr	r2, [pc, #280]	; (800bdf4 <xPortStartScheduler+0x124>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d10a      	bne.n	800bcf6 <xPortStartScheduler+0x26>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bcf6:	4b3e      	ldr	r3, [pc, #248]	; (800bdf0 <xPortStartScheduler+0x120>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a3f      	ldr	r2, [pc, #252]	; (800bdf8 <xPortStartScheduler+0x128>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d10a      	bne.n	800bd16 <xPortStartScheduler+0x46>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	60fb      	str	r3, [r7, #12]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd16:	4b39      	ldr	r3, [pc, #228]	; (800bdfc <xPortStartScheduler+0x12c>)
 800bd18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	22ff      	movs	r2, #255	; 0xff
 800bd26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd30:	78fb      	ldrb	r3, [r7, #3]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	4b31      	ldr	r3, [pc, #196]	; (800be00 <xPortStartScheduler+0x130>)
 800bd3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd3e:	4b31      	ldr	r3, [pc, #196]	; (800be04 <xPortStartScheduler+0x134>)
 800bd40:	2207      	movs	r2, #7
 800bd42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd44:	e009      	b.n	800bd5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd46:	4b2f      	ldr	r3, [pc, #188]	; (800be04 <xPortStartScheduler+0x134>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	4a2d      	ldr	r2, [pc, #180]	; (800be04 <xPortStartScheduler+0x134>)
 800bd4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd5a:	78fb      	ldrb	r3, [r7, #3]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd62:	2b80      	cmp	r3, #128	; 0x80
 800bd64:	d0ef      	beq.n	800bd46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd66:	4b27      	ldr	r3, [pc, #156]	; (800be04 <xPortStartScheduler+0x134>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f1c3 0307 	rsb	r3, r3, #7
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d00a      	beq.n	800bd88 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	60bb      	str	r3, [r7, #8]
}
 800bd84:	bf00      	nop
 800bd86:	e7fe      	b.n	800bd86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd88:	4b1e      	ldr	r3, [pc, #120]	; (800be04 <xPortStartScheduler+0x134>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	4a1d      	ldr	r2, [pc, #116]	; (800be04 <xPortStartScheduler+0x134>)
 800bd90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd92:	4b1c      	ldr	r3, [pc, #112]	; (800be04 <xPortStartScheduler+0x134>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd9a:	4a1a      	ldr	r2, [pc, #104]	; (800be04 <xPortStartScheduler+0x134>)
 800bd9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bda6:	4b18      	ldr	r3, [pc, #96]	; (800be08 <xPortStartScheduler+0x138>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a17      	ldr	r2, [pc, #92]	; (800be08 <xPortStartScheduler+0x138>)
 800bdac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdb2:	4b15      	ldr	r3, [pc, #84]	; (800be08 <xPortStartScheduler+0x138>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a14      	ldr	r2, [pc, #80]	; (800be08 <xPortStartScheduler+0x138>)
 800bdb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdbe:	f000 f8dd 	bl	800bf7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdc2:	4b12      	ldr	r3, [pc, #72]	; (800be0c <xPortStartScheduler+0x13c>)
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdc8:	f000 f8fc 	bl	800bfc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdcc:	4b10      	ldr	r3, [pc, #64]	; (800be10 <xPortStartScheduler+0x140>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a0f      	ldr	r2, [pc, #60]	; (800be10 <xPortStartScheduler+0x140>)
 800bdd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bdd8:	f7ff ff66 	bl	800bca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bddc:	f7fe ffea 	bl	800adb4 <vTaskSwitchContext>
	prvTaskExitError();
 800bde0:	f7ff ff1c 	bl	800bc1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3718      	adds	r7, #24
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	e000ed00 	.word	0xe000ed00
 800bdf4:	410fc271 	.word	0x410fc271
 800bdf8:	410fc270 	.word	0x410fc270
 800bdfc:	e000e400 	.word	0xe000e400
 800be00:	200014b8 	.word	0x200014b8
 800be04:	200014bc 	.word	0x200014bc
 800be08:	e000ed20 	.word	0xe000ed20
 800be0c:	20000098 	.word	0x20000098
 800be10:	e000ef34 	.word	0xe000ef34

0800be14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
	__asm volatile
 800be1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	607b      	str	r3, [r7, #4]
}
 800be2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be2e:	4b0f      	ldr	r3, [pc, #60]	; (800be6c <vPortEnterCritical+0x58>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	3301      	adds	r3, #1
 800be34:	4a0d      	ldr	r2, [pc, #52]	; (800be6c <vPortEnterCritical+0x58>)
 800be36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be38:	4b0c      	ldr	r3, [pc, #48]	; (800be6c <vPortEnterCritical+0x58>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d10f      	bne.n	800be60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be40:	4b0b      	ldr	r3, [pc, #44]	; (800be70 <vPortEnterCritical+0x5c>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	b2db      	uxtb	r3, r3
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00a      	beq.n	800be60 <vPortEnterCritical+0x4c>
	__asm volatile
 800be4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	603b      	str	r3, [r7, #0]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <vPortEnterCritical+0x4a>
	}
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20000098 	.word	0x20000098
 800be70:	e000ed04 	.word	0xe000ed04

0800be74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be7a:	4b12      	ldr	r3, [pc, #72]	; (800bec4 <vPortExitCritical+0x50>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10a      	bne.n	800be98 <vPortExitCritical+0x24>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	607b      	str	r3, [r7, #4]
}
 800be94:	bf00      	nop
 800be96:	e7fe      	b.n	800be96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be98:	4b0a      	ldr	r3, [pc, #40]	; (800bec4 <vPortExitCritical+0x50>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	3b01      	subs	r3, #1
 800be9e:	4a09      	ldr	r2, [pc, #36]	; (800bec4 <vPortExitCritical+0x50>)
 800bea0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bea2:	4b08      	ldr	r3, [pc, #32]	; (800bec4 <vPortExitCritical+0x50>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d105      	bne.n	800beb6 <vPortExitCritical+0x42>
 800beaa:	2300      	movs	r3, #0
 800beac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	f383 8811 	msr	BASEPRI, r3
}
 800beb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800beb6:	bf00      	nop
 800beb8:	370c      	adds	r7, #12
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	20000098 	.word	0x20000098
	...

0800bed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bed0:	f3ef 8009 	mrs	r0, PSP
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <pxCurrentTCBConst>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	f01e 0f10 	tst.w	lr, #16
 800bee0:	bf08      	it	eq
 800bee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	6010      	str	r0, [r2, #0]
 800beec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bef4:	f380 8811 	msr	BASEPRI, r0
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f7fe ff58 	bl	800adb4 <vTaskSwitchContext>
 800bf04:	f04f 0000 	mov.w	r0, #0
 800bf08:	f380 8811 	msr	BASEPRI, r0
 800bf0c:	bc09      	pop	{r0, r3}
 800bf0e:	6819      	ldr	r1, [r3, #0]
 800bf10:	6808      	ldr	r0, [r1, #0]
 800bf12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf16:	f01e 0f10 	tst.w	lr, #16
 800bf1a:	bf08      	it	eq
 800bf1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf20:	f380 8809 	msr	PSP, r0
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	f3af 8000 	nop.w

0800bf30 <pxCurrentTCBConst>:
 800bf30:	20000e8c 	.word	0x20000e8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop

0800bf38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	f383 8811 	msr	BASEPRI, r3
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	f3bf 8f4f 	dsb	sy
 800bf4e:	607b      	str	r3, [r7, #4]
}
 800bf50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf52:	f7fe fe71 	bl	800ac38 <xTaskIncrementTick>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf5c:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <SysTick_Handler+0x40>)
 800bf5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf62:	601a      	str	r2, [r3, #0]
 800bf64:	2300      	movs	r3, #0
 800bf66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	f383 8811 	msr	BASEPRI, r3
}
 800bf6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	e000ed04 	.word	0xe000ed04

0800bf7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf80:	4b0b      	ldr	r3, [pc, #44]	; (800bfb0 <vPortSetupTimerInterrupt+0x34>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf86:	4b0b      	ldr	r3, [pc, #44]	; (800bfb4 <vPortSetupTimerInterrupt+0x38>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf8c:	4b0a      	ldr	r3, [pc, #40]	; (800bfb8 <vPortSetupTimerInterrupt+0x3c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a0a      	ldr	r2, [pc, #40]	; (800bfbc <vPortSetupTimerInterrupt+0x40>)
 800bf92:	fba2 2303 	umull	r2, r3, r2, r3
 800bf96:	099b      	lsrs	r3, r3, #6
 800bf98:	4a09      	ldr	r2, [pc, #36]	; (800bfc0 <vPortSetupTimerInterrupt+0x44>)
 800bf9a:	3b01      	subs	r3, #1
 800bf9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf9e:	4b04      	ldr	r3, [pc, #16]	; (800bfb0 <vPortSetupTimerInterrupt+0x34>)
 800bfa0:	2207      	movs	r2, #7
 800bfa2:	601a      	str	r2, [r3, #0]
}
 800bfa4:	bf00      	nop
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	e000e010 	.word	0xe000e010
 800bfb4:	e000e018 	.word	0xe000e018
 800bfb8:	20000070 	.word	0x20000070
 800bfbc:	10624dd3 	.word	0x10624dd3
 800bfc0:	e000e014 	.word	0xe000e014

0800bfc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfd4 <vPortEnableVFP+0x10>
 800bfc8:	6801      	ldr	r1, [r0, #0]
 800bfca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfce:	6001      	str	r1, [r0, #0]
 800bfd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfd2:	bf00      	nop
 800bfd4:	e000ed88 	.word	0xe000ed88

0800bfd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfde:	f3ef 8305 	mrs	r3, IPSR
 800bfe2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b0f      	cmp	r3, #15
 800bfe8:	d914      	bls.n	800c014 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfea:	4a17      	ldr	r2, [pc, #92]	; (800c048 <vPortValidateInterruptPriority+0x70>)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	4413      	add	r3, r2
 800bff0:	781b      	ldrb	r3, [r3, #0]
 800bff2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bff4:	4b15      	ldr	r3, [pc, #84]	; (800c04c <vPortValidateInterruptPriority+0x74>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	7afa      	ldrb	r2, [r7, #11]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d20a      	bcs.n	800c014 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	607b      	str	r3, [r7, #4]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c014:	4b0e      	ldr	r3, [pc, #56]	; (800c050 <vPortValidateInterruptPriority+0x78>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c01c:	4b0d      	ldr	r3, [pc, #52]	; (800c054 <vPortValidateInterruptPriority+0x7c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d90a      	bls.n	800c03a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c028:	f383 8811 	msr	BASEPRI, r3
 800c02c:	f3bf 8f6f 	isb	sy
 800c030:	f3bf 8f4f 	dsb	sy
 800c034:	603b      	str	r3, [r7, #0]
}
 800c036:	bf00      	nop
 800c038:	e7fe      	b.n	800c038 <vPortValidateInterruptPriority+0x60>
	}
 800c03a:	bf00      	nop
 800c03c:	3714      	adds	r7, #20
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	e000e3f0 	.word	0xe000e3f0
 800c04c:	200014b8 	.word	0x200014b8
 800c050:	e000ed0c 	.word	0xe000ed0c
 800c054:	200014bc 	.word	0x200014bc

0800c058 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08a      	sub	sp, #40	; 0x28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c060:	2300      	movs	r3, #0
 800c062:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c064:	f7fe fd2c 	bl	800aac0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c068:	4b58      	ldr	r3, [pc, #352]	; (800c1cc <pvPortMalloc+0x174>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d101      	bne.n	800c074 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c070:	f000 f910 	bl	800c294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c074:	4b56      	ldr	r3, [pc, #344]	; (800c1d0 <pvPortMalloc+0x178>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4013      	ands	r3, r2
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f040 808e 	bne.w	800c19e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d01d      	beq.n	800c0c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c088:	2208      	movs	r2, #8
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4413      	add	r3, r2
 800c08e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	2b00      	cmp	r3, #0
 800c098:	d014      	beq.n	800c0c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f023 0307 	bic.w	r3, r3, #7
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f003 0307 	and.w	r3, r3, #7
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00a      	beq.n	800c0c4 <pvPortMalloc+0x6c>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	617b      	str	r3, [r7, #20]
}
 800c0c0:	bf00      	nop
 800c0c2:	e7fe      	b.n	800c0c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d069      	beq.n	800c19e <pvPortMalloc+0x146>
 800c0ca:	4b42      	ldr	r3, [pc, #264]	; (800c1d4 <pvPortMalloc+0x17c>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d864      	bhi.n	800c19e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0d4:	4b40      	ldr	r3, [pc, #256]	; (800c1d8 <pvPortMalloc+0x180>)
 800c0d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0d8:	4b3f      	ldr	r3, [pc, #252]	; (800c1d8 <pvPortMalloc+0x180>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0de:	e004      	b.n	800c0ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d903      	bls.n	800c0fc <pvPortMalloc+0xa4>
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f1      	bne.n	800c0e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0fc:	4b33      	ldr	r3, [pc, #204]	; (800c1cc <pvPortMalloc+0x174>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c102:	429a      	cmp	r2, r3
 800c104:	d04b      	beq.n	800c19e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c106:	6a3b      	ldr	r3, [r7, #32]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2208      	movs	r2, #8
 800c10c:	4413      	add	r3, r2
 800c10e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	6a3b      	ldr	r3, [r7, #32]
 800c116:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	1ad2      	subs	r2, r2, r3
 800c120:	2308      	movs	r3, #8
 800c122:	005b      	lsls	r3, r3, #1
 800c124:	429a      	cmp	r2, r3
 800c126:	d91f      	bls.n	800c168 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	4413      	add	r3, r2
 800c12e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	f003 0307 	and.w	r3, r3, #7
 800c136:	2b00      	cmp	r3, #0
 800c138:	d00a      	beq.n	800c150 <pvPortMalloc+0xf8>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	613b      	str	r3, [r7, #16]
}
 800c14c:	bf00      	nop
 800c14e:	e7fe      	b.n	800c14e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	1ad2      	subs	r2, r2, r3
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c162:	69b8      	ldr	r0, [r7, #24]
 800c164:	f000 f8f8 	bl	800c358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c168:	4b1a      	ldr	r3, [pc, #104]	; (800c1d4 <pvPortMalloc+0x17c>)
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	4a18      	ldr	r2, [pc, #96]	; (800c1d4 <pvPortMalloc+0x17c>)
 800c174:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c176:	4b17      	ldr	r3, [pc, #92]	; (800c1d4 <pvPortMalloc+0x17c>)
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	4b18      	ldr	r3, [pc, #96]	; (800c1dc <pvPortMalloc+0x184>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d203      	bcs.n	800c18a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c182:	4b14      	ldr	r3, [pc, #80]	; (800c1d4 <pvPortMalloc+0x17c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a15      	ldr	r2, [pc, #84]	; (800c1dc <pvPortMalloc+0x184>)
 800c188:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <pvPortMalloc+0x178>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	431a      	orrs	r2, r3
 800c194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c196:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c19e:	f7fe fc9d 	bl	800aadc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	f003 0307 	and.w	r3, r3, #7
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <pvPortMalloc+0x16a>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	60fb      	str	r3, [r7, #12]
}
 800c1be:	bf00      	nop
 800c1c0:	e7fe      	b.n	800c1c0 <pvPortMalloc+0x168>
	return pvReturn;
 800c1c2:	69fb      	ldr	r3, [r7, #28]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3728      	adds	r7, #40	; 0x28
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	200028c8 	.word	0x200028c8
 800c1d0:	200028d4 	.word	0x200028d4
 800c1d4:	200028cc 	.word	0x200028cc
 800c1d8:	200028c0 	.word	0x200028c0
 800c1dc:	200028d0 	.word	0x200028d0

0800c1e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d048      	beq.n	800c284 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1f2:	2308      	movs	r3, #8
 800c1f4:	425b      	negs	r3, r3
 800c1f6:	697a      	ldr	r2, [r7, #20]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	685a      	ldr	r2, [r3, #4]
 800c204:	4b21      	ldr	r3, [pc, #132]	; (800c28c <vPortFree+0xac>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4013      	ands	r3, r2
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10a      	bne.n	800c224 <vPortFree+0x44>
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	60fb      	str	r3, [r7, #12]
}
 800c220:	bf00      	nop
 800c222:	e7fe      	b.n	800c222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <vPortFree+0x62>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	60bb      	str	r3, [r7, #8]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	685a      	ldr	r2, [r3, #4]
 800c246:	4b11      	ldr	r3, [pc, #68]	; (800c28c <vPortFree+0xac>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4013      	ands	r3, r2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d019      	beq.n	800c284 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d115      	bne.n	800c284 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	4b0b      	ldr	r3, [pc, #44]	; (800c28c <vPortFree+0xac>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	43db      	mvns	r3, r3
 800c262:	401a      	ands	r2, r3
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c268:	f7fe fc2a 	bl	800aac0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	4b07      	ldr	r3, [pc, #28]	; (800c290 <vPortFree+0xb0>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4413      	add	r3, r2
 800c276:	4a06      	ldr	r2, [pc, #24]	; (800c290 <vPortFree+0xb0>)
 800c278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c27a:	6938      	ldr	r0, [r7, #16]
 800c27c:	f000 f86c 	bl	800c358 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c280:	f7fe fc2c 	bl	800aadc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c284:	bf00      	nop
 800c286:	3718      	adds	r7, #24
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	200028d4 	.word	0x200028d4
 800c290:	200028cc 	.word	0x200028cc

0800c294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c29a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800c29e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2a0:	4b27      	ldr	r3, [pc, #156]	; (800c340 <prvHeapInit+0xac>)
 800c2a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f003 0307 	and.w	r3, r3, #7
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00c      	beq.n	800c2c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	3307      	adds	r3, #7
 800c2b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f023 0307 	bic.w	r3, r3, #7
 800c2ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2bc:	68ba      	ldr	r2, [r7, #8]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	4a1f      	ldr	r2, [pc, #124]	; (800c340 <prvHeapInit+0xac>)
 800c2c4:	4413      	add	r3, r2
 800c2c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2cc:	4a1d      	ldr	r2, [pc, #116]	; (800c344 <prvHeapInit+0xb0>)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2d2:	4b1c      	ldr	r3, [pc, #112]	; (800c344 <prvHeapInit+0xb0>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	4413      	add	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	1a9b      	subs	r3, r3, r2
 800c2e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f023 0307 	bic.w	r3, r3, #7
 800c2ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4a15      	ldr	r2, [pc, #84]	; (800c348 <prvHeapInit+0xb4>)
 800c2f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2f6:	4b14      	ldr	r3, [pc, #80]	; (800c348 <prvHeapInit+0xb4>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2fe:	4b12      	ldr	r3, [pc, #72]	; (800c348 <prvHeapInit+0xb4>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	1ad2      	subs	r2, r2, r3
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c314:	4b0c      	ldr	r3, [pc, #48]	; (800c348 <prvHeapInit+0xb4>)
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	4a0a      	ldr	r2, [pc, #40]	; (800c34c <prvHeapInit+0xb8>)
 800c322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	4a09      	ldr	r2, [pc, #36]	; (800c350 <prvHeapInit+0xbc>)
 800c32a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c32c:	4b09      	ldr	r3, [pc, #36]	; (800c354 <prvHeapInit+0xc0>)
 800c32e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c332:	601a      	str	r2, [r3, #0]
}
 800c334:	bf00      	nop
 800c336:	3714      	adds	r7, #20
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	200014c0 	.word	0x200014c0
 800c344:	200028c0 	.word	0x200028c0
 800c348:	200028c8 	.word	0x200028c8
 800c34c:	200028d0 	.word	0x200028d0
 800c350:	200028cc 	.word	0x200028cc
 800c354:	200028d4 	.word	0x200028d4

0800c358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c360:	4b28      	ldr	r3, [pc, #160]	; (800c404 <prvInsertBlockIntoFreeList+0xac>)
 800c362:	60fb      	str	r3, [r7, #12]
 800c364:	e002      	b.n	800c36c <prvInsertBlockIntoFreeList+0x14>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	429a      	cmp	r2, r3
 800c374:	d8f7      	bhi.n	800c366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	4413      	add	r3, r2
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	429a      	cmp	r2, r3
 800c386:	d108      	bne.n	800c39a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	685a      	ldr	r2, [r3, #4]
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	441a      	add	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	441a      	add	r2, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d118      	bne.n	800c3e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	4b15      	ldr	r3, [pc, #84]	; (800c408 <prvInsertBlockIntoFreeList+0xb0>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d00d      	beq.n	800c3d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	441a      	add	r2, r3
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681a      	ldr	r2, [r3, #0]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	601a      	str	r2, [r3, #0]
 800c3d4:	e008      	b.n	800c3e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3d6:	4b0c      	ldr	r3, [pc, #48]	; (800c408 <prvInsertBlockIntoFreeList+0xb0>)
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	e003      	b.n	800c3e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d002      	beq.n	800c3f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3f6:	bf00      	nop
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	200028c0 	.word	0x200028c0
 800c408:	200028c8 	.word	0x200028c8

0800c40c <__cvt>:
 800c40c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c410:	ec55 4b10 	vmov	r4, r5, d0
 800c414:	2d00      	cmp	r5, #0
 800c416:	460e      	mov	r6, r1
 800c418:	4619      	mov	r1, r3
 800c41a:	462b      	mov	r3, r5
 800c41c:	bfbb      	ittet	lt
 800c41e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c422:	461d      	movlt	r5, r3
 800c424:	2300      	movge	r3, #0
 800c426:	232d      	movlt	r3, #45	; 0x2d
 800c428:	700b      	strb	r3, [r1, #0]
 800c42a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c42c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c430:	4691      	mov	r9, r2
 800c432:	f023 0820 	bic.w	r8, r3, #32
 800c436:	bfbc      	itt	lt
 800c438:	4622      	movlt	r2, r4
 800c43a:	4614      	movlt	r4, r2
 800c43c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c440:	d005      	beq.n	800c44e <__cvt+0x42>
 800c442:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c446:	d100      	bne.n	800c44a <__cvt+0x3e>
 800c448:	3601      	adds	r6, #1
 800c44a:	2102      	movs	r1, #2
 800c44c:	e000      	b.n	800c450 <__cvt+0x44>
 800c44e:	2103      	movs	r1, #3
 800c450:	ab03      	add	r3, sp, #12
 800c452:	9301      	str	r3, [sp, #4]
 800c454:	ab02      	add	r3, sp, #8
 800c456:	9300      	str	r3, [sp, #0]
 800c458:	ec45 4b10 	vmov	d0, r4, r5
 800c45c:	4653      	mov	r3, sl
 800c45e:	4632      	mov	r2, r6
 800c460:	f000 ff9a 	bl	800d398 <_dtoa_r>
 800c464:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c468:	4607      	mov	r7, r0
 800c46a:	d102      	bne.n	800c472 <__cvt+0x66>
 800c46c:	f019 0f01 	tst.w	r9, #1
 800c470:	d022      	beq.n	800c4b8 <__cvt+0xac>
 800c472:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c476:	eb07 0906 	add.w	r9, r7, r6
 800c47a:	d110      	bne.n	800c49e <__cvt+0x92>
 800c47c:	783b      	ldrb	r3, [r7, #0]
 800c47e:	2b30      	cmp	r3, #48	; 0x30
 800c480:	d10a      	bne.n	800c498 <__cvt+0x8c>
 800c482:	2200      	movs	r2, #0
 800c484:	2300      	movs	r3, #0
 800c486:	4620      	mov	r0, r4
 800c488:	4629      	mov	r1, r5
 800c48a:	f7f4 fb25 	bl	8000ad8 <__aeabi_dcmpeq>
 800c48e:	b918      	cbnz	r0, 800c498 <__cvt+0x8c>
 800c490:	f1c6 0601 	rsb	r6, r6, #1
 800c494:	f8ca 6000 	str.w	r6, [sl]
 800c498:	f8da 3000 	ldr.w	r3, [sl]
 800c49c:	4499      	add	r9, r3
 800c49e:	2200      	movs	r2, #0
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	f7f4 fb17 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4aa:	b108      	cbz	r0, 800c4b0 <__cvt+0xa4>
 800c4ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800c4b0:	2230      	movs	r2, #48	; 0x30
 800c4b2:	9b03      	ldr	r3, [sp, #12]
 800c4b4:	454b      	cmp	r3, r9
 800c4b6:	d307      	bcc.n	800c4c8 <__cvt+0xbc>
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4bc:	1bdb      	subs	r3, r3, r7
 800c4be:	4638      	mov	r0, r7
 800c4c0:	6013      	str	r3, [r2, #0]
 800c4c2:	b004      	add	sp, #16
 800c4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c8:	1c59      	adds	r1, r3, #1
 800c4ca:	9103      	str	r1, [sp, #12]
 800c4cc:	701a      	strb	r2, [r3, #0]
 800c4ce:	e7f0      	b.n	800c4b2 <__cvt+0xa6>

0800c4d0 <__exponent>:
 800c4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2900      	cmp	r1, #0
 800c4d6:	bfb8      	it	lt
 800c4d8:	4249      	neglt	r1, r1
 800c4da:	f803 2b02 	strb.w	r2, [r3], #2
 800c4de:	bfb4      	ite	lt
 800c4e0:	222d      	movlt	r2, #45	; 0x2d
 800c4e2:	222b      	movge	r2, #43	; 0x2b
 800c4e4:	2909      	cmp	r1, #9
 800c4e6:	7042      	strb	r2, [r0, #1]
 800c4e8:	dd2a      	ble.n	800c540 <__exponent+0x70>
 800c4ea:	f10d 0207 	add.w	r2, sp, #7
 800c4ee:	4617      	mov	r7, r2
 800c4f0:	260a      	movs	r6, #10
 800c4f2:	4694      	mov	ip, r2
 800c4f4:	fb91 f5f6 	sdiv	r5, r1, r6
 800c4f8:	fb06 1415 	mls	r4, r6, r5, r1
 800c4fc:	3430      	adds	r4, #48	; 0x30
 800c4fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c502:	460c      	mov	r4, r1
 800c504:	2c63      	cmp	r4, #99	; 0x63
 800c506:	f102 32ff 	add.w	r2, r2, #4294967295
 800c50a:	4629      	mov	r1, r5
 800c50c:	dcf1      	bgt.n	800c4f2 <__exponent+0x22>
 800c50e:	3130      	adds	r1, #48	; 0x30
 800c510:	f1ac 0402 	sub.w	r4, ip, #2
 800c514:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c518:	1c41      	adds	r1, r0, #1
 800c51a:	4622      	mov	r2, r4
 800c51c:	42ba      	cmp	r2, r7
 800c51e:	d30a      	bcc.n	800c536 <__exponent+0x66>
 800c520:	f10d 0209 	add.w	r2, sp, #9
 800c524:	eba2 020c 	sub.w	r2, r2, ip
 800c528:	42bc      	cmp	r4, r7
 800c52a:	bf88      	it	hi
 800c52c:	2200      	movhi	r2, #0
 800c52e:	4413      	add	r3, r2
 800c530:	1a18      	subs	r0, r3, r0
 800c532:	b003      	add	sp, #12
 800c534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c536:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c53a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c53e:	e7ed      	b.n	800c51c <__exponent+0x4c>
 800c540:	2330      	movs	r3, #48	; 0x30
 800c542:	3130      	adds	r1, #48	; 0x30
 800c544:	7083      	strb	r3, [r0, #2]
 800c546:	70c1      	strb	r1, [r0, #3]
 800c548:	1d03      	adds	r3, r0, #4
 800c54a:	e7f1      	b.n	800c530 <__exponent+0x60>

0800c54c <_printf_float>:
 800c54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c550:	ed2d 8b02 	vpush	{d8}
 800c554:	b08d      	sub	sp, #52	; 0x34
 800c556:	460c      	mov	r4, r1
 800c558:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c55c:	4616      	mov	r6, r2
 800c55e:	461f      	mov	r7, r3
 800c560:	4605      	mov	r5, r0
 800c562:	f000 fdb7 	bl	800d0d4 <_localeconv_r>
 800c566:	f8d0 a000 	ldr.w	sl, [r0]
 800c56a:	4650      	mov	r0, sl
 800c56c:	f7f3 fe88 	bl	8000280 <strlen>
 800c570:	2300      	movs	r3, #0
 800c572:	930a      	str	r3, [sp, #40]	; 0x28
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	9305      	str	r3, [sp, #20]
 800c578:	f8d8 3000 	ldr.w	r3, [r8]
 800c57c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c580:	3307      	adds	r3, #7
 800c582:	f023 0307 	bic.w	r3, r3, #7
 800c586:	f103 0208 	add.w	r2, r3, #8
 800c58a:	f8c8 2000 	str.w	r2, [r8]
 800c58e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c592:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c596:	9307      	str	r3, [sp, #28]
 800c598:	f8cd 8018 	str.w	r8, [sp, #24]
 800c59c:	ee08 0a10 	vmov	s16, r0
 800c5a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c5a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5a8:	4b9e      	ldr	r3, [pc, #632]	; (800c824 <_printf_float+0x2d8>)
 800c5aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c5ae:	f7f4 fac5 	bl	8000b3c <__aeabi_dcmpun>
 800c5b2:	bb88      	cbnz	r0, 800c618 <_printf_float+0xcc>
 800c5b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5b8:	4b9a      	ldr	r3, [pc, #616]	; (800c824 <_printf_float+0x2d8>)
 800c5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c5be:	f7f4 fa9f 	bl	8000b00 <__aeabi_dcmple>
 800c5c2:	bb48      	cbnz	r0, 800c618 <_printf_float+0xcc>
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	f7f4 fa8e 	bl	8000aec <__aeabi_dcmplt>
 800c5d0:	b110      	cbz	r0, 800c5d8 <_printf_float+0x8c>
 800c5d2:	232d      	movs	r3, #45	; 0x2d
 800c5d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d8:	4a93      	ldr	r2, [pc, #588]	; (800c828 <_printf_float+0x2dc>)
 800c5da:	4b94      	ldr	r3, [pc, #592]	; (800c82c <_printf_float+0x2e0>)
 800c5dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c5e0:	bf94      	ite	ls
 800c5e2:	4690      	movls	r8, r2
 800c5e4:	4698      	movhi	r8, r3
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	6123      	str	r3, [r4, #16]
 800c5ea:	9b05      	ldr	r3, [sp, #20]
 800c5ec:	f023 0304 	bic.w	r3, r3, #4
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	f04f 0900 	mov.w	r9, #0
 800c5f6:	9700      	str	r7, [sp, #0]
 800c5f8:	4633      	mov	r3, r6
 800c5fa:	aa0b      	add	r2, sp, #44	; 0x2c
 800c5fc:	4621      	mov	r1, r4
 800c5fe:	4628      	mov	r0, r5
 800c600:	f000 f9da 	bl	800c9b8 <_printf_common>
 800c604:	3001      	adds	r0, #1
 800c606:	f040 8090 	bne.w	800c72a <_printf_float+0x1de>
 800c60a:	f04f 30ff 	mov.w	r0, #4294967295
 800c60e:	b00d      	add	sp, #52	; 0x34
 800c610:	ecbd 8b02 	vpop	{d8}
 800c614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c618:	4642      	mov	r2, r8
 800c61a:	464b      	mov	r3, r9
 800c61c:	4640      	mov	r0, r8
 800c61e:	4649      	mov	r1, r9
 800c620:	f7f4 fa8c 	bl	8000b3c <__aeabi_dcmpun>
 800c624:	b140      	cbz	r0, 800c638 <_printf_float+0xec>
 800c626:	464b      	mov	r3, r9
 800c628:	2b00      	cmp	r3, #0
 800c62a:	bfbc      	itt	lt
 800c62c:	232d      	movlt	r3, #45	; 0x2d
 800c62e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c632:	4a7f      	ldr	r2, [pc, #508]	; (800c830 <_printf_float+0x2e4>)
 800c634:	4b7f      	ldr	r3, [pc, #508]	; (800c834 <_printf_float+0x2e8>)
 800c636:	e7d1      	b.n	800c5dc <_printf_float+0x90>
 800c638:	6863      	ldr	r3, [r4, #4]
 800c63a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c63e:	9206      	str	r2, [sp, #24]
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	d13f      	bne.n	800c6c4 <_printf_float+0x178>
 800c644:	2306      	movs	r3, #6
 800c646:	6063      	str	r3, [r4, #4]
 800c648:	9b05      	ldr	r3, [sp, #20]
 800c64a:	6861      	ldr	r1, [r4, #4]
 800c64c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c650:	2300      	movs	r3, #0
 800c652:	9303      	str	r3, [sp, #12]
 800c654:	ab0a      	add	r3, sp, #40	; 0x28
 800c656:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c65a:	ab09      	add	r3, sp, #36	; 0x24
 800c65c:	ec49 8b10 	vmov	d0, r8, r9
 800c660:	9300      	str	r3, [sp, #0]
 800c662:	6022      	str	r2, [r4, #0]
 800c664:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c668:	4628      	mov	r0, r5
 800c66a:	f7ff fecf 	bl	800c40c <__cvt>
 800c66e:	9b06      	ldr	r3, [sp, #24]
 800c670:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c672:	2b47      	cmp	r3, #71	; 0x47
 800c674:	4680      	mov	r8, r0
 800c676:	d108      	bne.n	800c68a <_printf_float+0x13e>
 800c678:	1cc8      	adds	r0, r1, #3
 800c67a:	db02      	blt.n	800c682 <_printf_float+0x136>
 800c67c:	6863      	ldr	r3, [r4, #4]
 800c67e:	4299      	cmp	r1, r3
 800c680:	dd41      	ble.n	800c706 <_printf_float+0x1ba>
 800c682:	f1ab 0302 	sub.w	r3, fp, #2
 800c686:	fa5f fb83 	uxtb.w	fp, r3
 800c68a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c68e:	d820      	bhi.n	800c6d2 <_printf_float+0x186>
 800c690:	3901      	subs	r1, #1
 800c692:	465a      	mov	r2, fp
 800c694:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c698:	9109      	str	r1, [sp, #36]	; 0x24
 800c69a:	f7ff ff19 	bl	800c4d0 <__exponent>
 800c69e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c6a0:	1813      	adds	r3, r2, r0
 800c6a2:	2a01      	cmp	r2, #1
 800c6a4:	4681      	mov	r9, r0
 800c6a6:	6123      	str	r3, [r4, #16]
 800c6a8:	dc02      	bgt.n	800c6b0 <_printf_float+0x164>
 800c6aa:	6822      	ldr	r2, [r4, #0]
 800c6ac:	07d2      	lsls	r2, r2, #31
 800c6ae:	d501      	bpl.n	800c6b4 <_printf_float+0x168>
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	6123      	str	r3, [r4, #16]
 800c6b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d09c      	beq.n	800c5f6 <_printf_float+0xaa>
 800c6bc:	232d      	movs	r3, #45	; 0x2d
 800c6be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6c2:	e798      	b.n	800c5f6 <_printf_float+0xaa>
 800c6c4:	9a06      	ldr	r2, [sp, #24]
 800c6c6:	2a47      	cmp	r2, #71	; 0x47
 800c6c8:	d1be      	bne.n	800c648 <_printf_float+0xfc>
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1bc      	bne.n	800c648 <_printf_float+0xfc>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e7b9      	b.n	800c646 <_printf_float+0xfa>
 800c6d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c6d6:	d118      	bne.n	800c70a <_printf_float+0x1be>
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	6863      	ldr	r3, [r4, #4]
 800c6dc:	dd0b      	ble.n	800c6f6 <_printf_float+0x1aa>
 800c6de:	6121      	str	r1, [r4, #16]
 800c6e0:	b913      	cbnz	r3, 800c6e8 <_printf_float+0x19c>
 800c6e2:	6822      	ldr	r2, [r4, #0]
 800c6e4:	07d0      	lsls	r0, r2, #31
 800c6e6:	d502      	bpl.n	800c6ee <_printf_float+0x1a2>
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	440b      	add	r3, r1
 800c6ec:	6123      	str	r3, [r4, #16]
 800c6ee:	65a1      	str	r1, [r4, #88]	; 0x58
 800c6f0:	f04f 0900 	mov.w	r9, #0
 800c6f4:	e7de      	b.n	800c6b4 <_printf_float+0x168>
 800c6f6:	b913      	cbnz	r3, 800c6fe <_printf_float+0x1b2>
 800c6f8:	6822      	ldr	r2, [r4, #0]
 800c6fa:	07d2      	lsls	r2, r2, #31
 800c6fc:	d501      	bpl.n	800c702 <_printf_float+0x1b6>
 800c6fe:	3302      	adds	r3, #2
 800c700:	e7f4      	b.n	800c6ec <_printf_float+0x1a0>
 800c702:	2301      	movs	r3, #1
 800c704:	e7f2      	b.n	800c6ec <_printf_float+0x1a0>
 800c706:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c70a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c70c:	4299      	cmp	r1, r3
 800c70e:	db05      	blt.n	800c71c <_printf_float+0x1d0>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	6121      	str	r1, [r4, #16]
 800c714:	07d8      	lsls	r0, r3, #31
 800c716:	d5ea      	bpl.n	800c6ee <_printf_float+0x1a2>
 800c718:	1c4b      	adds	r3, r1, #1
 800c71a:	e7e7      	b.n	800c6ec <_printf_float+0x1a0>
 800c71c:	2900      	cmp	r1, #0
 800c71e:	bfd4      	ite	le
 800c720:	f1c1 0202 	rsble	r2, r1, #2
 800c724:	2201      	movgt	r2, #1
 800c726:	4413      	add	r3, r2
 800c728:	e7e0      	b.n	800c6ec <_printf_float+0x1a0>
 800c72a:	6823      	ldr	r3, [r4, #0]
 800c72c:	055a      	lsls	r2, r3, #21
 800c72e:	d407      	bmi.n	800c740 <_printf_float+0x1f4>
 800c730:	6923      	ldr	r3, [r4, #16]
 800c732:	4642      	mov	r2, r8
 800c734:	4631      	mov	r1, r6
 800c736:	4628      	mov	r0, r5
 800c738:	47b8      	blx	r7
 800c73a:	3001      	adds	r0, #1
 800c73c:	d12c      	bne.n	800c798 <_printf_float+0x24c>
 800c73e:	e764      	b.n	800c60a <_printf_float+0xbe>
 800c740:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c744:	f240 80e0 	bls.w	800c908 <_printf_float+0x3bc>
 800c748:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c74c:	2200      	movs	r2, #0
 800c74e:	2300      	movs	r3, #0
 800c750:	f7f4 f9c2 	bl	8000ad8 <__aeabi_dcmpeq>
 800c754:	2800      	cmp	r0, #0
 800c756:	d034      	beq.n	800c7c2 <_printf_float+0x276>
 800c758:	4a37      	ldr	r2, [pc, #220]	; (800c838 <_printf_float+0x2ec>)
 800c75a:	2301      	movs	r3, #1
 800c75c:	4631      	mov	r1, r6
 800c75e:	4628      	mov	r0, r5
 800c760:	47b8      	blx	r7
 800c762:	3001      	adds	r0, #1
 800c764:	f43f af51 	beq.w	800c60a <_printf_float+0xbe>
 800c768:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c76c:	429a      	cmp	r2, r3
 800c76e:	db02      	blt.n	800c776 <_printf_float+0x22a>
 800c770:	6823      	ldr	r3, [r4, #0]
 800c772:	07d8      	lsls	r0, r3, #31
 800c774:	d510      	bpl.n	800c798 <_printf_float+0x24c>
 800c776:	ee18 3a10 	vmov	r3, s16
 800c77a:	4652      	mov	r2, sl
 800c77c:	4631      	mov	r1, r6
 800c77e:	4628      	mov	r0, r5
 800c780:	47b8      	blx	r7
 800c782:	3001      	adds	r0, #1
 800c784:	f43f af41 	beq.w	800c60a <_printf_float+0xbe>
 800c788:	f04f 0800 	mov.w	r8, #0
 800c78c:	f104 091a 	add.w	r9, r4, #26
 800c790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c792:	3b01      	subs	r3, #1
 800c794:	4543      	cmp	r3, r8
 800c796:	dc09      	bgt.n	800c7ac <_printf_float+0x260>
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	079b      	lsls	r3, r3, #30
 800c79c:	f100 8107 	bmi.w	800c9ae <_printf_float+0x462>
 800c7a0:	68e0      	ldr	r0, [r4, #12]
 800c7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7a4:	4298      	cmp	r0, r3
 800c7a6:	bfb8      	it	lt
 800c7a8:	4618      	movlt	r0, r3
 800c7aa:	e730      	b.n	800c60e <_printf_float+0xc2>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	464a      	mov	r2, r9
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	47b8      	blx	r7
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f43f af27 	beq.w	800c60a <_printf_float+0xbe>
 800c7bc:	f108 0801 	add.w	r8, r8, #1
 800c7c0:	e7e6      	b.n	800c790 <_printf_float+0x244>
 800c7c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	dc39      	bgt.n	800c83c <_printf_float+0x2f0>
 800c7c8:	4a1b      	ldr	r2, [pc, #108]	; (800c838 <_printf_float+0x2ec>)
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	4631      	mov	r1, r6
 800c7ce:	4628      	mov	r0, r5
 800c7d0:	47b8      	blx	r7
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	f43f af19 	beq.w	800c60a <_printf_float+0xbe>
 800c7d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	d102      	bne.n	800c7e6 <_printf_float+0x29a>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	07d9      	lsls	r1, r3, #31
 800c7e4:	d5d8      	bpl.n	800c798 <_printf_float+0x24c>
 800c7e6:	ee18 3a10 	vmov	r3, s16
 800c7ea:	4652      	mov	r2, sl
 800c7ec:	4631      	mov	r1, r6
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	47b8      	blx	r7
 800c7f2:	3001      	adds	r0, #1
 800c7f4:	f43f af09 	beq.w	800c60a <_printf_float+0xbe>
 800c7f8:	f04f 0900 	mov.w	r9, #0
 800c7fc:	f104 0a1a 	add.w	sl, r4, #26
 800c800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c802:	425b      	negs	r3, r3
 800c804:	454b      	cmp	r3, r9
 800c806:	dc01      	bgt.n	800c80c <_printf_float+0x2c0>
 800c808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c80a:	e792      	b.n	800c732 <_printf_float+0x1e6>
 800c80c:	2301      	movs	r3, #1
 800c80e:	4652      	mov	r2, sl
 800c810:	4631      	mov	r1, r6
 800c812:	4628      	mov	r0, r5
 800c814:	47b8      	blx	r7
 800c816:	3001      	adds	r0, #1
 800c818:	f43f aef7 	beq.w	800c60a <_printf_float+0xbe>
 800c81c:	f109 0901 	add.w	r9, r9, #1
 800c820:	e7ee      	b.n	800c800 <_printf_float+0x2b4>
 800c822:	bf00      	nop
 800c824:	7fefffff 	.word	0x7fefffff
 800c828:	0800f334 	.word	0x0800f334
 800c82c:	0800f338 	.word	0x0800f338
 800c830:	0800f33c 	.word	0x0800f33c
 800c834:	0800f340 	.word	0x0800f340
 800c838:	0800f344 	.word	0x0800f344
 800c83c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c83e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c840:	429a      	cmp	r2, r3
 800c842:	bfa8      	it	ge
 800c844:	461a      	movge	r2, r3
 800c846:	2a00      	cmp	r2, #0
 800c848:	4691      	mov	r9, r2
 800c84a:	dc37      	bgt.n	800c8bc <_printf_float+0x370>
 800c84c:	f04f 0b00 	mov.w	fp, #0
 800c850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c854:	f104 021a 	add.w	r2, r4, #26
 800c858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c85a:	9305      	str	r3, [sp, #20]
 800c85c:	eba3 0309 	sub.w	r3, r3, r9
 800c860:	455b      	cmp	r3, fp
 800c862:	dc33      	bgt.n	800c8cc <_printf_float+0x380>
 800c864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c868:	429a      	cmp	r2, r3
 800c86a:	db3b      	blt.n	800c8e4 <_printf_float+0x398>
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	07da      	lsls	r2, r3, #31
 800c870:	d438      	bmi.n	800c8e4 <_printf_float+0x398>
 800c872:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c876:	eba2 0903 	sub.w	r9, r2, r3
 800c87a:	9b05      	ldr	r3, [sp, #20]
 800c87c:	1ad2      	subs	r2, r2, r3
 800c87e:	4591      	cmp	r9, r2
 800c880:	bfa8      	it	ge
 800c882:	4691      	movge	r9, r2
 800c884:	f1b9 0f00 	cmp.w	r9, #0
 800c888:	dc35      	bgt.n	800c8f6 <_printf_float+0x3aa>
 800c88a:	f04f 0800 	mov.w	r8, #0
 800c88e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c892:	f104 0a1a 	add.w	sl, r4, #26
 800c896:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c89a:	1a9b      	subs	r3, r3, r2
 800c89c:	eba3 0309 	sub.w	r3, r3, r9
 800c8a0:	4543      	cmp	r3, r8
 800c8a2:	f77f af79 	ble.w	800c798 <_printf_float+0x24c>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	47b8      	blx	r7
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	f43f aeaa 	beq.w	800c60a <_printf_float+0xbe>
 800c8b6:	f108 0801 	add.w	r8, r8, #1
 800c8ba:	e7ec      	b.n	800c896 <_printf_float+0x34a>
 800c8bc:	4613      	mov	r3, r2
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4642      	mov	r2, r8
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	47b8      	blx	r7
 800c8c6:	3001      	adds	r0, #1
 800c8c8:	d1c0      	bne.n	800c84c <_printf_float+0x300>
 800c8ca:	e69e      	b.n	800c60a <_printf_float+0xbe>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	4631      	mov	r1, r6
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	9205      	str	r2, [sp, #20]
 800c8d4:	47b8      	blx	r7
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	f43f ae97 	beq.w	800c60a <_printf_float+0xbe>
 800c8dc:	9a05      	ldr	r2, [sp, #20]
 800c8de:	f10b 0b01 	add.w	fp, fp, #1
 800c8e2:	e7b9      	b.n	800c858 <_printf_float+0x30c>
 800c8e4:	ee18 3a10 	vmov	r3, s16
 800c8e8:	4652      	mov	r2, sl
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b8      	blx	r7
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d1be      	bne.n	800c872 <_printf_float+0x326>
 800c8f4:	e689      	b.n	800c60a <_printf_float+0xbe>
 800c8f6:	9a05      	ldr	r2, [sp, #20]
 800c8f8:	464b      	mov	r3, r9
 800c8fa:	4442      	add	r2, r8
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	4628      	mov	r0, r5
 800c900:	47b8      	blx	r7
 800c902:	3001      	adds	r0, #1
 800c904:	d1c1      	bne.n	800c88a <_printf_float+0x33e>
 800c906:	e680      	b.n	800c60a <_printf_float+0xbe>
 800c908:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c90a:	2a01      	cmp	r2, #1
 800c90c:	dc01      	bgt.n	800c912 <_printf_float+0x3c6>
 800c90e:	07db      	lsls	r3, r3, #31
 800c910:	d53a      	bpl.n	800c988 <_printf_float+0x43c>
 800c912:	2301      	movs	r3, #1
 800c914:	4642      	mov	r2, r8
 800c916:	4631      	mov	r1, r6
 800c918:	4628      	mov	r0, r5
 800c91a:	47b8      	blx	r7
 800c91c:	3001      	adds	r0, #1
 800c91e:	f43f ae74 	beq.w	800c60a <_printf_float+0xbe>
 800c922:	ee18 3a10 	vmov	r3, s16
 800c926:	4652      	mov	r2, sl
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b8      	blx	r7
 800c92e:	3001      	adds	r0, #1
 800c930:	f43f ae6b 	beq.w	800c60a <_printf_float+0xbe>
 800c934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c938:	2200      	movs	r2, #0
 800c93a:	2300      	movs	r3, #0
 800c93c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c940:	f7f4 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 800c944:	b9d8      	cbnz	r0, 800c97e <_printf_float+0x432>
 800c946:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c94a:	f108 0201 	add.w	r2, r8, #1
 800c94e:	4631      	mov	r1, r6
 800c950:	4628      	mov	r0, r5
 800c952:	47b8      	blx	r7
 800c954:	3001      	adds	r0, #1
 800c956:	d10e      	bne.n	800c976 <_printf_float+0x42a>
 800c958:	e657      	b.n	800c60a <_printf_float+0xbe>
 800c95a:	2301      	movs	r3, #1
 800c95c:	4652      	mov	r2, sl
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	47b8      	blx	r7
 800c964:	3001      	adds	r0, #1
 800c966:	f43f ae50 	beq.w	800c60a <_printf_float+0xbe>
 800c96a:	f108 0801 	add.w	r8, r8, #1
 800c96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c970:	3b01      	subs	r3, #1
 800c972:	4543      	cmp	r3, r8
 800c974:	dcf1      	bgt.n	800c95a <_printf_float+0x40e>
 800c976:	464b      	mov	r3, r9
 800c978:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c97c:	e6da      	b.n	800c734 <_printf_float+0x1e8>
 800c97e:	f04f 0800 	mov.w	r8, #0
 800c982:	f104 0a1a 	add.w	sl, r4, #26
 800c986:	e7f2      	b.n	800c96e <_printf_float+0x422>
 800c988:	2301      	movs	r3, #1
 800c98a:	4642      	mov	r2, r8
 800c98c:	e7df      	b.n	800c94e <_printf_float+0x402>
 800c98e:	2301      	movs	r3, #1
 800c990:	464a      	mov	r2, r9
 800c992:	4631      	mov	r1, r6
 800c994:	4628      	mov	r0, r5
 800c996:	47b8      	blx	r7
 800c998:	3001      	adds	r0, #1
 800c99a:	f43f ae36 	beq.w	800c60a <_printf_float+0xbe>
 800c99e:	f108 0801 	add.w	r8, r8, #1
 800c9a2:	68e3      	ldr	r3, [r4, #12]
 800c9a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c9a6:	1a5b      	subs	r3, r3, r1
 800c9a8:	4543      	cmp	r3, r8
 800c9aa:	dcf0      	bgt.n	800c98e <_printf_float+0x442>
 800c9ac:	e6f8      	b.n	800c7a0 <_printf_float+0x254>
 800c9ae:	f04f 0800 	mov.w	r8, #0
 800c9b2:	f104 0919 	add.w	r9, r4, #25
 800c9b6:	e7f4      	b.n	800c9a2 <_printf_float+0x456>

0800c9b8 <_printf_common>:
 800c9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9bc:	4616      	mov	r6, r2
 800c9be:	4699      	mov	r9, r3
 800c9c0:	688a      	ldr	r2, [r1, #8]
 800c9c2:	690b      	ldr	r3, [r1, #16]
 800c9c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	bfb8      	it	lt
 800c9cc:	4613      	movlt	r3, r2
 800c9ce:	6033      	str	r3, [r6, #0]
 800c9d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9d4:	4607      	mov	r7, r0
 800c9d6:	460c      	mov	r4, r1
 800c9d8:	b10a      	cbz	r2, 800c9de <_printf_common+0x26>
 800c9da:	3301      	adds	r3, #1
 800c9dc:	6033      	str	r3, [r6, #0]
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	0699      	lsls	r1, r3, #26
 800c9e2:	bf42      	ittt	mi
 800c9e4:	6833      	ldrmi	r3, [r6, #0]
 800c9e6:	3302      	addmi	r3, #2
 800c9e8:	6033      	strmi	r3, [r6, #0]
 800c9ea:	6825      	ldr	r5, [r4, #0]
 800c9ec:	f015 0506 	ands.w	r5, r5, #6
 800c9f0:	d106      	bne.n	800ca00 <_printf_common+0x48>
 800c9f2:	f104 0a19 	add.w	sl, r4, #25
 800c9f6:	68e3      	ldr	r3, [r4, #12]
 800c9f8:	6832      	ldr	r2, [r6, #0]
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	42ab      	cmp	r3, r5
 800c9fe:	dc26      	bgt.n	800ca4e <_printf_common+0x96>
 800ca00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca04:	1e13      	subs	r3, r2, #0
 800ca06:	6822      	ldr	r2, [r4, #0]
 800ca08:	bf18      	it	ne
 800ca0a:	2301      	movne	r3, #1
 800ca0c:	0692      	lsls	r2, r2, #26
 800ca0e:	d42b      	bmi.n	800ca68 <_printf_common+0xb0>
 800ca10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca14:	4649      	mov	r1, r9
 800ca16:	4638      	mov	r0, r7
 800ca18:	47c0      	blx	r8
 800ca1a:	3001      	adds	r0, #1
 800ca1c:	d01e      	beq.n	800ca5c <_printf_common+0xa4>
 800ca1e:	6823      	ldr	r3, [r4, #0]
 800ca20:	6922      	ldr	r2, [r4, #16]
 800ca22:	f003 0306 	and.w	r3, r3, #6
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	bf02      	ittt	eq
 800ca2a:	68e5      	ldreq	r5, [r4, #12]
 800ca2c:	6833      	ldreq	r3, [r6, #0]
 800ca2e:	1aed      	subeq	r5, r5, r3
 800ca30:	68a3      	ldr	r3, [r4, #8]
 800ca32:	bf0c      	ite	eq
 800ca34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca38:	2500      	movne	r5, #0
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	bfc4      	itt	gt
 800ca3e:	1a9b      	subgt	r3, r3, r2
 800ca40:	18ed      	addgt	r5, r5, r3
 800ca42:	2600      	movs	r6, #0
 800ca44:	341a      	adds	r4, #26
 800ca46:	42b5      	cmp	r5, r6
 800ca48:	d11a      	bne.n	800ca80 <_printf_common+0xc8>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e008      	b.n	800ca60 <_printf_common+0xa8>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	4652      	mov	r2, sl
 800ca52:	4649      	mov	r1, r9
 800ca54:	4638      	mov	r0, r7
 800ca56:	47c0      	blx	r8
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d103      	bne.n	800ca64 <_printf_common+0xac>
 800ca5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca64:	3501      	adds	r5, #1
 800ca66:	e7c6      	b.n	800c9f6 <_printf_common+0x3e>
 800ca68:	18e1      	adds	r1, r4, r3
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	2030      	movs	r0, #48	; 0x30
 800ca6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca72:	4422      	add	r2, r4
 800ca74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca7c:	3302      	adds	r3, #2
 800ca7e:	e7c7      	b.n	800ca10 <_printf_common+0x58>
 800ca80:	2301      	movs	r3, #1
 800ca82:	4622      	mov	r2, r4
 800ca84:	4649      	mov	r1, r9
 800ca86:	4638      	mov	r0, r7
 800ca88:	47c0      	blx	r8
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	d0e6      	beq.n	800ca5c <_printf_common+0xa4>
 800ca8e:	3601      	adds	r6, #1
 800ca90:	e7d9      	b.n	800ca46 <_printf_common+0x8e>
	...

0800ca94 <_printf_i>:
 800ca94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca98:	7e0f      	ldrb	r7, [r1, #24]
 800ca9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca9c:	2f78      	cmp	r7, #120	; 0x78
 800ca9e:	4691      	mov	r9, r2
 800caa0:	4680      	mov	r8, r0
 800caa2:	460c      	mov	r4, r1
 800caa4:	469a      	mov	sl, r3
 800caa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800caaa:	d807      	bhi.n	800cabc <_printf_i+0x28>
 800caac:	2f62      	cmp	r7, #98	; 0x62
 800caae:	d80a      	bhi.n	800cac6 <_printf_i+0x32>
 800cab0:	2f00      	cmp	r7, #0
 800cab2:	f000 80d4 	beq.w	800cc5e <_printf_i+0x1ca>
 800cab6:	2f58      	cmp	r7, #88	; 0x58
 800cab8:	f000 80c0 	beq.w	800cc3c <_printf_i+0x1a8>
 800cabc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cac4:	e03a      	b.n	800cb3c <_printf_i+0xa8>
 800cac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800caca:	2b15      	cmp	r3, #21
 800cacc:	d8f6      	bhi.n	800cabc <_printf_i+0x28>
 800cace:	a101      	add	r1, pc, #4	; (adr r1, 800cad4 <_printf_i+0x40>)
 800cad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cad4:	0800cb2d 	.word	0x0800cb2d
 800cad8:	0800cb41 	.word	0x0800cb41
 800cadc:	0800cabd 	.word	0x0800cabd
 800cae0:	0800cabd 	.word	0x0800cabd
 800cae4:	0800cabd 	.word	0x0800cabd
 800cae8:	0800cabd 	.word	0x0800cabd
 800caec:	0800cb41 	.word	0x0800cb41
 800caf0:	0800cabd 	.word	0x0800cabd
 800caf4:	0800cabd 	.word	0x0800cabd
 800caf8:	0800cabd 	.word	0x0800cabd
 800cafc:	0800cabd 	.word	0x0800cabd
 800cb00:	0800cc45 	.word	0x0800cc45
 800cb04:	0800cb6d 	.word	0x0800cb6d
 800cb08:	0800cbff 	.word	0x0800cbff
 800cb0c:	0800cabd 	.word	0x0800cabd
 800cb10:	0800cabd 	.word	0x0800cabd
 800cb14:	0800cc67 	.word	0x0800cc67
 800cb18:	0800cabd 	.word	0x0800cabd
 800cb1c:	0800cb6d 	.word	0x0800cb6d
 800cb20:	0800cabd 	.word	0x0800cabd
 800cb24:	0800cabd 	.word	0x0800cabd
 800cb28:	0800cc07 	.word	0x0800cc07
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	1d1a      	adds	r2, r3, #4
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	602a      	str	r2, [r5, #0]
 800cb34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e09f      	b.n	800cc80 <_printf_i+0x1ec>
 800cb40:	6820      	ldr	r0, [r4, #0]
 800cb42:	682b      	ldr	r3, [r5, #0]
 800cb44:	0607      	lsls	r7, r0, #24
 800cb46:	f103 0104 	add.w	r1, r3, #4
 800cb4a:	6029      	str	r1, [r5, #0]
 800cb4c:	d501      	bpl.n	800cb52 <_printf_i+0xbe>
 800cb4e:	681e      	ldr	r6, [r3, #0]
 800cb50:	e003      	b.n	800cb5a <_printf_i+0xc6>
 800cb52:	0646      	lsls	r6, r0, #25
 800cb54:	d5fb      	bpl.n	800cb4e <_printf_i+0xba>
 800cb56:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cb5a:	2e00      	cmp	r6, #0
 800cb5c:	da03      	bge.n	800cb66 <_printf_i+0xd2>
 800cb5e:	232d      	movs	r3, #45	; 0x2d
 800cb60:	4276      	negs	r6, r6
 800cb62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb66:	485a      	ldr	r0, [pc, #360]	; (800ccd0 <_printf_i+0x23c>)
 800cb68:	230a      	movs	r3, #10
 800cb6a:	e012      	b.n	800cb92 <_printf_i+0xfe>
 800cb6c:	682b      	ldr	r3, [r5, #0]
 800cb6e:	6820      	ldr	r0, [r4, #0]
 800cb70:	1d19      	adds	r1, r3, #4
 800cb72:	6029      	str	r1, [r5, #0]
 800cb74:	0605      	lsls	r5, r0, #24
 800cb76:	d501      	bpl.n	800cb7c <_printf_i+0xe8>
 800cb78:	681e      	ldr	r6, [r3, #0]
 800cb7a:	e002      	b.n	800cb82 <_printf_i+0xee>
 800cb7c:	0641      	lsls	r1, r0, #25
 800cb7e:	d5fb      	bpl.n	800cb78 <_printf_i+0xe4>
 800cb80:	881e      	ldrh	r6, [r3, #0]
 800cb82:	4853      	ldr	r0, [pc, #332]	; (800ccd0 <_printf_i+0x23c>)
 800cb84:	2f6f      	cmp	r7, #111	; 0x6f
 800cb86:	bf0c      	ite	eq
 800cb88:	2308      	moveq	r3, #8
 800cb8a:	230a      	movne	r3, #10
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cb92:	6865      	ldr	r5, [r4, #4]
 800cb94:	60a5      	str	r5, [r4, #8]
 800cb96:	2d00      	cmp	r5, #0
 800cb98:	bfa2      	ittt	ge
 800cb9a:	6821      	ldrge	r1, [r4, #0]
 800cb9c:	f021 0104 	bicge.w	r1, r1, #4
 800cba0:	6021      	strge	r1, [r4, #0]
 800cba2:	b90e      	cbnz	r6, 800cba8 <_printf_i+0x114>
 800cba4:	2d00      	cmp	r5, #0
 800cba6:	d04b      	beq.n	800cc40 <_printf_i+0x1ac>
 800cba8:	4615      	mov	r5, r2
 800cbaa:	fbb6 f1f3 	udiv	r1, r6, r3
 800cbae:	fb03 6711 	mls	r7, r3, r1, r6
 800cbb2:	5dc7      	ldrb	r7, [r0, r7]
 800cbb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cbb8:	4637      	mov	r7, r6
 800cbba:	42bb      	cmp	r3, r7
 800cbbc:	460e      	mov	r6, r1
 800cbbe:	d9f4      	bls.n	800cbaa <_printf_i+0x116>
 800cbc0:	2b08      	cmp	r3, #8
 800cbc2:	d10b      	bne.n	800cbdc <_printf_i+0x148>
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	07de      	lsls	r6, r3, #31
 800cbc8:	d508      	bpl.n	800cbdc <_printf_i+0x148>
 800cbca:	6923      	ldr	r3, [r4, #16]
 800cbcc:	6861      	ldr	r1, [r4, #4]
 800cbce:	4299      	cmp	r1, r3
 800cbd0:	bfde      	ittt	le
 800cbd2:	2330      	movle	r3, #48	; 0x30
 800cbd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cbd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cbdc:	1b52      	subs	r2, r2, r5
 800cbde:	6122      	str	r2, [r4, #16]
 800cbe0:	f8cd a000 	str.w	sl, [sp]
 800cbe4:	464b      	mov	r3, r9
 800cbe6:	aa03      	add	r2, sp, #12
 800cbe8:	4621      	mov	r1, r4
 800cbea:	4640      	mov	r0, r8
 800cbec:	f7ff fee4 	bl	800c9b8 <_printf_common>
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d14a      	bne.n	800cc8a <_printf_i+0x1f6>
 800cbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbf8:	b004      	add	sp, #16
 800cbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	f043 0320 	orr.w	r3, r3, #32
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	4833      	ldr	r0, [pc, #204]	; (800ccd4 <_printf_i+0x240>)
 800cc08:	2778      	movs	r7, #120	; 0x78
 800cc0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	6829      	ldr	r1, [r5, #0]
 800cc12:	061f      	lsls	r7, r3, #24
 800cc14:	f851 6b04 	ldr.w	r6, [r1], #4
 800cc18:	d402      	bmi.n	800cc20 <_printf_i+0x18c>
 800cc1a:	065f      	lsls	r7, r3, #25
 800cc1c:	bf48      	it	mi
 800cc1e:	b2b6      	uxthmi	r6, r6
 800cc20:	07df      	lsls	r7, r3, #31
 800cc22:	bf48      	it	mi
 800cc24:	f043 0320 	orrmi.w	r3, r3, #32
 800cc28:	6029      	str	r1, [r5, #0]
 800cc2a:	bf48      	it	mi
 800cc2c:	6023      	strmi	r3, [r4, #0]
 800cc2e:	b91e      	cbnz	r6, 800cc38 <_printf_i+0x1a4>
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	f023 0320 	bic.w	r3, r3, #32
 800cc36:	6023      	str	r3, [r4, #0]
 800cc38:	2310      	movs	r3, #16
 800cc3a:	e7a7      	b.n	800cb8c <_printf_i+0xf8>
 800cc3c:	4824      	ldr	r0, [pc, #144]	; (800ccd0 <_printf_i+0x23c>)
 800cc3e:	e7e4      	b.n	800cc0a <_printf_i+0x176>
 800cc40:	4615      	mov	r5, r2
 800cc42:	e7bd      	b.n	800cbc0 <_printf_i+0x12c>
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	6826      	ldr	r6, [r4, #0]
 800cc48:	6961      	ldr	r1, [r4, #20]
 800cc4a:	1d18      	adds	r0, r3, #4
 800cc4c:	6028      	str	r0, [r5, #0]
 800cc4e:	0635      	lsls	r5, r6, #24
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	d501      	bpl.n	800cc58 <_printf_i+0x1c4>
 800cc54:	6019      	str	r1, [r3, #0]
 800cc56:	e002      	b.n	800cc5e <_printf_i+0x1ca>
 800cc58:	0670      	lsls	r0, r6, #25
 800cc5a:	d5fb      	bpl.n	800cc54 <_printf_i+0x1c0>
 800cc5c:	8019      	strh	r1, [r3, #0]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	6123      	str	r3, [r4, #16]
 800cc62:	4615      	mov	r5, r2
 800cc64:	e7bc      	b.n	800cbe0 <_printf_i+0x14c>
 800cc66:	682b      	ldr	r3, [r5, #0]
 800cc68:	1d1a      	adds	r2, r3, #4
 800cc6a:	602a      	str	r2, [r5, #0]
 800cc6c:	681d      	ldr	r5, [r3, #0]
 800cc6e:	6862      	ldr	r2, [r4, #4]
 800cc70:	2100      	movs	r1, #0
 800cc72:	4628      	mov	r0, r5
 800cc74:	f7f3 fab4 	bl	80001e0 <memchr>
 800cc78:	b108      	cbz	r0, 800cc7e <_printf_i+0x1ea>
 800cc7a:	1b40      	subs	r0, r0, r5
 800cc7c:	6060      	str	r0, [r4, #4]
 800cc7e:	6863      	ldr	r3, [r4, #4]
 800cc80:	6123      	str	r3, [r4, #16]
 800cc82:	2300      	movs	r3, #0
 800cc84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc88:	e7aa      	b.n	800cbe0 <_printf_i+0x14c>
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	462a      	mov	r2, r5
 800cc8e:	4649      	mov	r1, r9
 800cc90:	4640      	mov	r0, r8
 800cc92:	47d0      	blx	sl
 800cc94:	3001      	adds	r0, #1
 800cc96:	d0ad      	beq.n	800cbf4 <_printf_i+0x160>
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	079b      	lsls	r3, r3, #30
 800cc9c:	d413      	bmi.n	800ccc6 <_printf_i+0x232>
 800cc9e:	68e0      	ldr	r0, [r4, #12]
 800cca0:	9b03      	ldr	r3, [sp, #12]
 800cca2:	4298      	cmp	r0, r3
 800cca4:	bfb8      	it	lt
 800cca6:	4618      	movlt	r0, r3
 800cca8:	e7a6      	b.n	800cbf8 <_printf_i+0x164>
 800ccaa:	2301      	movs	r3, #1
 800ccac:	4632      	mov	r2, r6
 800ccae:	4649      	mov	r1, r9
 800ccb0:	4640      	mov	r0, r8
 800ccb2:	47d0      	blx	sl
 800ccb4:	3001      	adds	r0, #1
 800ccb6:	d09d      	beq.n	800cbf4 <_printf_i+0x160>
 800ccb8:	3501      	adds	r5, #1
 800ccba:	68e3      	ldr	r3, [r4, #12]
 800ccbc:	9903      	ldr	r1, [sp, #12]
 800ccbe:	1a5b      	subs	r3, r3, r1
 800ccc0:	42ab      	cmp	r3, r5
 800ccc2:	dcf2      	bgt.n	800ccaa <_printf_i+0x216>
 800ccc4:	e7eb      	b.n	800cc9e <_printf_i+0x20a>
 800ccc6:	2500      	movs	r5, #0
 800ccc8:	f104 0619 	add.w	r6, r4, #25
 800cccc:	e7f5      	b.n	800ccba <_printf_i+0x226>
 800ccce:	bf00      	nop
 800ccd0:	0800f346 	.word	0x0800f346
 800ccd4:	0800f357 	.word	0x0800f357

0800ccd8 <std>:
 800ccd8:	2300      	movs	r3, #0
 800ccda:	b510      	push	{r4, lr}
 800ccdc:	4604      	mov	r4, r0
 800ccde:	e9c0 3300 	strd	r3, r3, [r0]
 800cce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cce6:	6083      	str	r3, [r0, #8]
 800cce8:	8181      	strh	r1, [r0, #12]
 800ccea:	6643      	str	r3, [r0, #100]	; 0x64
 800ccec:	81c2      	strh	r2, [r0, #14]
 800ccee:	6183      	str	r3, [r0, #24]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	2208      	movs	r2, #8
 800ccf4:	305c      	adds	r0, #92	; 0x5c
 800ccf6:	f000 f9e5 	bl	800d0c4 <memset>
 800ccfa:	4b05      	ldr	r3, [pc, #20]	; (800cd10 <std+0x38>)
 800ccfc:	6263      	str	r3, [r4, #36]	; 0x24
 800ccfe:	4b05      	ldr	r3, [pc, #20]	; (800cd14 <std+0x3c>)
 800cd00:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd02:	4b05      	ldr	r3, [pc, #20]	; (800cd18 <std+0x40>)
 800cd04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <std+0x44>)
 800cd08:	6224      	str	r4, [r4, #32]
 800cd0a:	6323      	str	r3, [r4, #48]	; 0x30
 800cd0c:	bd10      	pop	{r4, pc}
 800cd0e:	bf00      	nop
 800cd10:	0800cf15 	.word	0x0800cf15
 800cd14:	0800cf37 	.word	0x0800cf37
 800cd18:	0800cf6f 	.word	0x0800cf6f
 800cd1c:	0800cf93 	.word	0x0800cf93

0800cd20 <stdio_exit_handler>:
 800cd20:	4a02      	ldr	r2, [pc, #8]	; (800cd2c <stdio_exit_handler+0xc>)
 800cd22:	4903      	ldr	r1, [pc, #12]	; (800cd30 <stdio_exit_handler+0x10>)
 800cd24:	4803      	ldr	r0, [pc, #12]	; (800cd34 <stdio_exit_handler+0x14>)
 800cd26:	f000 b869 	b.w	800cdfc <_fwalk_sglue>
 800cd2a:	bf00      	nop
 800cd2c:	2000009c 	.word	0x2000009c
 800cd30:	0800ec09 	.word	0x0800ec09
 800cd34:	200000a8 	.word	0x200000a8

0800cd38 <cleanup_stdio>:
 800cd38:	6841      	ldr	r1, [r0, #4]
 800cd3a:	4b0c      	ldr	r3, [pc, #48]	; (800cd6c <cleanup_stdio+0x34>)
 800cd3c:	4299      	cmp	r1, r3
 800cd3e:	b510      	push	{r4, lr}
 800cd40:	4604      	mov	r4, r0
 800cd42:	d001      	beq.n	800cd48 <cleanup_stdio+0x10>
 800cd44:	f001 ff60 	bl	800ec08 <_fflush_r>
 800cd48:	68a1      	ldr	r1, [r4, #8]
 800cd4a:	4b09      	ldr	r3, [pc, #36]	; (800cd70 <cleanup_stdio+0x38>)
 800cd4c:	4299      	cmp	r1, r3
 800cd4e:	d002      	beq.n	800cd56 <cleanup_stdio+0x1e>
 800cd50:	4620      	mov	r0, r4
 800cd52:	f001 ff59 	bl	800ec08 <_fflush_r>
 800cd56:	68e1      	ldr	r1, [r4, #12]
 800cd58:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <cleanup_stdio+0x3c>)
 800cd5a:	4299      	cmp	r1, r3
 800cd5c:	d004      	beq.n	800cd68 <cleanup_stdio+0x30>
 800cd5e:	4620      	mov	r0, r4
 800cd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd64:	f001 bf50 	b.w	800ec08 <_fflush_r>
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	bf00      	nop
 800cd6c:	200028d8 	.word	0x200028d8
 800cd70:	20002940 	.word	0x20002940
 800cd74:	200029a8 	.word	0x200029a8

0800cd78 <global_stdio_init.part.0>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <global_stdio_init.part.0+0x30>)
 800cd7c:	4c0b      	ldr	r4, [pc, #44]	; (800cdac <global_stdio_init.part.0+0x34>)
 800cd7e:	4a0c      	ldr	r2, [pc, #48]	; (800cdb0 <global_stdio_init.part.0+0x38>)
 800cd80:	601a      	str	r2, [r3, #0]
 800cd82:	4620      	mov	r0, r4
 800cd84:	2200      	movs	r2, #0
 800cd86:	2104      	movs	r1, #4
 800cd88:	f7ff ffa6 	bl	800ccd8 <std>
 800cd8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cd90:	2201      	movs	r2, #1
 800cd92:	2109      	movs	r1, #9
 800cd94:	f7ff ffa0 	bl	800ccd8 <std>
 800cd98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cda2:	2112      	movs	r1, #18
 800cda4:	f7ff bf98 	b.w	800ccd8 <std>
 800cda8:	20002a10 	.word	0x20002a10
 800cdac:	200028d8 	.word	0x200028d8
 800cdb0:	0800cd21 	.word	0x0800cd21

0800cdb4 <__sfp_lock_acquire>:
 800cdb4:	4801      	ldr	r0, [pc, #4]	; (800cdbc <__sfp_lock_acquire+0x8>)
 800cdb6:	f000 ba57 	b.w	800d268 <__retarget_lock_acquire_recursive>
 800cdba:	bf00      	nop
 800cdbc:	20002a19 	.word	0x20002a19

0800cdc0 <__sfp_lock_release>:
 800cdc0:	4801      	ldr	r0, [pc, #4]	; (800cdc8 <__sfp_lock_release+0x8>)
 800cdc2:	f000 ba52 	b.w	800d26a <__retarget_lock_release_recursive>
 800cdc6:	bf00      	nop
 800cdc8:	20002a19 	.word	0x20002a19

0800cdcc <__sinit>:
 800cdcc:	b510      	push	{r4, lr}
 800cdce:	4604      	mov	r4, r0
 800cdd0:	f7ff fff0 	bl	800cdb4 <__sfp_lock_acquire>
 800cdd4:	6a23      	ldr	r3, [r4, #32]
 800cdd6:	b11b      	cbz	r3, 800cde0 <__sinit+0x14>
 800cdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cddc:	f7ff bff0 	b.w	800cdc0 <__sfp_lock_release>
 800cde0:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <__sinit+0x28>)
 800cde2:	6223      	str	r3, [r4, #32]
 800cde4:	4b04      	ldr	r3, [pc, #16]	; (800cdf8 <__sinit+0x2c>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1f5      	bne.n	800cdd8 <__sinit+0xc>
 800cdec:	f7ff ffc4 	bl	800cd78 <global_stdio_init.part.0>
 800cdf0:	e7f2      	b.n	800cdd8 <__sinit+0xc>
 800cdf2:	bf00      	nop
 800cdf4:	0800cd39 	.word	0x0800cd39
 800cdf8:	20002a10 	.word	0x20002a10

0800cdfc <_fwalk_sglue>:
 800cdfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce00:	4607      	mov	r7, r0
 800ce02:	4688      	mov	r8, r1
 800ce04:	4614      	mov	r4, r2
 800ce06:	2600      	movs	r6, #0
 800ce08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ce10:	d505      	bpl.n	800ce1e <_fwalk_sglue+0x22>
 800ce12:	6824      	ldr	r4, [r4, #0]
 800ce14:	2c00      	cmp	r4, #0
 800ce16:	d1f7      	bne.n	800ce08 <_fwalk_sglue+0xc>
 800ce18:	4630      	mov	r0, r6
 800ce1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce1e:	89ab      	ldrh	r3, [r5, #12]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d907      	bls.n	800ce34 <_fwalk_sglue+0x38>
 800ce24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	d003      	beq.n	800ce34 <_fwalk_sglue+0x38>
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4638      	mov	r0, r7
 800ce30:	47c0      	blx	r8
 800ce32:	4306      	orrs	r6, r0
 800ce34:	3568      	adds	r5, #104	; 0x68
 800ce36:	e7e9      	b.n	800ce0c <_fwalk_sglue+0x10>

0800ce38 <iprintf>:
 800ce38:	b40f      	push	{r0, r1, r2, r3}
 800ce3a:	b507      	push	{r0, r1, r2, lr}
 800ce3c:	4906      	ldr	r1, [pc, #24]	; (800ce58 <iprintf+0x20>)
 800ce3e:	ab04      	add	r3, sp, #16
 800ce40:	6808      	ldr	r0, [r1, #0]
 800ce42:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce46:	6881      	ldr	r1, [r0, #8]
 800ce48:	9301      	str	r3, [sp, #4]
 800ce4a:	f001 fd3d 	bl	800e8c8 <_vfiprintf_r>
 800ce4e:	b003      	add	sp, #12
 800ce50:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce54:	b004      	add	sp, #16
 800ce56:	4770      	bx	lr
 800ce58:	200000f4 	.word	0x200000f4

0800ce5c <_puts_r>:
 800ce5c:	6a03      	ldr	r3, [r0, #32]
 800ce5e:	b570      	push	{r4, r5, r6, lr}
 800ce60:	6884      	ldr	r4, [r0, #8]
 800ce62:	4605      	mov	r5, r0
 800ce64:	460e      	mov	r6, r1
 800ce66:	b90b      	cbnz	r3, 800ce6c <_puts_r+0x10>
 800ce68:	f7ff ffb0 	bl	800cdcc <__sinit>
 800ce6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce6e:	07db      	lsls	r3, r3, #31
 800ce70:	d405      	bmi.n	800ce7e <_puts_r+0x22>
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	0598      	lsls	r0, r3, #22
 800ce76:	d402      	bmi.n	800ce7e <_puts_r+0x22>
 800ce78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce7a:	f000 f9f5 	bl	800d268 <__retarget_lock_acquire_recursive>
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	0719      	lsls	r1, r3, #28
 800ce82:	d513      	bpl.n	800ceac <_puts_r+0x50>
 800ce84:	6923      	ldr	r3, [r4, #16]
 800ce86:	b18b      	cbz	r3, 800ceac <_puts_r+0x50>
 800ce88:	3e01      	subs	r6, #1
 800ce8a:	68a3      	ldr	r3, [r4, #8]
 800ce8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ce90:	3b01      	subs	r3, #1
 800ce92:	60a3      	str	r3, [r4, #8]
 800ce94:	b9e9      	cbnz	r1, 800ced2 <_puts_r+0x76>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	da2e      	bge.n	800cef8 <_puts_r+0x9c>
 800ce9a:	4622      	mov	r2, r4
 800ce9c:	210a      	movs	r1, #10
 800ce9e:	4628      	mov	r0, r5
 800cea0:	f000 f87b 	bl	800cf9a <__swbuf_r>
 800cea4:	3001      	adds	r0, #1
 800cea6:	d007      	beq.n	800ceb8 <_puts_r+0x5c>
 800cea8:	250a      	movs	r5, #10
 800ceaa:	e007      	b.n	800cebc <_puts_r+0x60>
 800ceac:	4621      	mov	r1, r4
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f000 f8b0 	bl	800d014 <__swsetup_r>
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	d0e7      	beq.n	800ce88 <_puts_r+0x2c>
 800ceb8:	f04f 35ff 	mov.w	r5, #4294967295
 800cebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cebe:	07da      	lsls	r2, r3, #31
 800cec0:	d405      	bmi.n	800cece <_puts_r+0x72>
 800cec2:	89a3      	ldrh	r3, [r4, #12]
 800cec4:	059b      	lsls	r3, r3, #22
 800cec6:	d402      	bmi.n	800cece <_puts_r+0x72>
 800cec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceca:	f000 f9ce 	bl	800d26a <__retarget_lock_release_recursive>
 800cece:	4628      	mov	r0, r5
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	da04      	bge.n	800cee0 <_puts_r+0x84>
 800ced6:	69a2      	ldr	r2, [r4, #24]
 800ced8:	429a      	cmp	r2, r3
 800ceda:	dc06      	bgt.n	800ceea <_puts_r+0x8e>
 800cedc:	290a      	cmp	r1, #10
 800cede:	d004      	beq.n	800ceea <_puts_r+0x8e>
 800cee0:	6823      	ldr	r3, [r4, #0]
 800cee2:	1c5a      	adds	r2, r3, #1
 800cee4:	6022      	str	r2, [r4, #0]
 800cee6:	7019      	strb	r1, [r3, #0]
 800cee8:	e7cf      	b.n	800ce8a <_puts_r+0x2e>
 800ceea:	4622      	mov	r2, r4
 800ceec:	4628      	mov	r0, r5
 800ceee:	f000 f854 	bl	800cf9a <__swbuf_r>
 800cef2:	3001      	adds	r0, #1
 800cef4:	d1c9      	bne.n	800ce8a <_puts_r+0x2e>
 800cef6:	e7df      	b.n	800ceb8 <_puts_r+0x5c>
 800cef8:	6823      	ldr	r3, [r4, #0]
 800cefa:	250a      	movs	r5, #10
 800cefc:	1c5a      	adds	r2, r3, #1
 800cefe:	6022      	str	r2, [r4, #0]
 800cf00:	701d      	strb	r5, [r3, #0]
 800cf02:	e7db      	b.n	800cebc <_puts_r+0x60>

0800cf04 <puts>:
 800cf04:	4b02      	ldr	r3, [pc, #8]	; (800cf10 <puts+0xc>)
 800cf06:	4601      	mov	r1, r0
 800cf08:	6818      	ldr	r0, [r3, #0]
 800cf0a:	f7ff bfa7 	b.w	800ce5c <_puts_r>
 800cf0e:	bf00      	nop
 800cf10:	200000f4 	.word	0x200000f4

0800cf14 <__sread>:
 800cf14:	b510      	push	{r4, lr}
 800cf16:	460c      	mov	r4, r1
 800cf18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf1c:	f000 f956 	bl	800d1cc <_read_r>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	bfab      	itete	ge
 800cf24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cf26:	89a3      	ldrhlt	r3, [r4, #12]
 800cf28:	181b      	addge	r3, r3, r0
 800cf2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cf2e:	bfac      	ite	ge
 800cf30:	6563      	strge	r3, [r4, #84]	; 0x54
 800cf32:	81a3      	strhlt	r3, [r4, #12]
 800cf34:	bd10      	pop	{r4, pc}

0800cf36 <__swrite>:
 800cf36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf3a:	461f      	mov	r7, r3
 800cf3c:	898b      	ldrh	r3, [r1, #12]
 800cf3e:	05db      	lsls	r3, r3, #23
 800cf40:	4605      	mov	r5, r0
 800cf42:	460c      	mov	r4, r1
 800cf44:	4616      	mov	r6, r2
 800cf46:	d505      	bpl.n	800cf54 <__swrite+0x1e>
 800cf48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f000 f92a 	bl	800d1a8 <_lseek_r>
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cf5e:	81a3      	strh	r3, [r4, #12]
 800cf60:	4632      	mov	r2, r6
 800cf62:	463b      	mov	r3, r7
 800cf64:	4628      	mov	r0, r5
 800cf66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf6a:	f000 b941 	b.w	800d1f0 <_write_r>

0800cf6e <__sseek>:
 800cf6e:	b510      	push	{r4, lr}
 800cf70:	460c      	mov	r4, r1
 800cf72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf76:	f000 f917 	bl	800d1a8 <_lseek_r>
 800cf7a:	1c43      	adds	r3, r0, #1
 800cf7c:	89a3      	ldrh	r3, [r4, #12]
 800cf7e:	bf15      	itete	ne
 800cf80:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf8a:	81a3      	strheq	r3, [r4, #12]
 800cf8c:	bf18      	it	ne
 800cf8e:	81a3      	strhne	r3, [r4, #12]
 800cf90:	bd10      	pop	{r4, pc}

0800cf92 <__sclose>:
 800cf92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf96:	f000 b8a1 	b.w	800d0dc <_close_r>

0800cf9a <__swbuf_r>:
 800cf9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9c:	460e      	mov	r6, r1
 800cf9e:	4614      	mov	r4, r2
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	b118      	cbz	r0, 800cfac <__swbuf_r+0x12>
 800cfa4:	6a03      	ldr	r3, [r0, #32]
 800cfa6:	b90b      	cbnz	r3, 800cfac <__swbuf_r+0x12>
 800cfa8:	f7ff ff10 	bl	800cdcc <__sinit>
 800cfac:	69a3      	ldr	r3, [r4, #24]
 800cfae:	60a3      	str	r3, [r4, #8]
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	071a      	lsls	r2, r3, #28
 800cfb4:	d525      	bpl.n	800d002 <__swbuf_r+0x68>
 800cfb6:	6923      	ldr	r3, [r4, #16]
 800cfb8:	b31b      	cbz	r3, 800d002 <__swbuf_r+0x68>
 800cfba:	6823      	ldr	r3, [r4, #0]
 800cfbc:	6922      	ldr	r2, [r4, #16]
 800cfbe:	1a98      	subs	r0, r3, r2
 800cfc0:	6963      	ldr	r3, [r4, #20]
 800cfc2:	b2f6      	uxtb	r6, r6
 800cfc4:	4283      	cmp	r3, r0
 800cfc6:	4637      	mov	r7, r6
 800cfc8:	dc04      	bgt.n	800cfd4 <__swbuf_r+0x3a>
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f001 fe1b 	bl	800ec08 <_fflush_r>
 800cfd2:	b9e0      	cbnz	r0, 800d00e <__swbuf_r+0x74>
 800cfd4:	68a3      	ldr	r3, [r4, #8]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	60a3      	str	r3, [r4, #8]
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	1c5a      	adds	r2, r3, #1
 800cfde:	6022      	str	r2, [r4, #0]
 800cfe0:	701e      	strb	r6, [r3, #0]
 800cfe2:	6962      	ldr	r2, [r4, #20]
 800cfe4:	1c43      	adds	r3, r0, #1
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d004      	beq.n	800cff4 <__swbuf_r+0x5a>
 800cfea:	89a3      	ldrh	r3, [r4, #12]
 800cfec:	07db      	lsls	r3, r3, #31
 800cfee:	d506      	bpl.n	800cffe <__swbuf_r+0x64>
 800cff0:	2e0a      	cmp	r6, #10
 800cff2:	d104      	bne.n	800cffe <__swbuf_r+0x64>
 800cff4:	4621      	mov	r1, r4
 800cff6:	4628      	mov	r0, r5
 800cff8:	f001 fe06 	bl	800ec08 <_fflush_r>
 800cffc:	b938      	cbnz	r0, 800d00e <__swbuf_r+0x74>
 800cffe:	4638      	mov	r0, r7
 800d000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d002:	4621      	mov	r1, r4
 800d004:	4628      	mov	r0, r5
 800d006:	f000 f805 	bl	800d014 <__swsetup_r>
 800d00a:	2800      	cmp	r0, #0
 800d00c:	d0d5      	beq.n	800cfba <__swbuf_r+0x20>
 800d00e:	f04f 37ff 	mov.w	r7, #4294967295
 800d012:	e7f4      	b.n	800cffe <__swbuf_r+0x64>

0800d014 <__swsetup_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	4b2a      	ldr	r3, [pc, #168]	; (800d0c0 <__swsetup_r+0xac>)
 800d018:	4605      	mov	r5, r0
 800d01a:	6818      	ldr	r0, [r3, #0]
 800d01c:	460c      	mov	r4, r1
 800d01e:	b118      	cbz	r0, 800d028 <__swsetup_r+0x14>
 800d020:	6a03      	ldr	r3, [r0, #32]
 800d022:	b90b      	cbnz	r3, 800d028 <__swsetup_r+0x14>
 800d024:	f7ff fed2 	bl	800cdcc <__sinit>
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d02e:	0718      	lsls	r0, r3, #28
 800d030:	d422      	bmi.n	800d078 <__swsetup_r+0x64>
 800d032:	06d9      	lsls	r1, r3, #27
 800d034:	d407      	bmi.n	800d046 <__swsetup_r+0x32>
 800d036:	2309      	movs	r3, #9
 800d038:	602b      	str	r3, [r5, #0]
 800d03a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d03e:	81a3      	strh	r3, [r4, #12]
 800d040:	f04f 30ff 	mov.w	r0, #4294967295
 800d044:	e034      	b.n	800d0b0 <__swsetup_r+0x9c>
 800d046:	0758      	lsls	r0, r3, #29
 800d048:	d512      	bpl.n	800d070 <__swsetup_r+0x5c>
 800d04a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d04c:	b141      	cbz	r1, 800d060 <__swsetup_r+0x4c>
 800d04e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d052:	4299      	cmp	r1, r3
 800d054:	d002      	beq.n	800d05c <__swsetup_r+0x48>
 800d056:	4628      	mov	r0, r5
 800d058:	f000 ff90 	bl	800df7c <_free_r>
 800d05c:	2300      	movs	r3, #0
 800d05e:	6363      	str	r3, [r4, #52]	; 0x34
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d066:	81a3      	strh	r3, [r4, #12]
 800d068:	2300      	movs	r3, #0
 800d06a:	6063      	str	r3, [r4, #4]
 800d06c:	6923      	ldr	r3, [r4, #16]
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	89a3      	ldrh	r3, [r4, #12]
 800d072:	f043 0308 	orr.w	r3, r3, #8
 800d076:	81a3      	strh	r3, [r4, #12]
 800d078:	6923      	ldr	r3, [r4, #16]
 800d07a:	b94b      	cbnz	r3, 800d090 <__swsetup_r+0x7c>
 800d07c:	89a3      	ldrh	r3, [r4, #12]
 800d07e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d086:	d003      	beq.n	800d090 <__swsetup_r+0x7c>
 800d088:	4621      	mov	r1, r4
 800d08a:	4628      	mov	r0, r5
 800d08c:	f001 fe0a 	bl	800eca4 <__smakebuf_r>
 800d090:	89a0      	ldrh	r0, [r4, #12]
 800d092:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d096:	f010 0301 	ands.w	r3, r0, #1
 800d09a:	d00a      	beq.n	800d0b2 <__swsetup_r+0x9e>
 800d09c:	2300      	movs	r3, #0
 800d09e:	60a3      	str	r3, [r4, #8]
 800d0a0:	6963      	ldr	r3, [r4, #20]
 800d0a2:	425b      	negs	r3, r3
 800d0a4:	61a3      	str	r3, [r4, #24]
 800d0a6:	6923      	ldr	r3, [r4, #16]
 800d0a8:	b943      	cbnz	r3, 800d0bc <__swsetup_r+0xa8>
 800d0aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0ae:	d1c4      	bne.n	800d03a <__swsetup_r+0x26>
 800d0b0:	bd38      	pop	{r3, r4, r5, pc}
 800d0b2:	0781      	lsls	r1, r0, #30
 800d0b4:	bf58      	it	pl
 800d0b6:	6963      	ldrpl	r3, [r4, #20]
 800d0b8:	60a3      	str	r3, [r4, #8]
 800d0ba:	e7f4      	b.n	800d0a6 <__swsetup_r+0x92>
 800d0bc:	2000      	movs	r0, #0
 800d0be:	e7f7      	b.n	800d0b0 <__swsetup_r+0x9c>
 800d0c0:	200000f4 	.word	0x200000f4

0800d0c4 <memset>:
 800d0c4:	4402      	add	r2, r0
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d100      	bne.n	800d0ce <memset+0xa>
 800d0cc:	4770      	bx	lr
 800d0ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d0d2:	e7f9      	b.n	800d0c8 <memset+0x4>

0800d0d4 <_localeconv_r>:
 800d0d4:	4800      	ldr	r0, [pc, #0]	; (800d0d8 <_localeconv_r+0x4>)
 800d0d6:	4770      	bx	lr
 800d0d8:	200001e8 	.word	0x200001e8

0800d0dc <_close_r>:
 800d0dc:	b538      	push	{r3, r4, r5, lr}
 800d0de:	4d06      	ldr	r5, [pc, #24]	; (800d0f8 <_close_r+0x1c>)
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4608      	mov	r0, r1
 800d0e6:	602b      	str	r3, [r5, #0]
 800d0e8:	f7f4 fce9 	bl	8001abe <_close>
 800d0ec:	1c43      	adds	r3, r0, #1
 800d0ee:	d102      	bne.n	800d0f6 <_close_r+0x1a>
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	b103      	cbz	r3, 800d0f6 <_close_r+0x1a>
 800d0f4:	6023      	str	r3, [r4, #0]
 800d0f6:	bd38      	pop	{r3, r4, r5, pc}
 800d0f8:	20002a14 	.word	0x20002a14

0800d0fc <_reclaim_reent>:
 800d0fc:	4b29      	ldr	r3, [pc, #164]	; (800d1a4 <_reclaim_reent+0xa8>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4283      	cmp	r3, r0
 800d102:	b570      	push	{r4, r5, r6, lr}
 800d104:	4604      	mov	r4, r0
 800d106:	d04b      	beq.n	800d1a0 <_reclaim_reent+0xa4>
 800d108:	69c3      	ldr	r3, [r0, #28]
 800d10a:	b143      	cbz	r3, 800d11e <_reclaim_reent+0x22>
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d144      	bne.n	800d19c <_reclaim_reent+0xa0>
 800d112:	69e3      	ldr	r3, [r4, #28]
 800d114:	6819      	ldr	r1, [r3, #0]
 800d116:	b111      	cbz	r1, 800d11e <_reclaim_reent+0x22>
 800d118:	4620      	mov	r0, r4
 800d11a:	f000 ff2f 	bl	800df7c <_free_r>
 800d11e:	6961      	ldr	r1, [r4, #20]
 800d120:	b111      	cbz	r1, 800d128 <_reclaim_reent+0x2c>
 800d122:	4620      	mov	r0, r4
 800d124:	f000 ff2a 	bl	800df7c <_free_r>
 800d128:	69e1      	ldr	r1, [r4, #28]
 800d12a:	b111      	cbz	r1, 800d132 <_reclaim_reent+0x36>
 800d12c:	4620      	mov	r0, r4
 800d12e:	f000 ff25 	bl	800df7c <_free_r>
 800d132:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d134:	b111      	cbz	r1, 800d13c <_reclaim_reent+0x40>
 800d136:	4620      	mov	r0, r4
 800d138:	f000 ff20 	bl	800df7c <_free_r>
 800d13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d13e:	b111      	cbz	r1, 800d146 <_reclaim_reent+0x4a>
 800d140:	4620      	mov	r0, r4
 800d142:	f000 ff1b 	bl	800df7c <_free_r>
 800d146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d148:	b111      	cbz	r1, 800d150 <_reclaim_reent+0x54>
 800d14a:	4620      	mov	r0, r4
 800d14c:	f000 ff16 	bl	800df7c <_free_r>
 800d150:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d152:	b111      	cbz	r1, 800d15a <_reclaim_reent+0x5e>
 800d154:	4620      	mov	r0, r4
 800d156:	f000 ff11 	bl	800df7c <_free_r>
 800d15a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d15c:	b111      	cbz	r1, 800d164 <_reclaim_reent+0x68>
 800d15e:	4620      	mov	r0, r4
 800d160:	f000 ff0c 	bl	800df7c <_free_r>
 800d164:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d166:	b111      	cbz	r1, 800d16e <_reclaim_reent+0x72>
 800d168:	4620      	mov	r0, r4
 800d16a:	f000 ff07 	bl	800df7c <_free_r>
 800d16e:	6a23      	ldr	r3, [r4, #32]
 800d170:	b1b3      	cbz	r3, 800d1a0 <_reclaim_reent+0xa4>
 800d172:	4620      	mov	r0, r4
 800d174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d178:	4718      	bx	r3
 800d17a:	5949      	ldr	r1, [r1, r5]
 800d17c:	b941      	cbnz	r1, 800d190 <_reclaim_reent+0x94>
 800d17e:	3504      	adds	r5, #4
 800d180:	69e3      	ldr	r3, [r4, #28]
 800d182:	2d80      	cmp	r5, #128	; 0x80
 800d184:	68d9      	ldr	r1, [r3, #12]
 800d186:	d1f8      	bne.n	800d17a <_reclaim_reent+0x7e>
 800d188:	4620      	mov	r0, r4
 800d18a:	f000 fef7 	bl	800df7c <_free_r>
 800d18e:	e7c0      	b.n	800d112 <_reclaim_reent+0x16>
 800d190:	680e      	ldr	r6, [r1, #0]
 800d192:	4620      	mov	r0, r4
 800d194:	f000 fef2 	bl	800df7c <_free_r>
 800d198:	4631      	mov	r1, r6
 800d19a:	e7ef      	b.n	800d17c <_reclaim_reent+0x80>
 800d19c:	2500      	movs	r5, #0
 800d19e:	e7ef      	b.n	800d180 <_reclaim_reent+0x84>
 800d1a0:	bd70      	pop	{r4, r5, r6, pc}
 800d1a2:	bf00      	nop
 800d1a4:	200000f4 	.word	0x200000f4

0800d1a8 <_lseek_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	4d07      	ldr	r5, [pc, #28]	; (800d1c8 <_lseek_r+0x20>)
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	4608      	mov	r0, r1
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	602a      	str	r2, [r5, #0]
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	f7f4 fca8 	bl	8001b0c <_lseek>
 800d1bc:	1c43      	adds	r3, r0, #1
 800d1be:	d102      	bne.n	800d1c6 <_lseek_r+0x1e>
 800d1c0:	682b      	ldr	r3, [r5, #0]
 800d1c2:	b103      	cbz	r3, 800d1c6 <_lseek_r+0x1e>
 800d1c4:	6023      	str	r3, [r4, #0]
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	20002a14 	.word	0x20002a14

0800d1cc <_read_r>:
 800d1cc:	b538      	push	{r3, r4, r5, lr}
 800d1ce:	4d07      	ldr	r5, [pc, #28]	; (800d1ec <_read_r+0x20>)
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	4608      	mov	r0, r1
 800d1d4:	4611      	mov	r1, r2
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	602a      	str	r2, [r5, #0]
 800d1da:	461a      	mov	r2, r3
 800d1dc:	f7f4 fc36 	bl	8001a4c <_read>
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	d102      	bne.n	800d1ea <_read_r+0x1e>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	b103      	cbz	r3, 800d1ea <_read_r+0x1e>
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	20002a14 	.word	0x20002a14

0800d1f0 <_write_r>:
 800d1f0:	b538      	push	{r3, r4, r5, lr}
 800d1f2:	4d07      	ldr	r5, [pc, #28]	; (800d210 <_write_r+0x20>)
 800d1f4:	4604      	mov	r4, r0
 800d1f6:	4608      	mov	r0, r1
 800d1f8:	4611      	mov	r1, r2
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	602a      	str	r2, [r5, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	f7f4 fc41 	bl	8001a86 <_write>
 800d204:	1c43      	adds	r3, r0, #1
 800d206:	d102      	bne.n	800d20e <_write_r+0x1e>
 800d208:	682b      	ldr	r3, [r5, #0]
 800d20a:	b103      	cbz	r3, 800d20e <_write_r+0x1e>
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	bd38      	pop	{r3, r4, r5, pc}
 800d210:	20002a14 	.word	0x20002a14

0800d214 <__errno>:
 800d214:	4b01      	ldr	r3, [pc, #4]	; (800d21c <__errno+0x8>)
 800d216:	6818      	ldr	r0, [r3, #0]
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	200000f4 	.word	0x200000f4

0800d220 <__libc_init_array>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	4d0d      	ldr	r5, [pc, #52]	; (800d258 <__libc_init_array+0x38>)
 800d224:	4c0d      	ldr	r4, [pc, #52]	; (800d25c <__libc_init_array+0x3c>)
 800d226:	1b64      	subs	r4, r4, r5
 800d228:	10a4      	asrs	r4, r4, #2
 800d22a:	2600      	movs	r6, #0
 800d22c:	42a6      	cmp	r6, r4
 800d22e:	d109      	bne.n	800d244 <__libc_init_array+0x24>
 800d230:	4d0b      	ldr	r5, [pc, #44]	; (800d260 <__libc_init_array+0x40>)
 800d232:	4c0c      	ldr	r4, [pc, #48]	; (800d264 <__libc_init_array+0x44>)
 800d234:	f001 fe56 	bl	800eee4 <_init>
 800d238:	1b64      	subs	r4, r4, r5
 800d23a:	10a4      	asrs	r4, r4, #2
 800d23c:	2600      	movs	r6, #0
 800d23e:	42a6      	cmp	r6, r4
 800d240:	d105      	bne.n	800d24e <__libc_init_array+0x2e>
 800d242:	bd70      	pop	{r4, r5, r6, pc}
 800d244:	f855 3b04 	ldr.w	r3, [r5], #4
 800d248:	4798      	blx	r3
 800d24a:	3601      	adds	r6, #1
 800d24c:	e7ee      	b.n	800d22c <__libc_init_array+0xc>
 800d24e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d252:	4798      	blx	r3
 800d254:	3601      	adds	r6, #1
 800d256:	e7f2      	b.n	800d23e <__libc_init_array+0x1e>
 800d258:	0800f6a4 	.word	0x0800f6a4
 800d25c:	0800f6a4 	.word	0x0800f6a4
 800d260:	0800f6a4 	.word	0x0800f6a4
 800d264:	0800f6a8 	.word	0x0800f6a8

0800d268 <__retarget_lock_acquire_recursive>:
 800d268:	4770      	bx	lr

0800d26a <__retarget_lock_release_recursive>:
 800d26a:	4770      	bx	lr

0800d26c <memcpy>:
 800d26c:	440a      	add	r2, r1
 800d26e:	4291      	cmp	r1, r2
 800d270:	f100 33ff 	add.w	r3, r0, #4294967295
 800d274:	d100      	bne.n	800d278 <memcpy+0xc>
 800d276:	4770      	bx	lr
 800d278:	b510      	push	{r4, lr}
 800d27a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d27e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d282:	4291      	cmp	r1, r2
 800d284:	d1f9      	bne.n	800d27a <memcpy+0xe>
 800d286:	bd10      	pop	{r4, pc}

0800d288 <quorem>:
 800d288:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28c:	6903      	ldr	r3, [r0, #16]
 800d28e:	690c      	ldr	r4, [r1, #16]
 800d290:	42a3      	cmp	r3, r4
 800d292:	4607      	mov	r7, r0
 800d294:	db7e      	blt.n	800d394 <quorem+0x10c>
 800d296:	3c01      	subs	r4, #1
 800d298:	f101 0814 	add.w	r8, r1, #20
 800d29c:	f100 0514 	add.w	r5, r0, #20
 800d2a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2a4:	9301      	str	r3, [sp, #4]
 800d2a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2be:	d331      	bcc.n	800d324 <quorem+0x9c>
 800d2c0:	f04f 0e00 	mov.w	lr, #0
 800d2c4:	4640      	mov	r0, r8
 800d2c6:	46ac      	mov	ip, r5
 800d2c8:	46f2      	mov	sl, lr
 800d2ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2ce:	b293      	uxth	r3, r2
 800d2d0:	fb06 e303 	mla	r3, r6, r3, lr
 800d2d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2d8:	0c1a      	lsrs	r2, r3, #16
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	ebaa 0303 	sub.w	r3, sl, r3
 800d2e0:	f8dc a000 	ldr.w	sl, [ip]
 800d2e4:	fa13 f38a 	uxtah	r3, r3, sl
 800d2e8:	fb06 220e 	mla	r2, r6, lr, r2
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	9b00      	ldr	r3, [sp, #0]
 800d2f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2f4:	b292      	uxth	r2, r2
 800d2f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d2fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2fe:	f8bd 3000 	ldrh.w	r3, [sp]
 800d302:	4581      	cmp	r9, r0
 800d304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d308:	f84c 3b04 	str.w	r3, [ip], #4
 800d30c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d310:	d2db      	bcs.n	800d2ca <quorem+0x42>
 800d312:	f855 300b 	ldr.w	r3, [r5, fp]
 800d316:	b92b      	cbnz	r3, 800d324 <quorem+0x9c>
 800d318:	9b01      	ldr	r3, [sp, #4]
 800d31a:	3b04      	subs	r3, #4
 800d31c:	429d      	cmp	r5, r3
 800d31e:	461a      	mov	r2, r3
 800d320:	d32c      	bcc.n	800d37c <quorem+0xf4>
 800d322:	613c      	str	r4, [r7, #16]
 800d324:	4638      	mov	r0, r7
 800d326:	f001 f9a5 	bl	800e674 <__mcmp>
 800d32a:	2800      	cmp	r0, #0
 800d32c:	db22      	blt.n	800d374 <quorem+0xec>
 800d32e:	3601      	adds	r6, #1
 800d330:	4629      	mov	r1, r5
 800d332:	2000      	movs	r0, #0
 800d334:	f858 2b04 	ldr.w	r2, [r8], #4
 800d338:	f8d1 c000 	ldr.w	ip, [r1]
 800d33c:	b293      	uxth	r3, r2
 800d33e:	1ac3      	subs	r3, r0, r3
 800d340:	0c12      	lsrs	r2, r2, #16
 800d342:	fa13 f38c 	uxtah	r3, r3, ip
 800d346:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d34a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d34e:	b29b      	uxth	r3, r3
 800d350:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d354:	45c1      	cmp	r9, r8
 800d356:	f841 3b04 	str.w	r3, [r1], #4
 800d35a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d35e:	d2e9      	bcs.n	800d334 <quorem+0xac>
 800d360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d364:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d368:	b922      	cbnz	r2, 800d374 <quorem+0xec>
 800d36a:	3b04      	subs	r3, #4
 800d36c:	429d      	cmp	r5, r3
 800d36e:	461a      	mov	r2, r3
 800d370:	d30a      	bcc.n	800d388 <quorem+0x100>
 800d372:	613c      	str	r4, [r7, #16]
 800d374:	4630      	mov	r0, r6
 800d376:	b003      	add	sp, #12
 800d378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37c:	6812      	ldr	r2, [r2, #0]
 800d37e:	3b04      	subs	r3, #4
 800d380:	2a00      	cmp	r2, #0
 800d382:	d1ce      	bne.n	800d322 <quorem+0x9a>
 800d384:	3c01      	subs	r4, #1
 800d386:	e7c9      	b.n	800d31c <quorem+0x94>
 800d388:	6812      	ldr	r2, [r2, #0]
 800d38a:	3b04      	subs	r3, #4
 800d38c:	2a00      	cmp	r2, #0
 800d38e:	d1f0      	bne.n	800d372 <quorem+0xea>
 800d390:	3c01      	subs	r4, #1
 800d392:	e7eb      	b.n	800d36c <quorem+0xe4>
 800d394:	2000      	movs	r0, #0
 800d396:	e7ee      	b.n	800d376 <quorem+0xee>

0800d398 <_dtoa_r>:
 800d398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d39c:	ed2d 8b04 	vpush	{d8-d9}
 800d3a0:	69c5      	ldr	r5, [r0, #28]
 800d3a2:	b093      	sub	sp, #76	; 0x4c
 800d3a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d3a8:	ec57 6b10 	vmov	r6, r7, d0
 800d3ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3b0:	9107      	str	r1, [sp, #28]
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	920a      	str	r2, [sp, #40]	; 0x28
 800d3b6:	930d      	str	r3, [sp, #52]	; 0x34
 800d3b8:	b975      	cbnz	r5, 800d3d8 <_dtoa_r+0x40>
 800d3ba:	2010      	movs	r0, #16
 800d3bc:	f000 fe2a 	bl	800e014 <malloc>
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	61e0      	str	r0, [r4, #28]
 800d3c4:	b920      	cbnz	r0, 800d3d0 <_dtoa_r+0x38>
 800d3c6:	4bae      	ldr	r3, [pc, #696]	; (800d680 <_dtoa_r+0x2e8>)
 800d3c8:	21ef      	movs	r1, #239	; 0xef
 800d3ca:	48ae      	ldr	r0, [pc, #696]	; (800d684 <_dtoa_r+0x2ec>)
 800d3cc:	f001 fcd8 	bl	800ed80 <__assert_func>
 800d3d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3d4:	6005      	str	r5, [r0, #0]
 800d3d6:	60c5      	str	r5, [r0, #12]
 800d3d8:	69e3      	ldr	r3, [r4, #28]
 800d3da:	6819      	ldr	r1, [r3, #0]
 800d3dc:	b151      	cbz	r1, 800d3f4 <_dtoa_r+0x5c>
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	604a      	str	r2, [r1, #4]
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	4093      	lsls	r3, r2
 800d3e6:	608b      	str	r3, [r1, #8]
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 ff07 	bl	800e1fc <_Bfree>
 800d3ee:	69e3      	ldr	r3, [r4, #28]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	601a      	str	r2, [r3, #0]
 800d3f4:	1e3b      	subs	r3, r7, #0
 800d3f6:	bfbb      	ittet	lt
 800d3f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d3fc:	9303      	strlt	r3, [sp, #12]
 800d3fe:	2300      	movge	r3, #0
 800d400:	2201      	movlt	r2, #1
 800d402:	bfac      	ite	ge
 800d404:	f8c8 3000 	strge.w	r3, [r8]
 800d408:	f8c8 2000 	strlt.w	r2, [r8]
 800d40c:	4b9e      	ldr	r3, [pc, #632]	; (800d688 <_dtoa_r+0x2f0>)
 800d40e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d412:	ea33 0308 	bics.w	r3, r3, r8
 800d416:	d11b      	bne.n	800d450 <_dtoa_r+0xb8>
 800d418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d41a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d41e:	6013      	str	r3, [r2, #0]
 800d420:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d424:	4333      	orrs	r3, r6
 800d426:	f000 8593 	beq.w	800df50 <_dtoa_r+0xbb8>
 800d42a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d42c:	b963      	cbnz	r3, 800d448 <_dtoa_r+0xb0>
 800d42e:	4b97      	ldr	r3, [pc, #604]	; (800d68c <_dtoa_r+0x2f4>)
 800d430:	e027      	b.n	800d482 <_dtoa_r+0xea>
 800d432:	4b97      	ldr	r3, [pc, #604]	; (800d690 <_dtoa_r+0x2f8>)
 800d434:	9300      	str	r3, [sp, #0]
 800d436:	3308      	adds	r3, #8
 800d438:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d43a:	6013      	str	r3, [r2, #0]
 800d43c:	9800      	ldr	r0, [sp, #0]
 800d43e:	b013      	add	sp, #76	; 0x4c
 800d440:	ecbd 8b04 	vpop	{d8-d9}
 800d444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d448:	4b90      	ldr	r3, [pc, #576]	; (800d68c <_dtoa_r+0x2f4>)
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	3303      	adds	r3, #3
 800d44e:	e7f3      	b.n	800d438 <_dtoa_r+0xa0>
 800d450:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d454:	2200      	movs	r2, #0
 800d456:	ec51 0b17 	vmov	r0, r1, d7
 800d45a:	eeb0 8a47 	vmov.f32	s16, s14
 800d45e:	eef0 8a67 	vmov.f32	s17, s15
 800d462:	2300      	movs	r3, #0
 800d464:	f7f3 fb38 	bl	8000ad8 <__aeabi_dcmpeq>
 800d468:	4681      	mov	r9, r0
 800d46a:	b160      	cbz	r0, 800d486 <_dtoa_r+0xee>
 800d46c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d46e:	2301      	movs	r3, #1
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d474:	2b00      	cmp	r3, #0
 800d476:	f000 8568 	beq.w	800df4a <_dtoa_r+0xbb2>
 800d47a:	4b86      	ldr	r3, [pc, #536]	; (800d694 <_dtoa_r+0x2fc>)
 800d47c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	3b01      	subs	r3, #1
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	e7da      	b.n	800d43c <_dtoa_r+0xa4>
 800d486:	aa10      	add	r2, sp, #64	; 0x40
 800d488:	a911      	add	r1, sp, #68	; 0x44
 800d48a:	4620      	mov	r0, r4
 800d48c:	eeb0 0a48 	vmov.f32	s0, s16
 800d490:	eef0 0a68 	vmov.f32	s1, s17
 800d494:	f001 f994 	bl	800e7c0 <__d2b>
 800d498:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d49c:	4682      	mov	sl, r0
 800d49e:	2d00      	cmp	r5, #0
 800d4a0:	d07f      	beq.n	800d5a2 <_dtoa_r+0x20a>
 800d4a2:	ee18 3a90 	vmov	r3, s17
 800d4a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d4ae:	ec51 0b18 	vmov	r0, r1, d8
 800d4b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d4b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d4be:	4619      	mov	r1, r3
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	4b75      	ldr	r3, [pc, #468]	; (800d698 <_dtoa_r+0x300>)
 800d4c4:	f7f2 fee8 	bl	8000298 <__aeabi_dsub>
 800d4c8:	a367      	add	r3, pc, #412	; (adr r3, 800d668 <_dtoa_r+0x2d0>)
 800d4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ce:	f7f3 f89b 	bl	8000608 <__aeabi_dmul>
 800d4d2:	a367      	add	r3, pc, #412	; (adr r3, 800d670 <_dtoa_r+0x2d8>)
 800d4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d8:	f7f2 fee0 	bl	800029c <__adddf3>
 800d4dc:	4606      	mov	r6, r0
 800d4de:	4628      	mov	r0, r5
 800d4e0:	460f      	mov	r7, r1
 800d4e2:	f7f3 f827 	bl	8000534 <__aeabi_i2d>
 800d4e6:	a364      	add	r3, pc, #400	; (adr r3, 800d678 <_dtoa_r+0x2e0>)
 800d4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ec:	f7f3 f88c 	bl	8000608 <__aeabi_dmul>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	4639      	mov	r1, r7
 800d4f8:	f7f2 fed0 	bl	800029c <__adddf3>
 800d4fc:	4606      	mov	r6, r0
 800d4fe:	460f      	mov	r7, r1
 800d500:	f7f3 fb32 	bl	8000b68 <__aeabi_d2iz>
 800d504:	2200      	movs	r2, #0
 800d506:	4683      	mov	fp, r0
 800d508:	2300      	movs	r3, #0
 800d50a:	4630      	mov	r0, r6
 800d50c:	4639      	mov	r1, r7
 800d50e:	f7f3 faed 	bl	8000aec <__aeabi_dcmplt>
 800d512:	b148      	cbz	r0, 800d528 <_dtoa_r+0x190>
 800d514:	4658      	mov	r0, fp
 800d516:	f7f3 f80d 	bl	8000534 <__aeabi_i2d>
 800d51a:	4632      	mov	r2, r6
 800d51c:	463b      	mov	r3, r7
 800d51e:	f7f3 fadb 	bl	8000ad8 <__aeabi_dcmpeq>
 800d522:	b908      	cbnz	r0, 800d528 <_dtoa_r+0x190>
 800d524:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d528:	f1bb 0f16 	cmp.w	fp, #22
 800d52c:	d857      	bhi.n	800d5de <_dtoa_r+0x246>
 800d52e:	4b5b      	ldr	r3, [pc, #364]	; (800d69c <_dtoa_r+0x304>)
 800d530:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d538:	ec51 0b18 	vmov	r0, r1, d8
 800d53c:	f7f3 fad6 	bl	8000aec <__aeabi_dcmplt>
 800d540:	2800      	cmp	r0, #0
 800d542:	d04e      	beq.n	800d5e2 <_dtoa_r+0x24a>
 800d544:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d548:	2300      	movs	r3, #0
 800d54a:	930c      	str	r3, [sp, #48]	; 0x30
 800d54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d54e:	1b5b      	subs	r3, r3, r5
 800d550:	1e5a      	subs	r2, r3, #1
 800d552:	bf45      	ittet	mi
 800d554:	f1c3 0301 	rsbmi	r3, r3, #1
 800d558:	9305      	strmi	r3, [sp, #20]
 800d55a:	2300      	movpl	r3, #0
 800d55c:	2300      	movmi	r3, #0
 800d55e:	9206      	str	r2, [sp, #24]
 800d560:	bf54      	ite	pl
 800d562:	9305      	strpl	r3, [sp, #20]
 800d564:	9306      	strmi	r3, [sp, #24]
 800d566:	f1bb 0f00 	cmp.w	fp, #0
 800d56a:	db3c      	blt.n	800d5e6 <_dtoa_r+0x24e>
 800d56c:	9b06      	ldr	r3, [sp, #24]
 800d56e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d572:	445b      	add	r3, fp
 800d574:	9306      	str	r3, [sp, #24]
 800d576:	2300      	movs	r3, #0
 800d578:	9308      	str	r3, [sp, #32]
 800d57a:	9b07      	ldr	r3, [sp, #28]
 800d57c:	2b09      	cmp	r3, #9
 800d57e:	d868      	bhi.n	800d652 <_dtoa_r+0x2ba>
 800d580:	2b05      	cmp	r3, #5
 800d582:	bfc4      	itt	gt
 800d584:	3b04      	subgt	r3, #4
 800d586:	9307      	strgt	r3, [sp, #28]
 800d588:	9b07      	ldr	r3, [sp, #28]
 800d58a:	f1a3 0302 	sub.w	r3, r3, #2
 800d58e:	bfcc      	ite	gt
 800d590:	2500      	movgt	r5, #0
 800d592:	2501      	movle	r5, #1
 800d594:	2b03      	cmp	r3, #3
 800d596:	f200 8085 	bhi.w	800d6a4 <_dtoa_r+0x30c>
 800d59a:	e8df f003 	tbb	[pc, r3]
 800d59e:	3b2e      	.short	0x3b2e
 800d5a0:	5839      	.short	0x5839
 800d5a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d5a6:	441d      	add	r5, r3
 800d5a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d5ac:	2b20      	cmp	r3, #32
 800d5ae:	bfc1      	itttt	gt
 800d5b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800d5b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d5bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d5c0:	bfd6      	itet	le
 800d5c2:	f1c3 0320 	rsble	r3, r3, #32
 800d5c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800d5ca:	fa06 f003 	lslle.w	r0, r6, r3
 800d5ce:	f7f2 ffa1 	bl	8000514 <__aeabi_ui2d>
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d5d8:	3d01      	subs	r5, #1
 800d5da:	920e      	str	r2, [sp, #56]	; 0x38
 800d5dc:	e76f      	b.n	800d4be <_dtoa_r+0x126>
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e7b3      	b.n	800d54a <_dtoa_r+0x1b2>
 800d5e2:	900c      	str	r0, [sp, #48]	; 0x30
 800d5e4:	e7b2      	b.n	800d54c <_dtoa_r+0x1b4>
 800d5e6:	9b05      	ldr	r3, [sp, #20]
 800d5e8:	eba3 030b 	sub.w	r3, r3, fp
 800d5ec:	9305      	str	r3, [sp, #20]
 800d5ee:	f1cb 0300 	rsb	r3, fp, #0
 800d5f2:	9308      	str	r3, [sp, #32]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5f8:	e7bf      	b.n	800d57a <_dtoa_r+0x1e2>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800d5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d600:	2b00      	cmp	r3, #0
 800d602:	dc52      	bgt.n	800d6aa <_dtoa_r+0x312>
 800d604:	2301      	movs	r3, #1
 800d606:	9301      	str	r3, [sp, #4]
 800d608:	9304      	str	r3, [sp, #16]
 800d60a:	461a      	mov	r2, r3
 800d60c:	920a      	str	r2, [sp, #40]	; 0x28
 800d60e:	e00b      	b.n	800d628 <_dtoa_r+0x290>
 800d610:	2301      	movs	r3, #1
 800d612:	e7f3      	b.n	800d5fc <_dtoa_r+0x264>
 800d614:	2300      	movs	r3, #0
 800d616:	9309      	str	r3, [sp, #36]	; 0x24
 800d618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d61a:	445b      	add	r3, fp
 800d61c:	9301      	str	r3, [sp, #4]
 800d61e:	3301      	adds	r3, #1
 800d620:	2b01      	cmp	r3, #1
 800d622:	9304      	str	r3, [sp, #16]
 800d624:	bfb8      	it	lt
 800d626:	2301      	movlt	r3, #1
 800d628:	69e0      	ldr	r0, [r4, #28]
 800d62a:	2100      	movs	r1, #0
 800d62c:	2204      	movs	r2, #4
 800d62e:	f102 0614 	add.w	r6, r2, #20
 800d632:	429e      	cmp	r6, r3
 800d634:	d93d      	bls.n	800d6b2 <_dtoa_r+0x31a>
 800d636:	6041      	str	r1, [r0, #4]
 800d638:	4620      	mov	r0, r4
 800d63a:	f000 fd9f 	bl	800e17c <_Balloc>
 800d63e:	9000      	str	r0, [sp, #0]
 800d640:	2800      	cmp	r0, #0
 800d642:	d139      	bne.n	800d6b8 <_dtoa_r+0x320>
 800d644:	4b16      	ldr	r3, [pc, #88]	; (800d6a0 <_dtoa_r+0x308>)
 800d646:	4602      	mov	r2, r0
 800d648:	f240 11af 	movw	r1, #431	; 0x1af
 800d64c:	e6bd      	b.n	800d3ca <_dtoa_r+0x32>
 800d64e:	2301      	movs	r3, #1
 800d650:	e7e1      	b.n	800d616 <_dtoa_r+0x27e>
 800d652:	2501      	movs	r5, #1
 800d654:	2300      	movs	r3, #0
 800d656:	9307      	str	r3, [sp, #28]
 800d658:	9509      	str	r5, [sp, #36]	; 0x24
 800d65a:	f04f 33ff 	mov.w	r3, #4294967295
 800d65e:	9301      	str	r3, [sp, #4]
 800d660:	9304      	str	r3, [sp, #16]
 800d662:	2200      	movs	r2, #0
 800d664:	2312      	movs	r3, #18
 800d666:	e7d1      	b.n	800d60c <_dtoa_r+0x274>
 800d668:	636f4361 	.word	0x636f4361
 800d66c:	3fd287a7 	.word	0x3fd287a7
 800d670:	8b60c8b3 	.word	0x8b60c8b3
 800d674:	3fc68a28 	.word	0x3fc68a28
 800d678:	509f79fb 	.word	0x509f79fb
 800d67c:	3fd34413 	.word	0x3fd34413
 800d680:	0800f375 	.word	0x0800f375
 800d684:	0800f38c 	.word	0x0800f38c
 800d688:	7ff00000 	.word	0x7ff00000
 800d68c:	0800f371 	.word	0x0800f371
 800d690:	0800f368 	.word	0x0800f368
 800d694:	0800f345 	.word	0x0800f345
 800d698:	3ff80000 	.word	0x3ff80000
 800d69c:	0800f478 	.word	0x0800f478
 800d6a0:	0800f3e4 	.word	0x0800f3e4
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a8:	e7d7      	b.n	800d65a <_dtoa_r+0x2c2>
 800d6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	9304      	str	r3, [sp, #16]
 800d6b0:	e7ba      	b.n	800d628 <_dtoa_r+0x290>
 800d6b2:	3101      	adds	r1, #1
 800d6b4:	0052      	lsls	r2, r2, #1
 800d6b6:	e7ba      	b.n	800d62e <_dtoa_r+0x296>
 800d6b8:	69e3      	ldr	r3, [r4, #28]
 800d6ba:	9a00      	ldr	r2, [sp, #0]
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	9b04      	ldr	r3, [sp, #16]
 800d6c0:	2b0e      	cmp	r3, #14
 800d6c2:	f200 80a8 	bhi.w	800d816 <_dtoa_r+0x47e>
 800d6c6:	2d00      	cmp	r5, #0
 800d6c8:	f000 80a5 	beq.w	800d816 <_dtoa_r+0x47e>
 800d6cc:	f1bb 0f00 	cmp.w	fp, #0
 800d6d0:	dd38      	ble.n	800d744 <_dtoa_r+0x3ac>
 800d6d2:	4bc0      	ldr	r3, [pc, #768]	; (800d9d4 <_dtoa_r+0x63c>)
 800d6d4:	f00b 020f 	and.w	r2, fp, #15
 800d6d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d6e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d6e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d6e8:	d019      	beq.n	800d71e <_dtoa_r+0x386>
 800d6ea:	4bbb      	ldr	r3, [pc, #748]	; (800d9d8 <_dtoa_r+0x640>)
 800d6ec:	ec51 0b18 	vmov	r0, r1, d8
 800d6f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6f4:	f7f3 f8b2 	bl	800085c <__aeabi_ddiv>
 800d6f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6fc:	f008 080f 	and.w	r8, r8, #15
 800d700:	2503      	movs	r5, #3
 800d702:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d9d8 <_dtoa_r+0x640>
 800d706:	f1b8 0f00 	cmp.w	r8, #0
 800d70a:	d10a      	bne.n	800d722 <_dtoa_r+0x38a>
 800d70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d710:	4632      	mov	r2, r6
 800d712:	463b      	mov	r3, r7
 800d714:	f7f3 f8a2 	bl	800085c <__aeabi_ddiv>
 800d718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d71c:	e02b      	b.n	800d776 <_dtoa_r+0x3de>
 800d71e:	2502      	movs	r5, #2
 800d720:	e7ef      	b.n	800d702 <_dtoa_r+0x36a>
 800d722:	f018 0f01 	tst.w	r8, #1
 800d726:	d008      	beq.n	800d73a <_dtoa_r+0x3a2>
 800d728:	4630      	mov	r0, r6
 800d72a:	4639      	mov	r1, r7
 800d72c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d730:	f7f2 ff6a 	bl	8000608 <__aeabi_dmul>
 800d734:	3501      	adds	r5, #1
 800d736:	4606      	mov	r6, r0
 800d738:	460f      	mov	r7, r1
 800d73a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d73e:	f109 0908 	add.w	r9, r9, #8
 800d742:	e7e0      	b.n	800d706 <_dtoa_r+0x36e>
 800d744:	f000 809f 	beq.w	800d886 <_dtoa_r+0x4ee>
 800d748:	f1cb 0600 	rsb	r6, fp, #0
 800d74c:	4ba1      	ldr	r3, [pc, #644]	; (800d9d4 <_dtoa_r+0x63c>)
 800d74e:	4fa2      	ldr	r7, [pc, #648]	; (800d9d8 <_dtoa_r+0x640>)
 800d750:	f006 020f 	and.w	r2, r6, #15
 800d754:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75c:	ec51 0b18 	vmov	r0, r1, d8
 800d760:	f7f2 ff52 	bl	8000608 <__aeabi_dmul>
 800d764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d768:	1136      	asrs	r6, r6, #4
 800d76a:	2300      	movs	r3, #0
 800d76c:	2502      	movs	r5, #2
 800d76e:	2e00      	cmp	r6, #0
 800d770:	d17e      	bne.n	800d870 <_dtoa_r+0x4d8>
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1d0      	bne.n	800d718 <_dtoa_r+0x380>
 800d776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d778:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f000 8084 	beq.w	800d88a <_dtoa_r+0x4f2>
 800d782:	4b96      	ldr	r3, [pc, #600]	; (800d9dc <_dtoa_r+0x644>)
 800d784:	2200      	movs	r2, #0
 800d786:	4640      	mov	r0, r8
 800d788:	4649      	mov	r1, r9
 800d78a:	f7f3 f9af 	bl	8000aec <__aeabi_dcmplt>
 800d78e:	2800      	cmp	r0, #0
 800d790:	d07b      	beq.n	800d88a <_dtoa_r+0x4f2>
 800d792:	9b04      	ldr	r3, [sp, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d078      	beq.n	800d88a <_dtoa_r+0x4f2>
 800d798:	9b01      	ldr	r3, [sp, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	dd39      	ble.n	800d812 <_dtoa_r+0x47a>
 800d79e:	4b90      	ldr	r3, [pc, #576]	; (800d9e0 <_dtoa_r+0x648>)
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	4640      	mov	r0, r8
 800d7a4:	4649      	mov	r1, r9
 800d7a6:	f7f2 ff2f 	bl	8000608 <__aeabi_dmul>
 800d7aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7ae:	9e01      	ldr	r6, [sp, #4]
 800d7b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d7b4:	3501      	adds	r5, #1
 800d7b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f7f2 feba 	bl	8000534 <__aeabi_i2d>
 800d7c0:	4642      	mov	r2, r8
 800d7c2:	464b      	mov	r3, r9
 800d7c4:	f7f2 ff20 	bl	8000608 <__aeabi_dmul>
 800d7c8:	4b86      	ldr	r3, [pc, #536]	; (800d9e4 <_dtoa_r+0x64c>)
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	f7f2 fd66 	bl	800029c <__adddf3>
 800d7d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d7d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7d8:	9303      	str	r3, [sp, #12]
 800d7da:	2e00      	cmp	r6, #0
 800d7dc:	d158      	bne.n	800d890 <_dtoa_r+0x4f8>
 800d7de:	4b82      	ldr	r3, [pc, #520]	; (800d9e8 <_dtoa_r+0x650>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	f7f2 fd57 	bl	8000298 <__aeabi_dsub>
 800d7ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7ee:	4680      	mov	r8, r0
 800d7f0:	4689      	mov	r9, r1
 800d7f2:	f7f3 f999 	bl	8000b28 <__aeabi_dcmpgt>
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f040 8296 	bne.w	800dd28 <_dtoa_r+0x990>
 800d7fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d800:	4640      	mov	r0, r8
 800d802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d806:	4649      	mov	r1, r9
 800d808:	f7f3 f970 	bl	8000aec <__aeabi_dcmplt>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	f040 8289 	bne.w	800dd24 <_dtoa_r+0x98c>
 800d812:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f2c0 814e 	blt.w	800daba <_dtoa_r+0x722>
 800d81e:	f1bb 0f0e 	cmp.w	fp, #14
 800d822:	f300 814a 	bgt.w	800daba <_dtoa_r+0x722>
 800d826:	4b6b      	ldr	r3, [pc, #428]	; (800d9d4 <_dtoa_r+0x63c>)
 800d828:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d82c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d832:	2b00      	cmp	r3, #0
 800d834:	f280 80dc 	bge.w	800d9f0 <_dtoa_r+0x658>
 800d838:	9b04      	ldr	r3, [sp, #16]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f300 80d8 	bgt.w	800d9f0 <_dtoa_r+0x658>
 800d840:	f040 826f 	bne.w	800dd22 <_dtoa_r+0x98a>
 800d844:	4b68      	ldr	r3, [pc, #416]	; (800d9e8 <_dtoa_r+0x650>)
 800d846:	2200      	movs	r2, #0
 800d848:	4640      	mov	r0, r8
 800d84a:	4649      	mov	r1, r9
 800d84c:	f7f2 fedc 	bl	8000608 <__aeabi_dmul>
 800d850:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d854:	f7f3 f95e 	bl	8000b14 <__aeabi_dcmpge>
 800d858:	9e04      	ldr	r6, [sp, #16]
 800d85a:	4637      	mov	r7, r6
 800d85c:	2800      	cmp	r0, #0
 800d85e:	f040 8245 	bne.w	800dcec <_dtoa_r+0x954>
 800d862:	9d00      	ldr	r5, [sp, #0]
 800d864:	2331      	movs	r3, #49	; 0x31
 800d866:	f805 3b01 	strb.w	r3, [r5], #1
 800d86a:	f10b 0b01 	add.w	fp, fp, #1
 800d86e:	e241      	b.n	800dcf4 <_dtoa_r+0x95c>
 800d870:	07f2      	lsls	r2, r6, #31
 800d872:	d505      	bpl.n	800d880 <_dtoa_r+0x4e8>
 800d874:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d878:	f7f2 fec6 	bl	8000608 <__aeabi_dmul>
 800d87c:	3501      	adds	r5, #1
 800d87e:	2301      	movs	r3, #1
 800d880:	1076      	asrs	r6, r6, #1
 800d882:	3708      	adds	r7, #8
 800d884:	e773      	b.n	800d76e <_dtoa_r+0x3d6>
 800d886:	2502      	movs	r5, #2
 800d888:	e775      	b.n	800d776 <_dtoa_r+0x3de>
 800d88a:	9e04      	ldr	r6, [sp, #16]
 800d88c:	465f      	mov	r7, fp
 800d88e:	e792      	b.n	800d7b6 <_dtoa_r+0x41e>
 800d890:	9900      	ldr	r1, [sp, #0]
 800d892:	4b50      	ldr	r3, [pc, #320]	; (800d9d4 <_dtoa_r+0x63c>)
 800d894:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d898:	4431      	add	r1, r6
 800d89a:	9102      	str	r1, [sp, #8]
 800d89c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d89e:	eeb0 9a47 	vmov.f32	s18, s14
 800d8a2:	eef0 9a67 	vmov.f32	s19, s15
 800d8a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d8aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8ae:	2900      	cmp	r1, #0
 800d8b0:	d044      	beq.n	800d93c <_dtoa_r+0x5a4>
 800d8b2:	494e      	ldr	r1, [pc, #312]	; (800d9ec <_dtoa_r+0x654>)
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	f7f2 ffd1 	bl	800085c <__aeabi_ddiv>
 800d8ba:	ec53 2b19 	vmov	r2, r3, d9
 800d8be:	f7f2 fceb 	bl	8000298 <__aeabi_dsub>
 800d8c2:	9d00      	ldr	r5, [sp, #0]
 800d8c4:	ec41 0b19 	vmov	d9, r0, r1
 800d8c8:	4649      	mov	r1, r9
 800d8ca:	4640      	mov	r0, r8
 800d8cc:	f7f3 f94c 	bl	8000b68 <__aeabi_d2iz>
 800d8d0:	4606      	mov	r6, r0
 800d8d2:	f7f2 fe2f 	bl	8000534 <__aeabi_i2d>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	4640      	mov	r0, r8
 800d8dc:	4649      	mov	r1, r9
 800d8de:	f7f2 fcdb 	bl	8000298 <__aeabi_dsub>
 800d8e2:	3630      	adds	r6, #48	; 0x30
 800d8e4:	f805 6b01 	strb.w	r6, [r5], #1
 800d8e8:	ec53 2b19 	vmov	r2, r3, d9
 800d8ec:	4680      	mov	r8, r0
 800d8ee:	4689      	mov	r9, r1
 800d8f0:	f7f3 f8fc 	bl	8000aec <__aeabi_dcmplt>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d164      	bne.n	800d9c2 <_dtoa_r+0x62a>
 800d8f8:	4642      	mov	r2, r8
 800d8fa:	464b      	mov	r3, r9
 800d8fc:	4937      	ldr	r1, [pc, #220]	; (800d9dc <_dtoa_r+0x644>)
 800d8fe:	2000      	movs	r0, #0
 800d900:	f7f2 fcca 	bl	8000298 <__aeabi_dsub>
 800d904:	ec53 2b19 	vmov	r2, r3, d9
 800d908:	f7f3 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f040 80b6 	bne.w	800da7e <_dtoa_r+0x6e6>
 800d912:	9b02      	ldr	r3, [sp, #8]
 800d914:	429d      	cmp	r5, r3
 800d916:	f43f af7c 	beq.w	800d812 <_dtoa_r+0x47a>
 800d91a:	4b31      	ldr	r3, [pc, #196]	; (800d9e0 <_dtoa_r+0x648>)
 800d91c:	ec51 0b19 	vmov	r0, r1, d9
 800d920:	2200      	movs	r2, #0
 800d922:	f7f2 fe71 	bl	8000608 <__aeabi_dmul>
 800d926:	4b2e      	ldr	r3, [pc, #184]	; (800d9e0 <_dtoa_r+0x648>)
 800d928:	ec41 0b19 	vmov	d9, r0, r1
 800d92c:	2200      	movs	r2, #0
 800d92e:	4640      	mov	r0, r8
 800d930:	4649      	mov	r1, r9
 800d932:	f7f2 fe69 	bl	8000608 <__aeabi_dmul>
 800d936:	4680      	mov	r8, r0
 800d938:	4689      	mov	r9, r1
 800d93a:	e7c5      	b.n	800d8c8 <_dtoa_r+0x530>
 800d93c:	ec51 0b17 	vmov	r0, r1, d7
 800d940:	f7f2 fe62 	bl	8000608 <__aeabi_dmul>
 800d944:	9b02      	ldr	r3, [sp, #8]
 800d946:	9d00      	ldr	r5, [sp, #0]
 800d948:	930f      	str	r3, [sp, #60]	; 0x3c
 800d94a:	ec41 0b19 	vmov	d9, r0, r1
 800d94e:	4649      	mov	r1, r9
 800d950:	4640      	mov	r0, r8
 800d952:	f7f3 f909 	bl	8000b68 <__aeabi_d2iz>
 800d956:	4606      	mov	r6, r0
 800d958:	f7f2 fdec 	bl	8000534 <__aeabi_i2d>
 800d95c:	3630      	adds	r6, #48	; 0x30
 800d95e:	4602      	mov	r2, r0
 800d960:	460b      	mov	r3, r1
 800d962:	4640      	mov	r0, r8
 800d964:	4649      	mov	r1, r9
 800d966:	f7f2 fc97 	bl	8000298 <__aeabi_dsub>
 800d96a:	f805 6b01 	strb.w	r6, [r5], #1
 800d96e:	9b02      	ldr	r3, [sp, #8]
 800d970:	429d      	cmp	r5, r3
 800d972:	4680      	mov	r8, r0
 800d974:	4689      	mov	r9, r1
 800d976:	f04f 0200 	mov.w	r2, #0
 800d97a:	d124      	bne.n	800d9c6 <_dtoa_r+0x62e>
 800d97c:	4b1b      	ldr	r3, [pc, #108]	; (800d9ec <_dtoa_r+0x654>)
 800d97e:	ec51 0b19 	vmov	r0, r1, d9
 800d982:	f7f2 fc8b 	bl	800029c <__adddf3>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	4640      	mov	r0, r8
 800d98c:	4649      	mov	r1, r9
 800d98e:	f7f3 f8cb 	bl	8000b28 <__aeabi_dcmpgt>
 800d992:	2800      	cmp	r0, #0
 800d994:	d173      	bne.n	800da7e <_dtoa_r+0x6e6>
 800d996:	ec53 2b19 	vmov	r2, r3, d9
 800d99a:	4914      	ldr	r1, [pc, #80]	; (800d9ec <_dtoa_r+0x654>)
 800d99c:	2000      	movs	r0, #0
 800d99e:	f7f2 fc7b 	bl	8000298 <__aeabi_dsub>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	4640      	mov	r0, r8
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	f7f3 f89f 	bl	8000aec <__aeabi_dcmplt>
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	f43f af2f 	beq.w	800d812 <_dtoa_r+0x47a>
 800d9b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d9b6:	1e6b      	subs	r3, r5, #1
 800d9b8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9be:	2b30      	cmp	r3, #48	; 0x30
 800d9c0:	d0f8      	beq.n	800d9b4 <_dtoa_r+0x61c>
 800d9c2:	46bb      	mov	fp, r7
 800d9c4:	e04a      	b.n	800da5c <_dtoa_r+0x6c4>
 800d9c6:	4b06      	ldr	r3, [pc, #24]	; (800d9e0 <_dtoa_r+0x648>)
 800d9c8:	f7f2 fe1e 	bl	8000608 <__aeabi_dmul>
 800d9cc:	4680      	mov	r8, r0
 800d9ce:	4689      	mov	r9, r1
 800d9d0:	e7bd      	b.n	800d94e <_dtoa_r+0x5b6>
 800d9d2:	bf00      	nop
 800d9d4:	0800f478 	.word	0x0800f478
 800d9d8:	0800f450 	.word	0x0800f450
 800d9dc:	3ff00000 	.word	0x3ff00000
 800d9e0:	40240000 	.word	0x40240000
 800d9e4:	401c0000 	.word	0x401c0000
 800d9e8:	40140000 	.word	0x40140000
 800d9ec:	3fe00000 	.word	0x3fe00000
 800d9f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d9f4:	9d00      	ldr	r5, [sp, #0]
 800d9f6:	4642      	mov	r2, r8
 800d9f8:	464b      	mov	r3, r9
 800d9fa:	4630      	mov	r0, r6
 800d9fc:	4639      	mov	r1, r7
 800d9fe:	f7f2 ff2d 	bl	800085c <__aeabi_ddiv>
 800da02:	f7f3 f8b1 	bl	8000b68 <__aeabi_d2iz>
 800da06:	9001      	str	r0, [sp, #4]
 800da08:	f7f2 fd94 	bl	8000534 <__aeabi_i2d>
 800da0c:	4642      	mov	r2, r8
 800da0e:	464b      	mov	r3, r9
 800da10:	f7f2 fdfa 	bl	8000608 <__aeabi_dmul>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4630      	mov	r0, r6
 800da1a:	4639      	mov	r1, r7
 800da1c:	f7f2 fc3c 	bl	8000298 <__aeabi_dsub>
 800da20:	9e01      	ldr	r6, [sp, #4]
 800da22:	9f04      	ldr	r7, [sp, #16]
 800da24:	3630      	adds	r6, #48	; 0x30
 800da26:	f805 6b01 	strb.w	r6, [r5], #1
 800da2a:	9e00      	ldr	r6, [sp, #0]
 800da2c:	1bae      	subs	r6, r5, r6
 800da2e:	42b7      	cmp	r7, r6
 800da30:	4602      	mov	r2, r0
 800da32:	460b      	mov	r3, r1
 800da34:	d134      	bne.n	800daa0 <_dtoa_r+0x708>
 800da36:	f7f2 fc31 	bl	800029c <__adddf3>
 800da3a:	4642      	mov	r2, r8
 800da3c:	464b      	mov	r3, r9
 800da3e:	4606      	mov	r6, r0
 800da40:	460f      	mov	r7, r1
 800da42:	f7f3 f871 	bl	8000b28 <__aeabi_dcmpgt>
 800da46:	b9c8      	cbnz	r0, 800da7c <_dtoa_r+0x6e4>
 800da48:	4642      	mov	r2, r8
 800da4a:	464b      	mov	r3, r9
 800da4c:	4630      	mov	r0, r6
 800da4e:	4639      	mov	r1, r7
 800da50:	f7f3 f842 	bl	8000ad8 <__aeabi_dcmpeq>
 800da54:	b110      	cbz	r0, 800da5c <_dtoa_r+0x6c4>
 800da56:	9b01      	ldr	r3, [sp, #4]
 800da58:	07db      	lsls	r3, r3, #31
 800da5a:	d40f      	bmi.n	800da7c <_dtoa_r+0x6e4>
 800da5c:	4651      	mov	r1, sl
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 fbcc 	bl	800e1fc <_Bfree>
 800da64:	2300      	movs	r3, #0
 800da66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da68:	702b      	strb	r3, [r5, #0]
 800da6a:	f10b 0301 	add.w	r3, fp, #1
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da72:	2b00      	cmp	r3, #0
 800da74:	f43f ace2 	beq.w	800d43c <_dtoa_r+0xa4>
 800da78:	601d      	str	r5, [r3, #0]
 800da7a:	e4df      	b.n	800d43c <_dtoa_r+0xa4>
 800da7c:	465f      	mov	r7, fp
 800da7e:	462b      	mov	r3, r5
 800da80:	461d      	mov	r5, r3
 800da82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da86:	2a39      	cmp	r2, #57	; 0x39
 800da88:	d106      	bne.n	800da98 <_dtoa_r+0x700>
 800da8a:	9a00      	ldr	r2, [sp, #0]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d1f7      	bne.n	800da80 <_dtoa_r+0x6e8>
 800da90:	9900      	ldr	r1, [sp, #0]
 800da92:	2230      	movs	r2, #48	; 0x30
 800da94:	3701      	adds	r7, #1
 800da96:	700a      	strb	r2, [r1, #0]
 800da98:	781a      	ldrb	r2, [r3, #0]
 800da9a:	3201      	adds	r2, #1
 800da9c:	701a      	strb	r2, [r3, #0]
 800da9e:	e790      	b.n	800d9c2 <_dtoa_r+0x62a>
 800daa0:	4ba3      	ldr	r3, [pc, #652]	; (800dd30 <_dtoa_r+0x998>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	f7f2 fdb0 	bl	8000608 <__aeabi_dmul>
 800daa8:	2200      	movs	r2, #0
 800daaa:	2300      	movs	r3, #0
 800daac:	4606      	mov	r6, r0
 800daae:	460f      	mov	r7, r1
 800dab0:	f7f3 f812 	bl	8000ad8 <__aeabi_dcmpeq>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d09e      	beq.n	800d9f6 <_dtoa_r+0x65e>
 800dab8:	e7d0      	b.n	800da5c <_dtoa_r+0x6c4>
 800daba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dabc:	2a00      	cmp	r2, #0
 800dabe:	f000 80ca 	beq.w	800dc56 <_dtoa_r+0x8be>
 800dac2:	9a07      	ldr	r2, [sp, #28]
 800dac4:	2a01      	cmp	r2, #1
 800dac6:	f300 80ad 	bgt.w	800dc24 <_dtoa_r+0x88c>
 800daca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dacc:	2a00      	cmp	r2, #0
 800dace:	f000 80a5 	beq.w	800dc1c <_dtoa_r+0x884>
 800dad2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dad6:	9e08      	ldr	r6, [sp, #32]
 800dad8:	9d05      	ldr	r5, [sp, #20]
 800dada:	9a05      	ldr	r2, [sp, #20]
 800dadc:	441a      	add	r2, r3
 800dade:	9205      	str	r2, [sp, #20]
 800dae0:	9a06      	ldr	r2, [sp, #24]
 800dae2:	2101      	movs	r1, #1
 800dae4:	441a      	add	r2, r3
 800dae6:	4620      	mov	r0, r4
 800dae8:	9206      	str	r2, [sp, #24]
 800daea:	f000 fc3d 	bl	800e368 <__i2b>
 800daee:	4607      	mov	r7, r0
 800daf0:	b165      	cbz	r5, 800db0c <_dtoa_r+0x774>
 800daf2:	9b06      	ldr	r3, [sp, #24]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	dd09      	ble.n	800db0c <_dtoa_r+0x774>
 800daf8:	42ab      	cmp	r3, r5
 800dafa:	9a05      	ldr	r2, [sp, #20]
 800dafc:	bfa8      	it	ge
 800dafe:	462b      	movge	r3, r5
 800db00:	1ad2      	subs	r2, r2, r3
 800db02:	9205      	str	r2, [sp, #20]
 800db04:	9a06      	ldr	r2, [sp, #24]
 800db06:	1aed      	subs	r5, r5, r3
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	9306      	str	r3, [sp, #24]
 800db0c:	9b08      	ldr	r3, [sp, #32]
 800db0e:	b1f3      	cbz	r3, 800db4e <_dtoa_r+0x7b6>
 800db10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 80a3 	beq.w	800dc5e <_dtoa_r+0x8c6>
 800db18:	2e00      	cmp	r6, #0
 800db1a:	dd10      	ble.n	800db3e <_dtoa_r+0x7a6>
 800db1c:	4639      	mov	r1, r7
 800db1e:	4632      	mov	r2, r6
 800db20:	4620      	mov	r0, r4
 800db22:	f000 fce1 	bl	800e4e8 <__pow5mult>
 800db26:	4652      	mov	r2, sl
 800db28:	4601      	mov	r1, r0
 800db2a:	4607      	mov	r7, r0
 800db2c:	4620      	mov	r0, r4
 800db2e:	f000 fc31 	bl	800e394 <__multiply>
 800db32:	4651      	mov	r1, sl
 800db34:	4680      	mov	r8, r0
 800db36:	4620      	mov	r0, r4
 800db38:	f000 fb60 	bl	800e1fc <_Bfree>
 800db3c:	46c2      	mov	sl, r8
 800db3e:	9b08      	ldr	r3, [sp, #32]
 800db40:	1b9a      	subs	r2, r3, r6
 800db42:	d004      	beq.n	800db4e <_dtoa_r+0x7b6>
 800db44:	4651      	mov	r1, sl
 800db46:	4620      	mov	r0, r4
 800db48:	f000 fcce 	bl	800e4e8 <__pow5mult>
 800db4c:	4682      	mov	sl, r0
 800db4e:	2101      	movs	r1, #1
 800db50:	4620      	mov	r0, r4
 800db52:	f000 fc09 	bl	800e368 <__i2b>
 800db56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db58:	2b00      	cmp	r3, #0
 800db5a:	4606      	mov	r6, r0
 800db5c:	f340 8081 	ble.w	800dc62 <_dtoa_r+0x8ca>
 800db60:	461a      	mov	r2, r3
 800db62:	4601      	mov	r1, r0
 800db64:	4620      	mov	r0, r4
 800db66:	f000 fcbf 	bl	800e4e8 <__pow5mult>
 800db6a:	9b07      	ldr	r3, [sp, #28]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	4606      	mov	r6, r0
 800db70:	dd7a      	ble.n	800dc68 <_dtoa_r+0x8d0>
 800db72:	f04f 0800 	mov.w	r8, #0
 800db76:	6933      	ldr	r3, [r6, #16]
 800db78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800db7c:	6918      	ldr	r0, [r3, #16]
 800db7e:	f000 fba5 	bl	800e2cc <__hi0bits>
 800db82:	f1c0 0020 	rsb	r0, r0, #32
 800db86:	9b06      	ldr	r3, [sp, #24]
 800db88:	4418      	add	r0, r3
 800db8a:	f010 001f 	ands.w	r0, r0, #31
 800db8e:	f000 8094 	beq.w	800dcba <_dtoa_r+0x922>
 800db92:	f1c0 0320 	rsb	r3, r0, #32
 800db96:	2b04      	cmp	r3, #4
 800db98:	f340 8085 	ble.w	800dca6 <_dtoa_r+0x90e>
 800db9c:	9b05      	ldr	r3, [sp, #20]
 800db9e:	f1c0 001c 	rsb	r0, r0, #28
 800dba2:	4403      	add	r3, r0
 800dba4:	9305      	str	r3, [sp, #20]
 800dba6:	9b06      	ldr	r3, [sp, #24]
 800dba8:	4403      	add	r3, r0
 800dbaa:	4405      	add	r5, r0
 800dbac:	9306      	str	r3, [sp, #24]
 800dbae:	9b05      	ldr	r3, [sp, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	dd05      	ble.n	800dbc0 <_dtoa_r+0x828>
 800dbb4:	4651      	mov	r1, sl
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f000 fcef 	bl	800e59c <__lshift>
 800dbbe:	4682      	mov	sl, r0
 800dbc0:	9b06      	ldr	r3, [sp, #24]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	dd05      	ble.n	800dbd2 <_dtoa_r+0x83a>
 800dbc6:	4631      	mov	r1, r6
 800dbc8:	461a      	mov	r2, r3
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f000 fce6 	bl	800e59c <__lshift>
 800dbd0:	4606      	mov	r6, r0
 800dbd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d072      	beq.n	800dcbe <_dtoa_r+0x926>
 800dbd8:	4631      	mov	r1, r6
 800dbda:	4650      	mov	r0, sl
 800dbdc:	f000 fd4a 	bl	800e674 <__mcmp>
 800dbe0:	2800      	cmp	r0, #0
 800dbe2:	da6c      	bge.n	800dcbe <_dtoa_r+0x926>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	4651      	mov	r1, sl
 800dbe8:	220a      	movs	r2, #10
 800dbea:	4620      	mov	r0, r4
 800dbec:	f000 fb28 	bl	800e240 <__multadd>
 800dbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbf6:	4682      	mov	sl, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 81b0 	beq.w	800df5e <_dtoa_r+0xbc6>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4639      	mov	r1, r7
 800dc02:	220a      	movs	r2, #10
 800dc04:	4620      	mov	r0, r4
 800dc06:	f000 fb1b 	bl	800e240 <__multadd>
 800dc0a:	9b01      	ldr	r3, [sp, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	4607      	mov	r7, r0
 800dc10:	f300 8096 	bgt.w	800dd40 <_dtoa_r+0x9a8>
 800dc14:	9b07      	ldr	r3, [sp, #28]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	dc59      	bgt.n	800dcce <_dtoa_r+0x936>
 800dc1a:	e091      	b.n	800dd40 <_dtoa_r+0x9a8>
 800dc1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc22:	e758      	b.n	800dad6 <_dtoa_r+0x73e>
 800dc24:	9b04      	ldr	r3, [sp, #16]
 800dc26:	1e5e      	subs	r6, r3, #1
 800dc28:	9b08      	ldr	r3, [sp, #32]
 800dc2a:	42b3      	cmp	r3, r6
 800dc2c:	bfbf      	itttt	lt
 800dc2e:	9b08      	ldrlt	r3, [sp, #32]
 800dc30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800dc32:	9608      	strlt	r6, [sp, #32]
 800dc34:	1af3      	sublt	r3, r6, r3
 800dc36:	bfb4      	ite	lt
 800dc38:	18d2      	addlt	r2, r2, r3
 800dc3a:	1b9e      	subge	r6, r3, r6
 800dc3c:	9b04      	ldr	r3, [sp, #16]
 800dc3e:	bfbc      	itt	lt
 800dc40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800dc42:	2600      	movlt	r6, #0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	bfb7      	itett	lt
 800dc48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800dc4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800dc50:	1a9d      	sublt	r5, r3, r2
 800dc52:	2300      	movlt	r3, #0
 800dc54:	e741      	b.n	800dada <_dtoa_r+0x742>
 800dc56:	9e08      	ldr	r6, [sp, #32]
 800dc58:	9d05      	ldr	r5, [sp, #20]
 800dc5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800dc5c:	e748      	b.n	800daf0 <_dtoa_r+0x758>
 800dc5e:	9a08      	ldr	r2, [sp, #32]
 800dc60:	e770      	b.n	800db44 <_dtoa_r+0x7ac>
 800dc62:	9b07      	ldr	r3, [sp, #28]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	dc19      	bgt.n	800dc9c <_dtoa_r+0x904>
 800dc68:	9b02      	ldr	r3, [sp, #8]
 800dc6a:	b9bb      	cbnz	r3, 800dc9c <_dtoa_r+0x904>
 800dc6c:	9b03      	ldr	r3, [sp, #12]
 800dc6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc72:	b99b      	cbnz	r3, 800dc9c <_dtoa_r+0x904>
 800dc74:	9b03      	ldr	r3, [sp, #12]
 800dc76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc7a:	0d1b      	lsrs	r3, r3, #20
 800dc7c:	051b      	lsls	r3, r3, #20
 800dc7e:	b183      	cbz	r3, 800dca2 <_dtoa_r+0x90a>
 800dc80:	9b05      	ldr	r3, [sp, #20]
 800dc82:	3301      	adds	r3, #1
 800dc84:	9305      	str	r3, [sp, #20]
 800dc86:	9b06      	ldr	r3, [sp, #24]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	9306      	str	r3, [sp, #24]
 800dc8c:	f04f 0801 	mov.w	r8, #1
 800dc90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f47f af6f 	bne.w	800db76 <_dtoa_r+0x7de>
 800dc98:	2001      	movs	r0, #1
 800dc9a:	e774      	b.n	800db86 <_dtoa_r+0x7ee>
 800dc9c:	f04f 0800 	mov.w	r8, #0
 800dca0:	e7f6      	b.n	800dc90 <_dtoa_r+0x8f8>
 800dca2:	4698      	mov	r8, r3
 800dca4:	e7f4      	b.n	800dc90 <_dtoa_r+0x8f8>
 800dca6:	d082      	beq.n	800dbae <_dtoa_r+0x816>
 800dca8:	9a05      	ldr	r2, [sp, #20]
 800dcaa:	331c      	adds	r3, #28
 800dcac:	441a      	add	r2, r3
 800dcae:	9205      	str	r2, [sp, #20]
 800dcb0:	9a06      	ldr	r2, [sp, #24]
 800dcb2:	441a      	add	r2, r3
 800dcb4:	441d      	add	r5, r3
 800dcb6:	9206      	str	r2, [sp, #24]
 800dcb8:	e779      	b.n	800dbae <_dtoa_r+0x816>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	e7f4      	b.n	800dca8 <_dtoa_r+0x910>
 800dcbe:	9b04      	ldr	r3, [sp, #16]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	dc37      	bgt.n	800dd34 <_dtoa_r+0x99c>
 800dcc4:	9b07      	ldr	r3, [sp, #28]
 800dcc6:	2b02      	cmp	r3, #2
 800dcc8:	dd34      	ble.n	800dd34 <_dtoa_r+0x99c>
 800dcca:	9b04      	ldr	r3, [sp, #16]
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	9b01      	ldr	r3, [sp, #4]
 800dcd0:	b963      	cbnz	r3, 800dcec <_dtoa_r+0x954>
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	2205      	movs	r2, #5
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f000 fab2 	bl	800e240 <__multadd>
 800dcdc:	4601      	mov	r1, r0
 800dcde:	4606      	mov	r6, r0
 800dce0:	4650      	mov	r0, sl
 800dce2:	f000 fcc7 	bl	800e674 <__mcmp>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	f73f adbb 	bgt.w	800d862 <_dtoa_r+0x4ca>
 800dcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcee:	9d00      	ldr	r5, [sp, #0]
 800dcf0:	ea6f 0b03 	mvn.w	fp, r3
 800dcf4:	f04f 0800 	mov.w	r8, #0
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f000 fa7e 	bl	800e1fc <_Bfree>
 800dd00:	2f00      	cmp	r7, #0
 800dd02:	f43f aeab 	beq.w	800da5c <_dtoa_r+0x6c4>
 800dd06:	f1b8 0f00 	cmp.w	r8, #0
 800dd0a:	d005      	beq.n	800dd18 <_dtoa_r+0x980>
 800dd0c:	45b8      	cmp	r8, r7
 800dd0e:	d003      	beq.n	800dd18 <_dtoa_r+0x980>
 800dd10:	4641      	mov	r1, r8
 800dd12:	4620      	mov	r0, r4
 800dd14:	f000 fa72 	bl	800e1fc <_Bfree>
 800dd18:	4639      	mov	r1, r7
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 fa6e 	bl	800e1fc <_Bfree>
 800dd20:	e69c      	b.n	800da5c <_dtoa_r+0x6c4>
 800dd22:	2600      	movs	r6, #0
 800dd24:	4637      	mov	r7, r6
 800dd26:	e7e1      	b.n	800dcec <_dtoa_r+0x954>
 800dd28:	46bb      	mov	fp, r7
 800dd2a:	4637      	mov	r7, r6
 800dd2c:	e599      	b.n	800d862 <_dtoa_r+0x4ca>
 800dd2e:	bf00      	nop
 800dd30:	40240000 	.word	0x40240000
 800dd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	f000 80c8 	beq.w	800decc <_dtoa_r+0xb34>
 800dd3c:	9b04      	ldr	r3, [sp, #16]
 800dd3e:	9301      	str	r3, [sp, #4]
 800dd40:	2d00      	cmp	r5, #0
 800dd42:	dd05      	ble.n	800dd50 <_dtoa_r+0x9b8>
 800dd44:	4639      	mov	r1, r7
 800dd46:	462a      	mov	r2, r5
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f000 fc27 	bl	800e59c <__lshift>
 800dd4e:	4607      	mov	r7, r0
 800dd50:	f1b8 0f00 	cmp.w	r8, #0
 800dd54:	d05b      	beq.n	800de0e <_dtoa_r+0xa76>
 800dd56:	6879      	ldr	r1, [r7, #4]
 800dd58:	4620      	mov	r0, r4
 800dd5a:	f000 fa0f 	bl	800e17c <_Balloc>
 800dd5e:	4605      	mov	r5, r0
 800dd60:	b928      	cbnz	r0, 800dd6e <_dtoa_r+0x9d6>
 800dd62:	4b83      	ldr	r3, [pc, #524]	; (800df70 <_dtoa_r+0xbd8>)
 800dd64:	4602      	mov	r2, r0
 800dd66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dd6a:	f7ff bb2e 	b.w	800d3ca <_dtoa_r+0x32>
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	3202      	adds	r2, #2
 800dd72:	0092      	lsls	r2, r2, #2
 800dd74:	f107 010c 	add.w	r1, r7, #12
 800dd78:	300c      	adds	r0, #12
 800dd7a:	f7ff fa77 	bl	800d26c <memcpy>
 800dd7e:	2201      	movs	r2, #1
 800dd80:	4629      	mov	r1, r5
 800dd82:	4620      	mov	r0, r4
 800dd84:	f000 fc0a 	bl	800e59c <__lshift>
 800dd88:	9b00      	ldr	r3, [sp, #0]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	9304      	str	r3, [sp, #16]
 800dd8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd92:	4413      	add	r3, r2
 800dd94:	9308      	str	r3, [sp, #32]
 800dd96:	9b02      	ldr	r3, [sp, #8]
 800dd98:	f003 0301 	and.w	r3, r3, #1
 800dd9c:	46b8      	mov	r8, r7
 800dd9e:	9306      	str	r3, [sp, #24]
 800dda0:	4607      	mov	r7, r0
 800dda2:	9b04      	ldr	r3, [sp, #16]
 800dda4:	4631      	mov	r1, r6
 800dda6:	3b01      	subs	r3, #1
 800dda8:	4650      	mov	r0, sl
 800ddaa:	9301      	str	r3, [sp, #4]
 800ddac:	f7ff fa6c 	bl	800d288 <quorem>
 800ddb0:	4641      	mov	r1, r8
 800ddb2:	9002      	str	r0, [sp, #8]
 800ddb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ddb8:	4650      	mov	r0, sl
 800ddba:	f000 fc5b 	bl	800e674 <__mcmp>
 800ddbe:	463a      	mov	r2, r7
 800ddc0:	9005      	str	r0, [sp, #20]
 800ddc2:	4631      	mov	r1, r6
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f000 fc71 	bl	800e6ac <__mdiff>
 800ddca:	68c2      	ldr	r2, [r0, #12]
 800ddcc:	4605      	mov	r5, r0
 800ddce:	bb02      	cbnz	r2, 800de12 <_dtoa_r+0xa7a>
 800ddd0:	4601      	mov	r1, r0
 800ddd2:	4650      	mov	r0, sl
 800ddd4:	f000 fc4e 	bl	800e674 <__mcmp>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	4629      	mov	r1, r5
 800dddc:	4620      	mov	r0, r4
 800ddde:	9209      	str	r2, [sp, #36]	; 0x24
 800dde0:	f000 fa0c 	bl	800e1fc <_Bfree>
 800dde4:	9b07      	ldr	r3, [sp, #28]
 800dde6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dde8:	9d04      	ldr	r5, [sp, #16]
 800ddea:	ea43 0102 	orr.w	r1, r3, r2
 800ddee:	9b06      	ldr	r3, [sp, #24]
 800ddf0:	4319      	orrs	r1, r3
 800ddf2:	d110      	bne.n	800de16 <_dtoa_r+0xa7e>
 800ddf4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ddf8:	d029      	beq.n	800de4e <_dtoa_r+0xab6>
 800ddfa:	9b05      	ldr	r3, [sp, #20]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	dd02      	ble.n	800de06 <_dtoa_r+0xa6e>
 800de00:	9b02      	ldr	r3, [sp, #8]
 800de02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800de06:	9b01      	ldr	r3, [sp, #4]
 800de08:	f883 9000 	strb.w	r9, [r3]
 800de0c:	e774      	b.n	800dcf8 <_dtoa_r+0x960>
 800de0e:	4638      	mov	r0, r7
 800de10:	e7ba      	b.n	800dd88 <_dtoa_r+0x9f0>
 800de12:	2201      	movs	r2, #1
 800de14:	e7e1      	b.n	800ddda <_dtoa_r+0xa42>
 800de16:	9b05      	ldr	r3, [sp, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	db04      	blt.n	800de26 <_dtoa_r+0xa8e>
 800de1c:	9907      	ldr	r1, [sp, #28]
 800de1e:	430b      	orrs	r3, r1
 800de20:	9906      	ldr	r1, [sp, #24]
 800de22:	430b      	orrs	r3, r1
 800de24:	d120      	bne.n	800de68 <_dtoa_r+0xad0>
 800de26:	2a00      	cmp	r2, #0
 800de28:	dded      	ble.n	800de06 <_dtoa_r+0xa6e>
 800de2a:	4651      	mov	r1, sl
 800de2c:	2201      	movs	r2, #1
 800de2e:	4620      	mov	r0, r4
 800de30:	f000 fbb4 	bl	800e59c <__lshift>
 800de34:	4631      	mov	r1, r6
 800de36:	4682      	mov	sl, r0
 800de38:	f000 fc1c 	bl	800e674 <__mcmp>
 800de3c:	2800      	cmp	r0, #0
 800de3e:	dc03      	bgt.n	800de48 <_dtoa_r+0xab0>
 800de40:	d1e1      	bne.n	800de06 <_dtoa_r+0xa6e>
 800de42:	f019 0f01 	tst.w	r9, #1
 800de46:	d0de      	beq.n	800de06 <_dtoa_r+0xa6e>
 800de48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de4c:	d1d8      	bne.n	800de00 <_dtoa_r+0xa68>
 800de4e:	9a01      	ldr	r2, [sp, #4]
 800de50:	2339      	movs	r3, #57	; 0x39
 800de52:	7013      	strb	r3, [r2, #0]
 800de54:	462b      	mov	r3, r5
 800de56:	461d      	mov	r5, r3
 800de58:	3b01      	subs	r3, #1
 800de5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de5e:	2a39      	cmp	r2, #57	; 0x39
 800de60:	d06c      	beq.n	800df3c <_dtoa_r+0xba4>
 800de62:	3201      	adds	r2, #1
 800de64:	701a      	strb	r2, [r3, #0]
 800de66:	e747      	b.n	800dcf8 <_dtoa_r+0x960>
 800de68:	2a00      	cmp	r2, #0
 800de6a:	dd07      	ble.n	800de7c <_dtoa_r+0xae4>
 800de6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de70:	d0ed      	beq.n	800de4e <_dtoa_r+0xab6>
 800de72:	9a01      	ldr	r2, [sp, #4]
 800de74:	f109 0301 	add.w	r3, r9, #1
 800de78:	7013      	strb	r3, [r2, #0]
 800de7a:	e73d      	b.n	800dcf8 <_dtoa_r+0x960>
 800de7c:	9b04      	ldr	r3, [sp, #16]
 800de7e:	9a08      	ldr	r2, [sp, #32]
 800de80:	f803 9c01 	strb.w	r9, [r3, #-1]
 800de84:	4293      	cmp	r3, r2
 800de86:	d043      	beq.n	800df10 <_dtoa_r+0xb78>
 800de88:	4651      	mov	r1, sl
 800de8a:	2300      	movs	r3, #0
 800de8c:	220a      	movs	r2, #10
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 f9d6 	bl	800e240 <__multadd>
 800de94:	45b8      	cmp	r8, r7
 800de96:	4682      	mov	sl, r0
 800de98:	f04f 0300 	mov.w	r3, #0
 800de9c:	f04f 020a 	mov.w	r2, #10
 800dea0:	4641      	mov	r1, r8
 800dea2:	4620      	mov	r0, r4
 800dea4:	d107      	bne.n	800deb6 <_dtoa_r+0xb1e>
 800dea6:	f000 f9cb 	bl	800e240 <__multadd>
 800deaa:	4680      	mov	r8, r0
 800deac:	4607      	mov	r7, r0
 800deae:	9b04      	ldr	r3, [sp, #16]
 800deb0:	3301      	adds	r3, #1
 800deb2:	9304      	str	r3, [sp, #16]
 800deb4:	e775      	b.n	800dda2 <_dtoa_r+0xa0a>
 800deb6:	f000 f9c3 	bl	800e240 <__multadd>
 800deba:	4639      	mov	r1, r7
 800debc:	4680      	mov	r8, r0
 800debe:	2300      	movs	r3, #0
 800dec0:	220a      	movs	r2, #10
 800dec2:	4620      	mov	r0, r4
 800dec4:	f000 f9bc 	bl	800e240 <__multadd>
 800dec8:	4607      	mov	r7, r0
 800deca:	e7f0      	b.n	800deae <_dtoa_r+0xb16>
 800decc:	9b04      	ldr	r3, [sp, #16]
 800dece:	9301      	str	r3, [sp, #4]
 800ded0:	9d00      	ldr	r5, [sp, #0]
 800ded2:	4631      	mov	r1, r6
 800ded4:	4650      	mov	r0, sl
 800ded6:	f7ff f9d7 	bl	800d288 <quorem>
 800deda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800dede:	9b00      	ldr	r3, [sp, #0]
 800dee0:	f805 9b01 	strb.w	r9, [r5], #1
 800dee4:	1aea      	subs	r2, r5, r3
 800dee6:	9b01      	ldr	r3, [sp, #4]
 800dee8:	4293      	cmp	r3, r2
 800deea:	dd07      	ble.n	800defc <_dtoa_r+0xb64>
 800deec:	4651      	mov	r1, sl
 800deee:	2300      	movs	r3, #0
 800def0:	220a      	movs	r2, #10
 800def2:	4620      	mov	r0, r4
 800def4:	f000 f9a4 	bl	800e240 <__multadd>
 800def8:	4682      	mov	sl, r0
 800defa:	e7ea      	b.n	800ded2 <_dtoa_r+0xb3a>
 800defc:	9b01      	ldr	r3, [sp, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	bfc8      	it	gt
 800df02:	461d      	movgt	r5, r3
 800df04:	9b00      	ldr	r3, [sp, #0]
 800df06:	bfd8      	it	le
 800df08:	2501      	movle	r5, #1
 800df0a:	441d      	add	r5, r3
 800df0c:	f04f 0800 	mov.w	r8, #0
 800df10:	4651      	mov	r1, sl
 800df12:	2201      	movs	r2, #1
 800df14:	4620      	mov	r0, r4
 800df16:	f000 fb41 	bl	800e59c <__lshift>
 800df1a:	4631      	mov	r1, r6
 800df1c:	4682      	mov	sl, r0
 800df1e:	f000 fba9 	bl	800e674 <__mcmp>
 800df22:	2800      	cmp	r0, #0
 800df24:	dc96      	bgt.n	800de54 <_dtoa_r+0xabc>
 800df26:	d102      	bne.n	800df2e <_dtoa_r+0xb96>
 800df28:	f019 0f01 	tst.w	r9, #1
 800df2c:	d192      	bne.n	800de54 <_dtoa_r+0xabc>
 800df2e:	462b      	mov	r3, r5
 800df30:	461d      	mov	r5, r3
 800df32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df36:	2a30      	cmp	r2, #48	; 0x30
 800df38:	d0fa      	beq.n	800df30 <_dtoa_r+0xb98>
 800df3a:	e6dd      	b.n	800dcf8 <_dtoa_r+0x960>
 800df3c:	9a00      	ldr	r2, [sp, #0]
 800df3e:	429a      	cmp	r2, r3
 800df40:	d189      	bne.n	800de56 <_dtoa_r+0xabe>
 800df42:	f10b 0b01 	add.w	fp, fp, #1
 800df46:	2331      	movs	r3, #49	; 0x31
 800df48:	e796      	b.n	800de78 <_dtoa_r+0xae0>
 800df4a:	4b0a      	ldr	r3, [pc, #40]	; (800df74 <_dtoa_r+0xbdc>)
 800df4c:	f7ff ba99 	b.w	800d482 <_dtoa_r+0xea>
 800df50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df52:	2b00      	cmp	r3, #0
 800df54:	f47f aa6d 	bne.w	800d432 <_dtoa_r+0x9a>
 800df58:	4b07      	ldr	r3, [pc, #28]	; (800df78 <_dtoa_r+0xbe0>)
 800df5a:	f7ff ba92 	b.w	800d482 <_dtoa_r+0xea>
 800df5e:	9b01      	ldr	r3, [sp, #4]
 800df60:	2b00      	cmp	r3, #0
 800df62:	dcb5      	bgt.n	800ded0 <_dtoa_r+0xb38>
 800df64:	9b07      	ldr	r3, [sp, #28]
 800df66:	2b02      	cmp	r3, #2
 800df68:	f73f aeb1 	bgt.w	800dcce <_dtoa_r+0x936>
 800df6c:	e7b0      	b.n	800ded0 <_dtoa_r+0xb38>
 800df6e:	bf00      	nop
 800df70:	0800f3e4 	.word	0x0800f3e4
 800df74:	0800f344 	.word	0x0800f344
 800df78:	0800f368 	.word	0x0800f368

0800df7c <_free_r>:
 800df7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df7e:	2900      	cmp	r1, #0
 800df80:	d044      	beq.n	800e00c <_free_r+0x90>
 800df82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df86:	9001      	str	r0, [sp, #4]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f1a1 0404 	sub.w	r4, r1, #4
 800df8e:	bfb8      	it	lt
 800df90:	18e4      	addlt	r4, r4, r3
 800df92:	f000 f8e7 	bl	800e164 <__malloc_lock>
 800df96:	4a1e      	ldr	r2, [pc, #120]	; (800e010 <_free_r+0x94>)
 800df98:	9801      	ldr	r0, [sp, #4]
 800df9a:	6813      	ldr	r3, [r2, #0]
 800df9c:	b933      	cbnz	r3, 800dfac <_free_r+0x30>
 800df9e:	6063      	str	r3, [r4, #4]
 800dfa0:	6014      	str	r4, [r2, #0]
 800dfa2:	b003      	add	sp, #12
 800dfa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfa8:	f000 b8e2 	b.w	800e170 <__malloc_unlock>
 800dfac:	42a3      	cmp	r3, r4
 800dfae:	d908      	bls.n	800dfc2 <_free_r+0x46>
 800dfb0:	6825      	ldr	r5, [r4, #0]
 800dfb2:	1961      	adds	r1, r4, r5
 800dfb4:	428b      	cmp	r3, r1
 800dfb6:	bf01      	itttt	eq
 800dfb8:	6819      	ldreq	r1, [r3, #0]
 800dfba:	685b      	ldreq	r3, [r3, #4]
 800dfbc:	1949      	addeq	r1, r1, r5
 800dfbe:	6021      	streq	r1, [r4, #0]
 800dfc0:	e7ed      	b.n	800df9e <_free_r+0x22>
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	b10b      	cbz	r3, 800dfcc <_free_r+0x50>
 800dfc8:	42a3      	cmp	r3, r4
 800dfca:	d9fa      	bls.n	800dfc2 <_free_r+0x46>
 800dfcc:	6811      	ldr	r1, [r2, #0]
 800dfce:	1855      	adds	r5, r2, r1
 800dfd0:	42a5      	cmp	r5, r4
 800dfd2:	d10b      	bne.n	800dfec <_free_r+0x70>
 800dfd4:	6824      	ldr	r4, [r4, #0]
 800dfd6:	4421      	add	r1, r4
 800dfd8:	1854      	adds	r4, r2, r1
 800dfda:	42a3      	cmp	r3, r4
 800dfdc:	6011      	str	r1, [r2, #0]
 800dfde:	d1e0      	bne.n	800dfa2 <_free_r+0x26>
 800dfe0:	681c      	ldr	r4, [r3, #0]
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	6053      	str	r3, [r2, #4]
 800dfe6:	440c      	add	r4, r1
 800dfe8:	6014      	str	r4, [r2, #0]
 800dfea:	e7da      	b.n	800dfa2 <_free_r+0x26>
 800dfec:	d902      	bls.n	800dff4 <_free_r+0x78>
 800dfee:	230c      	movs	r3, #12
 800dff0:	6003      	str	r3, [r0, #0]
 800dff2:	e7d6      	b.n	800dfa2 <_free_r+0x26>
 800dff4:	6825      	ldr	r5, [r4, #0]
 800dff6:	1961      	adds	r1, r4, r5
 800dff8:	428b      	cmp	r3, r1
 800dffa:	bf04      	itt	eq
 800dffc:	6819      	ldreq	r1, [r3, #0]
 800dffe:	685b      	ldreq	r3, [r3, #4]
 800e000:	6063      	str	r3, [r4, #4]
 800e002:	bf04      	itt	eq
 800e004:	1949      	addeq	r1, r1, r5
 800e006:	6021      	streq	r1, [r4, #0]
 800e008:	6054      	str	r4, [r2, #4]
 800e00a:	e7ca      	b.n	800dfa2 <_free_r+0x26>
 800e00c:	b003      	add	sp, #12
 800e00e:	bd30      	pop	{r4, r5, pc}
 800e010:	20002a1c 	.word	0x20002a1c

0800e014 <malloc>:
 800e014:	4b02      	ldr	r3, [pc, #8]	; (800e020 <malloc+0xc>)
 800e016:	4601      	mov	r1, r0
 800e018:	6818      	ldr	r0, [r3, #0]
 800e01a:	f000 b823 	b.w	800e064 <_malloc_r>
 800e01e:	bf00      	nop
 800e020:	200000f4 	.word	0x200000f4

0800e024 <sbrk_aligned>:
 800e024:	b570      	push	{r4, r5, r6, lr}
 800e026:	4e0e      	ldr	r6, [pc, #56]	; (800e060 <sbrk_aligned+0x3c>)
 800e028:	460c      	mov	r4, r1
 800e02a:	6831      	ldr	r1, [r6, #0]
 800e02c:	4605      	mov	r5, r0
 800e02e:	b911      	cbnz	r1, 800e036 <sbrk_aligned+0x12>
 800e030:	f000 fe96 	bl	800ed60 <_sbrk_r>
 800e034:	6030      	str	r0, [r6, #0]
 800e036:	4621      	mov	r1, r4
 800e038:	4628      	mov	r0, r5
 800e03a:	f000 fe91 	bl	800ed60 <_sbrk_r>
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	d00a      	beq.n	800e058 <sbrk_aligned+0x34>
 800e042:	1cc4      	adds	r4, r0, #3
 800e044:	f024 0403 	bic.w	r4, r4, #3
 800e048:	42a0      	cmp	r0, r4
 800e04a:	d007      	beq.n	800e05c <sbrk_aligned+0x38>
 800e04c:	1a21      	subs	r1, r4, r0
 800e04e:	4628      	mov	r0, r5
 800e050:	f000 fe86 	bl	800ed60 <_sbrk_r>
 800e054:	3001      	adds	r0, #1
 800e056:	d101      	bne.n	800e05c <sbrk_aligned+0x38>
 800e058:	f04f 34ff 	mov.w	r4, #4294967295
 800e05c:	4620      	mov	r0, r4
 800e05e:	bd70      	pop	{r4, r5, r6, pc}
 800e060:	20002a20 	.word	0x20002a20

0800e064 <_malloc_r>:
 800e064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e068:	1ccd      	adds	r5, r1, #3
 800e06a:	f025 0503 	bic.w	r5, r5, #3
 800e06e:	3508      	adds	r5, #8
 800e070:	2d0c      	cmp	r5, #12
 800e072:	bf38      	it	cc
 800e074:	250c      	movcc	r5, #12
 800e076:	2d00      	cmp	r5, #0
 800e078:	4607      	mov	r7, r0
 800e07a:	db01      	blt.n	800e080 <_malloc_r+0x1c>
 800e07c:	42a9      	cmp	r1, r5
 800e07e:	d905      	bls.n	800e08c <_malloc_r+0x28>
 800e080:	230c      	movs	r3, #12
 800e082:	603b      	str	r3, [r7, #0]
 800e084:	2600      	movs	r6, #0
 800e086:	4630      	mov	r0, r6
 800e088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e08c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e160 <_malloc_r+0xfc>
 800e090:	f000 f868 	bl	800e164 <__malloc_lock>
 800e094:	f8d8 3000 	ldr.w	r3, [r8]
 800e098:	461c      	mov	r4, r3
 800e09a:	bb5c      	cbnz	r4, 800e0f4 <_malloc_r+0x90>
 800e09c:	4629      	mov	r1, r5
 800e09e:	4638      	mov	r0, r7
 800e0a0:	f7ff ffc0 	bl	800e024 <sbrk_aligned>
 800e0a4:	1c43      	adds	r3, r0, #1
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	d155      	bne.n	800e156 <_malloc_r+0xf2>
 800e0aa:	f8d8 4000 	ldr.w	r4, [r8]
 800e0ae:	4626      	mov	r6, r4
 800e0b0:	2e00      	cmp	r6, #0
 800e0b2:	d145      	bne.n	800e140 <_malloc_r+0xdc>
 800e0b4:	2c00      	cmp	r4, #0
 800e0b6:	d048      	beq.n	800e14a <_malloc_r+0xe6>
 800e0b8:	6823      	ldr	r3, [r4, #0]
 800e0ba:	4631      	mov	r1, r6
 800e0bc:	4638      	mov	r0, r7
 800e0be:	eb04 0903 	add.w	r9, r4, r3
 800e0c2:	f000 fe4d 	bl	800ed60 <_sbrk_r>
 800e0c6:	4581      	cmp	r9, r0
 800e0c8:	d13f      	bne.n	800e14a <_malloc_r+0xe6>
 800e0ca:	6821      	ldr	r1, [r4, #0]
 800e0cc:	1a6d      	subs	r5, r5, r1
 800e0ce:	4629      	mov	r1, r5
 800e0d0:	4638      	mov	r0, r7
 800e0d2:	f7ff ffa7 	bl	800e024 <sbrk_aligned>
 800e0d6:	3001      	adds	r0, #1
 800e0d8:	d037      	beq.n	800e14a <_malloc_r+0xe6>
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	442b      	add	r3, r5
 800e0de:	6023      	str	r3, [r4, #0]
 800e0e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d038      	beq.n	800e15a <_malloc_r+0xf6>
 800e0e8:	685a      	ldr	r2, [r3, #4]
 800e0ea:	42a2      	cmp	r2, r4
 800e0ec:	d12b      	bne.n	800e146 <_malloc_r+0xe2>
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	605a      	str	r2, [r3, #4]
 800e0f2:	e00f      	b.n	800e114 <_malloc_r+0xb0>
 800e0f4:	6822      	ldr	r2, [r4, #0]
 800e0f6:	1b52      	subs	r2, r2, r5
 800e0f8:	d41f      	bmi.n	800e13a <_malloc_r+0xd6>
 800e0fa:	2a0b      	cmp	r2, #11
 800e0fc:	d917      	bls.n	800e12e <_malloc_r+0xca>
 800e0fe:	1961      	adds	r1, r4, r5
 800e100:	42a3      	cmp	r3, r4
 800e102:	6025      	str	r5, [r4, #0]
 800e104:	bf18      	it	ne
 800e106:	6059      	strne	r1, [r3, #4]
 800e108:	6863      	ldr	r3, [r4, #4]
 800e10a:	bf08      	it	eq
 800e10c:	f8c8 1000 	streq.w	r1, [r8]
 800e110:	5162      	str	r2, [r4, r5]
 800e112:	604b      	str	r3, [r1, #4]
 800e114:	4638      	mov	r0, r7
 800e116:	f104 060b 	add.w	r6, r4, #11
 800e11a:	f000 f829 	bl	800e170 <__malloc_unlock>
 800e11e:	f026 0607 	bic.w	r6, r6, #7
 800e122:	1d23      	adds	r3, r4, #4
 800e124:	1af2      	subs	r2, r6, r3
 800e126:	d0ae      	beq.n	800e086 <_malloc_r+0x22>
 800e128:	1b9b      	subs	r3, r3, r6
 800e12a:	50a3      	str	r3, [r4, r2]
 800e12c:	e7ab      	b.n	800e086 <_malloc_r+0x22>
 800e12e:	42a3      	cmp	r3, r4
 800e130:	6862      	ldr	r2, [r4, #4]
 800e132:	d1dd      	bne.n	800e0f0 <_malloc_r+0x8c>
 800e134:	f8c8 2000 	str.w	r2, [r8]
 800e138:	e7ec      	b.n	800e114 <_malloc_r+0xb0>
 800e13a:	4623      	mov	r3, r4
 800e13c:	6864      	ldr	r4, [r4, #4]
 800e13e:	e7ac      	b.n	800e09a <_malloc_r+0x36>
 800e140:	4634      	mov	r4, r6
 800e142:	6876      	ldr	r6, [r6, #4]
 800e144:	e7b4      	b.n	800e0b0 <_malloc_r+0x4c>
 800e146:	4613      	mov	r3, r2
 800e148:	e7cc      	b.n	800e0e4 <_malloc_r+0x80>
 800e14a:	230c      	movs	r3, #12
 800e14c:	603b      	str	r3, [r7, #0]
 800e14e:	4638      	mov	r0, r7
 800e150:	f000 f80e 	bl	800e170 <__malloc_unlock>
 800e154:	e797      	b.n	800e086 <_malloc_r+0x22>
 800e156:	6025      	str	r5, [r4, #0]
 800e158:	e7dc      	b.n	800e114 <_malloc_r+0xb0>
 800e15a:	605b      	str	r3, [r3, #4]
 800e15c:	deff      	udf	#255	; 0xff
 800e15e:	bf00      	nop
 800e160:	20002a1c 	.word	0x20002a1c

0800e164 <__malloc_lock>:
 800e164:	4801      	ldr	r0, [pc, #4]	; (800e16c <__malloc_lock+0x8>)
 800e166:	f7ff b87f 	b.w	800d268 <__retarget_lock_acquire_recursive>
 800e16a:	bf00      	nop
 800e16c:	20002a18 	.word	0x20002a18

0800e170 <__malloc_unlock>:
 800e170:	4801      	ldr	r0, [pc, #4]	; (800e178 <__malloc_unlock+0x8>)
 800e172:	f7ff b87a 	b.w	800d26a <__retarget_lock_release_recursive>
 800e176:	bf00      	nop
 800e178:	20002a18 	.word	0x20002a18

0800e17c <_Balloc>:
 800e17c:	b570      	push	{r4, r5, r6, lr}
 800e17e:	69c6      	ldr	r6, [r0, #28]
 800e180:	4604      	mov	r4, r0
 800e182:	460d      	mov	r5, r1
 800e184:	b976      	cbnz	r6, 800e1a4 <_Balloc+0x28>
 800e186:	2010      	movs	r0, #16
 800e188:	f7ff ff44 	bl	800e014 <malloc>
 800e18c:	4602      	mov	r2, r0
 800e18e:	61e0      	str	r0, [r4, #28]
 800e190:	b920      	cbnz	r0, 800e19c <_Balloc+0x20>
 800e192:	4b18      	ldr	r3, [pc, #96]	; (800e1f4 <_Balloc+0x78>)
 800e194:	4818      	ldr	r0, [pc, #96]	; (800e1f8 <_Balloc+0x7c>)
 800e196:	216b      	movs	r1, #107	; 0x6b
 800e198:	f000 fdf2 	bl	800ed80 <__assert_func>
 800e19c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1a0:	6006      	str	r6, [r0, #0]
 800e1a2:	60c6      	str	r6, [r0, #12]
 800e1a4:	69e6      	ldr	r6, [r4, #28]
 800e1a6:	68f3      	ldr	r3, [r6, #12]
 800e1a8:	b183      	cbz	r3, 800e1cc <_Balloc+0x50>
 800e1aa:	69e3      	ldr	r3, [r4, #28]
 800e1ac:	68db      	ldr	r3, [r3, #12]
 800e1ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e1b2:	b9b8      	cbnz	r0, 800e1e4 <_Balloc+0x68>
 800e1b4:	2101      	movs	r1, #1
 800e1b6:	fa01 f605 	lsl.w	r6, r1, r5
 800e1ba:	1d72      	adds	r2, r6, #5
 800e1bc:	0092      	lsls	r2, r2, #2
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f000 fdfc 	bl	800edbc <_calloc_r>
 800e1c4:	b160      	cbz	r0, 800e1e0 <_Balloc+0x64>
 800e1c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e1ca:	e00e      	b.n	800e1ea <_Balloc+0x6e>
 800e1cc:	2221      	movs	r2, #33	; 0x21
 800e1ce:	2104      	movs	r1, #4
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f000 fdf3 	bl	800edbc <_calloc_r>
 800e1d6:	69e3      	ldr	r3, [r4, #28]
 800e1d8:	60f0      	str	r0, [r6, #12]
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1e4      	bne.n	800e1aa <_Balloc+0x2e>
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	bd70      	pop	{r4, r5, r6, pc}
 800e1e4:	6802      	ldr	r2, [r0, #0]
 800e1e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1f0:	e7f7      	b.n	800e1e2 <_Balloc+0x66>
 800e1f2:	bf00      	nop
 800e1f4:	0800f375 	.word	0x0800f375
 800e1f8:	0800f3f5 	.word	0x0800f3f5

0800e1fc <_Bfree>:
 800e1fc:	b570      	push	{r4, r5, r6, lr}
 800e1fe:	69c6      	ldr	r6, [r0, #28]
 800e200:	4605      	mov	r5, r0
 800e202:	460c      	mov	r4, r1
 800e204:	b976      	cbnz	r6, 800e224 <_Bfree+0x28>
 800e206:	2010      	movs	r0, #16
 800e208:	f7ff ff04 	bl	800e014 <malloc>
 800e20c:	4602      	mov	r2, r0
 800e20e:	61e8      	str	r0, [r5, #28]
 800e210:	b920      	cbnz	r0, 800e21c <_Bfree+0x20>
 800e212:	4b09      	ldr	r3, [pc, #36]	; (800e238 <_Bfree+0x3c>)
 800e214:	4809      	ldr	r0, [pc, #36]	; (800e23c <_Bfree+0x40>)
 800e216:	218f      	movs	r1, #143	; 0x8f
 800e218:	f000 fdb2 	bl	800ed80 <__assert_func>
 800e21c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e220:	6006      	str	r6, [r0, #0]
 800e222:	60c6      	str	r6, [r0, #12]
 800e224:	b13c      	cbz	r4, 800e236 <_Bfree+0x3a>
 800e226:	69eb      	ldr	r3, [r5, #28]
 800e228:	6862      	ldr	r2, [r4, #4]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e230:	6021      	str	r1, [r4, #0]
 800e232:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e236:	bd70      	pop	{r4, r5, r6, pc}
 800e238:	0800f375 	.word	0x0800f375
 800e23c:	0800f3f5 	.word	0x0800f3f5

0800e240 <__multadd>:
 800e240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e244:	690d      	ldr	r5, [r1, #16]
 800e246:	4607      	mov	r7, r0
 800e248:	460c      	mov	r4, r1
 800e24a:	461e      	mov	r6, r3
 800e24c:	f101 0c14 	add.w	ip, r1, #20
 800e250:	2000      	movs	r0, #0
 800e252:	f8dc 3000 	ldr.w	r3, [ip]
 800e256:	b299      	uxth	r1, r3
 800e258:	fb02 6101 	mla	r1, r2, r1, r6
 800e25c:	0c1e      	lsrs	r6, r3, #16
 800e25e:	0c0b      	lsrs	r3, r1, #16
 800e260:	fb02 3306 	mla	r3, r2, r6, r3
 800e264:	b289      	uxth	r1, r1
 800e266:	3001      	adds	r0, #1
 800e268:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e26c:	4285      	cmp	r5, r0
 800e26e:	f84c 1b04 	str.w	r1, [ip], #4
 800e272:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e276:	dcec      	bgt.n	800e252 <__multadd+0x12>
 800e278:	b30e      	cbz	r6, 800e2be <__multadd+0x7e>
 800e27a:	68a3      	ldr	r3, [r4, #8]
 800e27c:	42ab      	cmp	r3, r5
 800e27e:	dc19      	bgt.n	800e2b4 <__multadd+0x74>
 800e280:	6861      	ldr	r1, [r4, #4]
 800e282:	4638      	mov	r0, r7
 800e284:	3101      	adds	r1, #1
 800e286:	f7ff ff79 	bl	800e17c <_Balloc>
 800e28a:	4680      	mov	r8, r0
 800e28c:	b928      	cbnz	r0, 800e29a <__multadd+0x5a>
 800e28e:	4602      	mov	r2, r0
 800e290:	4b0c      	ldr	r3, [pc, #48]	; (800e2c4 <__multadd+0x84>)
 800e292:	480d      	ldr	r0, [pc, #52]	; (800e2c8 <__multadd+0x88>)
 800e294:	21ba      	movs	r1, #186	; 0xba
 800e296:	f000 fd73 	bl	800ed80 <__assert_func>
 800e29a:	6922      	ldr	r2, [r4, #16]
 800e29c:	3202      	adds	r2, #2
 800e29e:	f104 010c 	add.w	r1, r4, #12
 800e2a2:	0092      	lsls	r2, r2, #2
 800e2a4:	300c      	adds	r0, #12
 800e2a6:	f7fe ffe1 	bl	800d26c <memcpy>
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	4638      	mov	r0, r7
 800e2ae:	f7ff ffa5 	bl	800e1fc <_Bfree>
 800e2b2:	4644      	mov	r4, r8
 800e2b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e2b8:	3501      	adds	r5, #1
 800e2ba:	615e      	str	r6, [r3, #20]
 800e2bc:	6125      	str	r5, [r4, #16]
 800e2be:	4620      	mov	r0, r4
 800e2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2c4:	0800f3e4 	.word	0x0800f3e4
 800e2c8:	0800f3f5 	.word	0x0800f3f5

0800e2cc <__hi0bits>:
 800e2cc:	0c03      	lsrs	r3, r0, #16
 800e2ce:	041b      	lsls	r3, r3, #16
 800e2d0:	b9d3      	cbnz	r3, 800e308 <__hi0bits+0x3c>
 800e2d2:	0400      	lsls	r0, r0, #16
 800e2d4:	2310      	movs	r3, #16
 800e2d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e2da:	bf04      	itt	eq
 800e2dc:	0200      	lsleq	r0, r0, #8
 800e2de:	3308      	addeq	r3, #8
 800e2e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e2e4:	bf04      	itt	eq
 800e2e6:	0100      	lsleq	r0, r0, #4
 800e2e8:	3304      	addeq	r3, #4
 800e2ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e2ee:	bf04      	itt	eq
 800e2f0:	0080      	lsleq	r0, r0, #2
 800e2f2:	3302      	addeq	r3, #2
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	db05      	blt.n	800e304 <__hi0bits+0x38>
 800e2f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e2fc:	f103 0301 	add.w	r3, r3, #1
 800e300:	bf08      	it	eq
 800e302:	2320      	moveq	r3, #32
 800e304:	4618      	mov	r0, r3
 800e306:	4770      	bx	lr
 800e308:	2300      	movs	r3, #0
 800e30a:	e7e4      	b.n	800e2d6 <__hi0bits+0xa>

0800e30c <__lo0bits>:
 800e30c:	6803      	ldr	r3, [r0, #0]
 800e30e:	f013 0207 	ands.w	r2, r3, #7
 800e312:	d00c      	beq.n	800e32e <__lo0bits+0x22>
 800e314:	07d9      	lsls	r1, r3, #31
 800e316:	d422      	bmi.n	800e35e <__lo0bits+0x52>
 800e318:	079a      	lsls	r2, r3, #30
 800e31a:	bf49      	itett	mi
 800e31c:	085b      	lsrmi	r3, r3, #1
 800e31e:	089b      	lsrpl	r3, r3, #2
 800e320:	6003      	strmi	r3, [r0, #0]
 800e322:	2201      	movmi	r2, #1
 800e324:	bf5c      	itt	pl
 800e326:	6003      	strpl	r3, [r0, #0]
 800e328:	2202      	movpl	r2, #2
 800e32a:	4610      	mov	r0, r2
 800e32c:	4770      	bx	lr
 800e32e:	b299      	uxth	r1, r3
 800e330:	b909      	cbnz	r1, 800e336 <__lo0bits+0x2a>
 800e332:	0c1b      	lsrs	r3, r3, #16
 800e334:	2210      	movs	r2, #16
 800e336:	b2d9      	uxtb	r1, r3
 800e338:	b909      	cbnz	r1, 800e33e <__lo0bits+0x32>
 800e33a:	3208      	adds	r2, #8
 800e33c:	0a1b      	lsrs	r3, r3, #8
 800e33e:	0719      	lsls	r1, r3, #28
 800e340:	bf04      	itt	eq
 800e342:	091b      	lsreq	r3, r3, #4
 800e344:	3204      	addeq	r2, #4
 800e346:	0799      	lsls	r1, r3, #30
 800e348:	bf04      	itt	eq
 800e34a:	089b      	lsreq	r3, r3, #2
 800e34c:	3202      	addeq	r2, #2
 800e34e:	07d9      	lsls	r1, r3, #31
 800e350:	d403      	bmi.n	800e35a <__lo0bits+0x4e>
 800e352:	085b      	lsrs	r3, r3, #1
 800e354:	f102 0201 	add.w	r2, r2, #1
 800e358:	d003      	beq.n	800e362 <__lo0bits+0x56>
 800e35a:	6003      	str	r3, [r0, #0]
 800e35c:	e7e5      	b.n	800e32a <__lo0bits+0x1e>
 800e35e:	2200      	movs	r2, #0
 800e360:	e7e3      	b.n	800e32a <__lo0bits+0x1e>
 800e362:	2220      	movs	r2, #32
 800e364:	e7e1      	b.n	800e32a <__lo0bits+0x1e>
	...

0800e368 <__i2b>:
 800e368:	b510      	push	{r4, lr}
 800e36a:	460c      	mov	r4, r1
 800e36c:	2101      	movs	r1, #1
 800e36e:	f7ff ff05 	bl	800e17c <_Balloc>
 800e372:	4602      	mov	r2, r0
 800e374:	b928      	cbnz	r0, 800e382 <__i2b+0x1a>
 800e376:	4b05      	ldr	r3, [pc, #20]	; (800e38c <__i2b+0x24>)
 800e378:	4805      	ldr	r0, [pc, #20]	; (800e390 <__i2b+0x28>)
 800e37a:	f240 1145 	movw	r1, #325	; 0x145
 800e37e:	f000 fcff 	bl	800ed80 <__assert_func>
 800e382:	2301      	movs	r3, #1
 800e384:	6144      	str	r4, [r0, #20]
 800e386:	6103      	str	r3, [r0, #16]
 800e388:	bd10      	pop	{r4, pc}
 800e38a:	bf00      	nop
 800e38c:	0800f3e4 	.word	0x0800f3e4
 800e390:	0800f3f5 	.word	0x0800f3f5

0800e394 <__multiply>:
 800e394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e398:	4691      	mov	r9, r2
 800e39a:	690a      	ldr	r2, [r1, #16]
 800e39c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	bfb8      	it	lt
 800e3a4:	460b      	movlt	r3, r1
 800e3a6:	460c      	mov	r4, r1
 800e3a8:	bfbc      	itt	lt
 800e3aa:	464c      	movlt	r4, r9
 800e3ac:	4699      	movlt	r9, r3
 800e3ae:	6927      	ldr	r7, [r4, #16]
 800e3b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e3b4:	68a3      	ldr	r3, [r4, #8]
 800e3b6:	6861      	ldr	r1, [r4, #4]
 800e3b8:	eb07 060a 	add.w	r6, r7, sl
 800e3bc:	42b3      	cmp	r3, r6
 800e3be:	b085      	sub	sp, #20
 800e3c0:	bfb8      	it	lt
 800e3c2:	3101      	addlt	r1, #1
 800e3c4:	f7ff feda 	bl	800e17c <_Balloc>
 800e3c8:	b930      	cbnz	r0, 800e3d8 <__multiply+0x44>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	4b44      	ldr	r3, [pc, #272]	; (800e4e0 <__multiply+0x14c>)
 800e3ce:	4845      	ldr	r0, [pc, #276]	; (800e4e4 <__multiply+0x150>)
 800e3d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e3d4:	f000 fcd4 	bl	800ed80 <__assert_func>
 800e3d8:	f100 0514 	add.w	r5, r0, #20
 800e3dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e3e0:	462b      	mov	r3, r5
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	4543      	cmp	r3, r8
 800e3e6:	d321      	bcc.n	800e42c <__multiply+0x98>
 800e3e8:	f104 0314 	add.w	r3, r4, #20
 800e3ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e3f0:	f109 0314 	add.w	r3, r9, #20
 800e3f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e3f8:	9202      	str	r2, [sp, #8]
 800e3fa:	1b3a      	subs	r2, r7, r4
 800e3fc:	3a15      	subs	r2, #21
 800e3fe:	f022 0203 	bic.w	r2, r2, #3
 800e402:	3204      	adds	r2, #4
 800e404:	f104 0115 	add.w	r1, r4, #21
 800e408:	428f      	cmp	r7, r1
 800e40a:	bf38      	it	cc
 800e40c:	2204      	movcc	r2, #4
 800e40e:	9201      	str	r2, [sp, #4]
 800e410:	9a02      	ldr	r2, [sp, #8]
 800e412:	9303      	str	r3, [sp, #12]
 800e414:	429a      	cmp	r2, r3
 800e416:	d80c      	bhi.n	800e432 <__multiply+0x9e>
 800e418:	2e00      	cmp	r6, #0
 800e41a:	dd03      	ble.n	800e424 <__multiply+0x90>
 800e41c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e420:	2b00      	cmp	r3, #0
 800e422:	d05b      	beq.n	800e4dc <__multiply+0x148>
 800e424:	6106      	str	r6, [r0, #16]
 800e426:	b005      	add	sp, #20
 800e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e42c:	f843 2b04 	str.w	r2, [r3], #4
 800e430:	e7d8      	b.n	800e3e4 <__multiply+0x50>
 800e432:	f8b3 a000 	ldrh.w	sl, [r3]
 800e436:	f1ba 0f00 	cmp.w	sl, #0
 800e43a:	d024      	beq.n	800e486 <__multiply+0xf2>
 800e43c:	f104 0e14 	add.w	lr, r4, #20
 800e440:	46a9      	mov	r9, r5
 800e442:	f04f 0c00 	mov.w	ip, #0
 800e446:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e44a:	f8d9 1000 	ldr.w	r1, [r9]
 800e44e:	fa1f fb82 	uxth.w	fp, r2
 800e452:	b289      	uxth	r1, r1
 800e454:	fb0a 110b 	mla	r1, sl, fp, r1
 800e458:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e45c:	f8d9 2000 	ldr.w	r2, [r9]
 800e460:	4461      	add	r1, ip
 800e462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e466:	fb0a c20b 	mla	r2, sl, fp, ip
 800e46a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e46e:	b289      	uxth	r1, r1
 800e470:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e474:	4577      	cmp	r7, lr
 800e476:	f849 1b04 	str.w	r1, [r9], #4
 800e47a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e47e:	d8e2      	bhi.n	800e446 <__multiply+0xb2>
 800e480:	9a01      	ldr	r2, [sp, #4]
 800e482:	f845 c002 	str.w	ip, [r5, r2]
 800e486:	9a03      	ldr	r2, [sp, #12]
 800e488:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e48c:	3304      	adds	r3, #4
 800e48e:	f1b9 0f00 	cmp.w	r9, #0
 800e492:	d021      	beq.n	800e4d8 <__multiply+0x144>
 800e494:	6829      	ldr	r1, [r5, #0]
 800e496:	f104 0c14 	add.w	ip, r4, #20
 800e49a:	46ae      	mov	lr, r5
 800e49c:	f04f 0a00 	mov.w	sl, #0
 800e4a0:	f8bc b000 	ldrh.w	fp, [ip]
 800e4a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e4a8:	fb09 220b 	mla	r2, r9, fp, r2
 800e4ac:	4452      	add	r2, sl
 800e4ae:	b289      	uxth	r1, r1
 800e4b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4b4:	f84e 1b04 	str.w	r1, [lr], #4
 800e4b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e4bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e4c0:	f8be 1000 	ldrh.w	r1, [lr]
 800e4c4:	fb09 110a 	mla	r1, r9, sl, r1
 800e4c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e4cc:	4567      	cmp	r7, ip
 800e4ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e4d2:	d8e5      	bhi.n	800e4a0 <__multiply+0x10c>
 800e4d4:	9a01      	ldr	r2, [sp, #4]
 800e4d6:	50a9      	str	r1, [r5, r2]
 800e4d8:	3504      	adds	r5, #4
 800e4da:	e799      	b.n	800e410 <__multiply+0x7c>
 800e4dc:	3e01      	subs	r6, #1
 800e4de:	e79b      	b.n	800e418 <__multiply+0x84>
 800e4e0:	0800f3e4 	.word	0x0800f3e4
 800e4e4:	0800f3f5 	.word	0x0800f3f5

0800e4e8 <__pow5mult>:
 800e4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4ec:	4615      	mov	r5, r2
 800e4ee:	f012 0203 	ands.w	r2, r2, #3
 800e4f2:	4606      	mov	r6, r0
 800e4f4:	460f      	mov	r7, r1
 800e4f6:	d007      	beq.n	800e508 <__pow5mult+0x20>
 800e4f8:	4c25      	ldr	r4, [pc, #148]	; (800e590 <__pow5mult+0xa8>)
 800e4fa:	3a01      	subs	r2, #1
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e502:	f7ff fe9d 	bl	800e240 <__multadd>
 800e506:	4607      	mov	r7, r0
 800e508:	10ad      	asrs	r5, r5, #2
 800e50a:	d03d      	beq.n	800e588 <__pow5mult+0xa0>
 800e50c:	69f4      	ldr	r4, [r6, #28]
 800e50e:	b97c      	cbnz	r4, 800e530 <__pow5mult+0x48>
 800e510:	2010      	movs	r0, #16
 800e512:	f7ff fd7f 	bl	800e014 <malloc>
 800e516:	4602      	mov	r2, r0
 800e518:	61f0      	str	r0, [r6, #28]
 800e51a:	b928      	cbnz	r0, 800e528 <__pow5mult+0x40>
 800e51c:	4b1d      	ldr	r3, [pc, #116]	; (800e594 <__pow5mult+0xac>)
 800e51e:	481e      	ldr	r0, [pc, #120]	; (800e598 <__pow5mult+0xb0>)
 800e520:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e524:	f000 fc2c 	bl	800ed80 <__assert_func>
 800e528:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e52c:	6004      	str	r4, [r0, #0]
 800e52e:	60c4      	str	r4, [r0, #12]
 800e530:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e534:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e538:	b94c      	cbnz	r4, 800e54e <__pow5mult+0x66>
 800e53a:	f240 2171 	movw	r1, #625	; 0x271
 800e53e:	4630      	mov	r0, r6
 800e540:	f7ff ff12 	bl	800e368 <__i2b>
 800e544:	2300      	movs	r3, #0
 800e546:	f8c8 0008 	str.w	r0, [r8, #8]
 800e54a:	4604      	mov	r4, r0
 800e54c:	6003      	str	r3, [r0, #0]
 800e54e:	f04f 0900 	mov.w	r9, #0
 800e552:	07eb      	lsls	r3, r5, #31
 800e554:	d50a      	bpl.n	800e56c <__pow5mult+0x84>
 800e556:	4639      	mov	r1, r7
 800e558:	4622      	mov	r2, r4
 800e55a:	4630      	mov	r0, r6
 800e55c:	f7ff ff1a 	bl	800e394 <__multiply>
 800e560:	4639      	mov	r1, r7
 800e562:	4680      	mov	r8, r0
 800e564:	4630      	mov	r0, r6
 800e566:	f7ff fe49 	bl	800e1fc <_Bfree>
 800e56a:	4647      	mov	r7, r8
 800e56c:	106d      	asrs	r5, r5, #1
 800e56e:	d00b      	beq.n	800e588 <__pow5mult+0xa0>
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	b938      	cbnz	r0, 800e584 <__pow5mult+0x9c>
 800e574:	4622      	mov	r2, r4
 800e576:	4621      	mov	r1, r4
 800e578:	4630      	mov	r0, r6
 800e57a:	f7ff ff0b 	bl	800e394 <__multiply>
 800e57e:	6020      	str	r0, [r4, #0]
 800e580:	f8c0 9000 	str.w	r9, [r0]
 800e584:	4604      	mov	r4, r0
 800e586:	e7e4      	b.n	800e552 <__pow5mult+0x6a>
 800e588:	4638      	mov	r0, r7
 800e58a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e58e:	bf00      	nop
 800e590:	0800f540 	.word	0x0800f540
 800e594:	0800f375 	.word	0x0800f375
 800e598:	0800f3f5 	.word	0x0800f3f5

0800e59c <__lshift>:
 800e59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a0:	460c      	mov	r4, r1
 800e5a2:	6849      	ldr	r1, [r1, #4]
 800e5a4:	6923      	ldr	r3, [r4, #16]
 800e5a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e5aa:	68a3      	ldr	r3, [r4, #8]
 800e5ac:	4607      	mov	r7, r0
 800e5ae:	4691      	mov	r9, r2
 800e5b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e5b4:	f108 0601 	add.w	r6, r8, #1
 800e5b8:	42b3      	cmp	r3, r6
 800e5ba:	db0b      	blt.n	800e5d4 <__lshift+0x38>
 800e5bc:	4638      	mov	r0, r7
 800e5be:	f7ff fddd 	bl	800e17c <_Balloc>
 800e5c2:	4605      	mov	r5, r0
 800e5c4:	b948      	cbnz	r0, 800e5da <__lshift+0x3e>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	4b28      	ldr	r3, [pc, #160]	; (800e66c <__lshift+0xd0>)
 800e5ca:	4829      	ldr	r0, [pc, #164]	; (800e670 <__lshift+0xd4>)
 800e5cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e5d0:	f000 fbd6 	bl	800ed80 <__assert_func>
 800e5d4:	3101      	adds	r1, #1
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	e7ee      	b.n	800e5b8 <__lshift+0x1c>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	f100 0114 	add.w	r1, r0, #20
 800e5e0:	f100 0210 	add.w	r2, r0, #16
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	4553      	cmp	r3, sl
 800e5e8:	db33      	blt.n	800e652 <__lshift+0xb6>
 800e5ea:	6920      	ldr	r0, [r4, #16]
 800e5ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5f0:	f104 0314 	add.w	r3, r4, #20
 800e5f4:	f019 091f 	ands.w	r9, r9, #31
 800e5f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e600:	d02b      	beq.n	800e65a <__lshift+0xbe>
 800e602:	f1c9 0e20 	rsb	lr, r9, #32
 800e606:	468a      	mov	sl, r1
 800e608:	2200      	movs	r2, #0
 800e60a:	6818      	ldr	r0, [r3, #0]
 800e60c:	fa00 f009 	lsl.w	r0, r0, r9
 800e610:	4310      	orrs	r0, r2
 800e612:	f84a 0b04 	str.w	r0, [sl], #4
 800e616:	f853 2b04 	ldr.w	r2, [r3], #4
 800e61a:	459c      	cmp	ip, r3
 800e61c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e620:	d8f3      	bhi.n	800e60a <__lshift+0x6e>
 800e622:	ebac 0304 	sub.w	r3, ip, r4
 800e626:	3b15      	subs	r3, #21
 800e628:	f023 0303 	bic.w	r3, r3, #3
 800e62c:	3304      	adds	r3, #4
 800e62e:	f104 0015 	add.w	r0, r4, #21
 800e632:	4584      	cmp	ip, r0
 800e634:	bf38      	it	cc
 800e636:	2304      	movcc	r3, #4
 800e638:	50ca      	str	r2, [r1, r3]
 800e63a:	b10a      	cbz	r2, 800e640 <__lshift+0xa4>
 800e63c:	f108 0602 	add.w	r6, r8, #2
 800e640:	3e01      	subs	r6, #1
 800e642:	4638      	mov	r0, r7
 800e644:	612e      	str	r6, [r5, #16]
 800e646:	4621      	mov	r1, r4
 800e648:	f7ff fdd8 	bl	800e1fc <_Bfree>
 800e64c:	4628      	mov	r0, r5
 800e64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e652:	f842 0f04 	str.w	r0, [r2, #4]!
 800e656:	3301      	adds	r3, #1
 800e658:	e7c5      	b.n	800e5e6 <__lshift+0x4a>
 800e65a:	3904      	subs	r1, #4
 800e65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e660:	f841 2f04 	str.w	r2, [r1, #4]!
 800e664:	459c      	cmp	ip, r3
 800e666:	d8f9      	bhi.n	800e65c <__lshift+0xc0>
 800e668:	e7ea      	b.n	800e640 <__lshift+0xa4>
 800e66a:	bf00      	nop
 800e66c:	0800f3e4 	.word	0x0800f3e4
 800e670:	0800f3f5 	.word	0x0800f3f5

0800e674 <__mcmp>:
 800e674:	b530      	push	{r4, r5, lr}
 800e676:	6902      	ldr	r2, [r0, #16]
 800e678:	690c      	ldr	r4, [r1, #16]
 800e67a:	1b12      	subs	r2, r2, r4
 800e67c:	d10e      	bne.n	800e69c <__mcmp+0x28>
 800e67e:	f100 0314 	add.w	r3, r0, #20
 800e682:	3114      	adds	r1, #20
 800e684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e68c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e694:	42a5      	cmp	r5, r4
 800e696:	d003      	beq.n	800e6a0 <__mcmp+0x2c>
 800e698:	d305      	bcc.n	800e6a6 <__mcmp+0x32>
 800e69a:	2201      	movs	r2, #1
 800e69c:	4610      	mov	r0, r2
 800e69e:	bd30      	pop	{r4, r5, pc}
 800e6a0:	4283      	cmp	r3, r0
 800e6a2:	d3f3      	bcc.n	800e68c <__mcmp+0x18>
 800e6a4:	e7fa      	b.n	800e69c <__mcmp+0x28>
 800e6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6aa:	e7f7      	b.n	800e69c <__mcmp+0x28>

0800e6ac <__mdiff>:
 800e6ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	4690      	mov	r8, r2
 800e6ba:	f7ff ffdb 	bl	800e674 <__mcmp>
 800e6be:	1e05      	subs	r5, r0, #0
 800e6c0:	d110      	bne.n	800e6e4 <__mdiff+0x38>
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	4630      	mov	r0, r6
 800e6c6:	f7ff fd59 	bl	800e17c <_Balloc>
 800e6ca:	b930      	cbnz	r0, 800e6da <__mdiff+0x2e>
 800e6cc:	4b3a      	ldr	r3, [pc, #232]	; (800e7b8 <__mdiff+0x10c>)
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	f240 2137 	movw	r1, #567	; 0x237
 800e6d4:	4839      	ldr	r0, [pc, #228]	; (800e7bc <__mdiff+0x110>)
 800e6d6:	f000 fb53 	bl	800ed80 <__assert_func>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e6e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e4:	bfa4      	itt	ge
 800e6e6:	4643      	movge	r3, r8
 800e6e8:	46a0      	movge	r8, r4
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e6f0:	bfa6      	itte	ge
 800e6f2:	461c      	movge	r4, r3
 800e6f4:	2500      	movge	r5, #0
 800e6f6:	2501      	movlt	r5, #1
 800e6f8:	f7ff fd40 	bl	800e17c <_Balloc>
 800e6fc:	b920      	cbnz	r0, 800e708 <__mdiff+0x5c>
 800e6fe:	4b2e      	ldr	r3, [pc, #184]	; (800e7b8 <__mdiff+0x10c>)
 800e700:	4602      	mov	r2, r0
 800e702:	f240 2145 	movw	r1, #581	; 0x245
 800e706:	e7e5      	b.n	800e6d4 <__mdiff+0x28>
 800e708:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e70c:	6926      	ldr	r6, [r4, #16]
 800e70e:	60c5      	str	r5, [r0, #12]
 800e710:	f104 0914 	add.w	r9, r4, #20
 800e714:	f108 0514 	add.w	r5, r8, #20
 800e718:	f100 0e14 	add.w	lr, r0, #20
 800e71c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e720:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e724:	f108 0210 	add.w	r2, r8, #16
 800e728:	46f2      	mov	sl, lr
 800e72a:	2100      	movs	r1, #0
 800e72c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e730:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e734:	fa11 f88b 	uxtah	r8, r1, fp
 800e738:	b299      	uxth	r1, r3
 800e73a:	0c1b      	lsrs	r3, r3, #16
 800e73c:	eba8 0801 	sub.w	r8, r8, r1
 800e740:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e744:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e748:	fa1f f888 	uxth.w	r8, r8
 800e74c:	1419      	asrs	r1, r3, #16
 800e74e:	454e      	cmp	r6, r9
 800e750:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e754:	f84a 3b04 	str.w	r3, [sl], #4
 800e758:	d8e8      	bhi.n	800e72c <__mdiff+0x80>
 800e75a:	1b33      	subs	r3, r6, r4
 800e75c:	3b15      	subs	r3, #21
 800e75e:	f023 0303 	bic.w	r3, r3, #3
 800e762:	3304      	adds	r3, #4
 800e764:	3415      	adds	r4, #21
 800e766:	42a6      	cmp	r6, r4
 800e768:	bf38      	it	cc
 800e76a:	2304      	movcc	r3, #4
 800e76c:	441d      	add	r5, r3
 800e76e:	4473      	add	r3, lr
 800e770:	469e      	mov	lr, r3
 800e772:	462e      	mov	r6, r5
 800e774:	4566      	cmp	r6, ip
 800e776:	d30e      	bcc.n	800e796 <__mdiff+0xea>
 800e778:	f10c 0203 	add.w	r2, ip, #3
 800e77c:	1b52      	subs	r2, r2, r5
 800e77e:	f022 0203 	bic.w	r2, r2, #3
 800e782:	3d03      	subs	r5, #3
 800e784:	45ac      	cmp	ip, r5
 800e786:	bf38      	it	cc
 800e788:	2200      	movcc	r2, #0
 800e78a:	4413      	add	r3, r2
 800e78c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e790:	b17a      	cbz	r2, 800e7b2 <__mdiff+0x106>
 800e792:	6107      	str	r7, [r0, #16]
 800e794:	e7a4      	b.n	800e6e0 <__mdiff+0x34>
 800e796:	f856 8b04 	ldr.w	r8, [r6], #4
 800e79a:	fa11 f288 	uxtah	r2, r1, r8
 800e79e:	1414      	asrs	r4, r2, #16
 800e7a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e7a4:	b292      	uxth	r2, r2
 800e7a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e7aa:	f84e 2b04 	str.w	r2, [lr], #4
 800e7ae:	1421      	asrs	r1, r4, #16
 800e7b0:	e7e0      	b.n	800e774 <__mdiff+0xc8>
 800e7b2:	3f01      	subs	r7, #1
 800e7b4:	e7ea      	b.n	800e78c <__mdiff+0xe0>
 800e7b6:	bf00      	nop
 800e7b8:	0800f3e4 	.word	0x0800f3e4
 800e7bc:	0800f3f5 	.word	0x0800f3f5

0800e7c0 <__d2b>:
 800e7c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7c4:	460f      	mov	r7, r1
 800e7c6:	2101      	movs	r1, #1
 800e7c8:	ec59 8b10 	vmov	r8, r9, d0
 800e7cc:	4616      	mov	r6, r2
 800e7ce:	f7ff fcd5 	bl	800e17c <_Balloc>
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	b930      	cbnz	r0, 800e7e4 <__d2b+0x24>
 800e7d6:	4602      	mov	r2, r0
 800e7d8:	4b24      	ldr	r3, [pc, #144]	; (800e86c <__d2b+0xac>)
 800e7da:	4825      	ldr	r0, [pc, #148]	; (800e870 <__d2b+0xb0>)
 800e7dc:	f240 310f 	movw	r1, #783	; 0x30f
 800e7e0:	f000 face 	bl	800ed80 <__assert_func>
 800e7e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e7e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7ec:	bb2d      	cbnz	r5, 800e83a <__d2b+0x7a>
 800e7ee:	9301      	str	r3, [sp, #4]
 800e7f0:	f1b8 0300 	subs.w	r3, r8, #0
 800e7f4:	d026      	beq.n	800e844 <__d2b+0x84>
 800e7f6:	4668      	mov	r0, sp
 800e7f8:	9300      	str	r3, [sp, #0]
 800e7fa:	f7ff fd87 	bl	800e30c <__lo0bits>
 800e7fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e802:	b1e8      	cbz	r0, 800e840 <__d2b+0x80>
 800e804:	f1c0 0320 	rsb	r3, r0, #32
 800e808:	fa02 f303 	lsl.w	r3, r2, r3
 800e80c:	430b      	orrs	r3, r1
 800e80e:	40c2      	lsrs	r2, r0
 800e810:	6163      	str	r3, [r4, #20]
 800e812:	9201      	str	r2, [sp, #4]
 800e814:	9b01      	ldr	r3, [sp, #4]
 800e816:	61a3      	str	r3, [r4, #24]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	bf14      	ite	ne
 800e81c:	2202      	movne	r2, #2
 800e81e:	2201      	moveq	r2, #1
 800e820:	6122      	str	r2, [r4, #16]
 800e822:	b1bd      	cbz	r5, 800e854 <__d2b+0x94>
 800e824:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e828:	4405      	add	r5, r0
 800e82a:	603d      	str	r5, [r7, #0]
 800e82c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e830:	6030      	str	r0, [r6, #0]
 800e832:	4620      	mov	r0, r4
 800e834:	b003      	add	sp, #12
 800e836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e83a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e83e:	e7d6      	b.n	800e7ee <__d2b+0x2e>
 800e840:	6161      	str	r1, [r4, #20]
 800e842:	e7e7      	b.n	800e814 <__d2b+0x54>
 800e844:	a801      	add	r0, sp, #4
 800e846:	f7ff fd61 	bl	800e30c <__lo0bits>
 800e84a:	9b01      	ldr	r3, [sp, #4]
 800e84c:	6163      	str	r3, [r4, #20]
 800e84e:	3020      	adds	r0, #32
 800e850:	2201      	movs	r2, #1
 800e852:	e7e5      	b.n	800e820 <__d2b+0x60>
 800e854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e85c:	6038      	str	r0, [r7, #0]
 800e85e:	6918      	ldr	r0, [r3, #16]
 800e860:	f7ff fd34 	bl	800e2cc <__hi0bits>
 800e864:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e868:	e7e2      	b.n	800e830 <__d2b+0x70>
 800e86a:	bf00      	nop
 800e86c:	0800f3e4 	.word	0x0800f3e4
 800e870:	0800f3f5 	.word	0x0800f3f5

0800e874 <__sfputc_r>:
 800e874:	6893      	ldr	r3, [r2, #8]
 800e876:	3b01      	subs	r3, #1
 800e878:	2b00      	cmp	r3, #0
 800e87a:	b410      	push	{r4}
 800e87c:	6093      	str	r3, [r2, #8]
 800e87e:	da08      	bge.n	800e892 <__sfputc_r+0x1e>
 800e880:	6994      	ldr	r4, [r2, #24]
 800e882:	42a3      	cmp	r3, r4
 800e884:	db01      	blt.n	800e88a <__sfputc_r+0x16>
 800e886:	290a      	cmp	r1, #10
 800e888:	d103      	bne.n	800e892 <__sfputc_r+0x1e>
 800e88a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e88e:	f7fe bb84 	b.w	800cf9a <__swbuf_r>
 800e892:	6813      	ldr	r3, [r2, #0]
 800e894:	1c58      	adds	r0, r3, #1
 800e896:	6010      	str	r0, [r2, #0]
 800e898:	7019      	strb	r1, [r3, #0]
 800e89a:	4608      	mov	r0, r1
 800e89c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <__sfputs_r>:
 800e8a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	460f      	mov	r7, r1
 800e8a8:	4614      	mov	r4, r2
 800e8aa:	18d5      	adds	r5, r2, r3
 800e8ac:	42ac      	cmp	r4, r5
 800e8ae:	d101      	bne.n	800e8b4 <__sfputs_r+0x12>
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e007      	b.n	800e8c4 <__sfputs_r+0x22>
 800e8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8b8:	463a      	mov	r2, r7
 800e8ba:	4630      	mov	r0, r6
 800e8bc:	f7ff ffda 	bl	800e874 <__sfputc_r>
 800e8c0:	1c43      	adds	r3, r0, #1
 800e8c2:	d1f3      	bne.n	800e8ac <__sfputs_r+0xa>
 800e8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8c8 <_vfiprintf_r>:
 800e8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8cc:	460d      	mov	r5, r1
 800e8ce:	b09d      	sub	sp, #116	; 0x74
 800e8d0:	4614      	mov	r4, r2
 800e8d2:	4698      	mov	r8, r3
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	b118      	cbz	r0, 800e8e0 <_vfiprintf_r+0x18>
 800e8d8:	6a03      	ldr	r3, [r0, #32]
 800e8da:	b90b      	cbnz	r3, 800e8e0 <_vfiprintf_r+0x18>
 800e8dc:	f7fe fa76 	bl	800cdcc <__sinit>
 800e8e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e8e2:	07d9      	lsls	r1, r3, #31
 800e8e4:	d405      	bmi.n	800e8f2 <_vfiprintf_r+0x2a>
 800e8e6:	89ab      	ldrh	r3, [r5, #12]
 800e8e8:	059a      	lsls	r2, r3, #22
 800e8ea:	d402      	bmi.n	800e8f2 <_vfiprintf_r+0x2a>
 800e8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8ee:	f7fe fcbb 	bl	800d268 <__retarget_lock_acquire_recursive>
 800e8f2:	89ab      	ldrh	r3, [r5, #12]
 800e8f4:	071b      	lsls	r3, r3, #28
 800e8f6:	d501      	bpl.n	800e8fc <_vfiprintf_r+0x34>
 800e8f8:	692b      	ldr	r3, [r5, #16]
 800e8fa:	b99b      	cbnz	r3, 800e924 <_vfiprintf_r+0x5c>
 800e8fc:	4629      	mov	r1, r5
 800e8fe:	4630      	mov	r0, r6
 800e900:	f7fe fb88 	bl	800d014 <__swsetup_r>
 800e904:	b170      	cbz	r0, 800e924 <_vfiprintf_r+0x5c>
 800e906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e908:	07dc      	lsls	r4, r3, #31
 800e90a:	d504      	bpl.n	800e916 <_vfiprintf_r+0x4e>
 800e90c:	f04f 30ff 	mov.w	r0, #4294967295
 800e910:	b01d      	add	sp, #116	; 0x74
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	89ab      	ldrh	r3, [r5, #12]
 800e918:	0598      	lsls	r0, r3, #22
 800e91a:	d4f7      	bmi.n	800e90c <_vfiprintf_r+0x44>
 800e91c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e91e:	f7fe fca4 	bl	800d26a <__retarget_lock_release_recursive>
 800e922:	e7f3      	b.n	800e90c <_vfiprintf_r+0x44>
 800e924:	2300      	movs	r3, #0
 800e926:	9309      	str	r3, [sp, #36]	; 0x24
 800e928:	2320      	movs	r3, #32
 800e92a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e92e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e932:	2330      	movs	r3, #48	; 0x30
 800e934:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800eae8 <_vfiprintf_r+0x220>
 800e938:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e93c:	f04f 0901 	mov.w	r9, #1
 800e940:	4623      	mov	r3, r4
 800e942:	469a      	mov	sl, r3
 800e944:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e948:	b10a      	cbz	r2, 800e94e <_vfiprintf_r+0x86>
 800e94a:	2a25      	cmp	r2, #37	; 0x25
 800e94c:	d1f9      	bne.n	800e942 <_vfiprintf_r+0x7a>
 800e94e:	ebba 0b04 	subs.w	fp, sl, r4
 800e952:	d00b      	beq.n	800e96c <_vfiprintf_r+0xa4>
 800e954:	465b      	mov	r3, fp
 800e956:	4622      	mov	r2, r4
 800e958:	4629      	mov	r1, r5
 800e95a:	4630      	mov	r0, r6
 800e95c:	f7ff ffa1 	bl	800e8a2 <__sfputs_r>
 800e960:	3001      	adds	r0, #1
 800e962:	f000 80a9 	beq.w	800eab8 <_vfiprintf_r+0x1f0>
 800e966:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e968:	445a      	add	r2, fp
 800e96a:	9209      	str	r2, [sp, #36]	; 0x24
 800e96c:	f89a 3000 	ldrb.w	r3, [sl]
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 80a1 	beq.w	800eab8 <_vfiprintf_r+0x1f0>
 800e976:	2300      	movs	r3, #0
 800e978:	f04f 32ff 	mov.w	r2, #4294967295
 800e97c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e980:	f10a 0a01 	add.w	sl, sl, #1
 800e984:	9304      	str	r3, [sp, #16]
 800e986:	9307      	str	r3, [sp, #28]
 800e988:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e98c:	931a      	str	r3, [sp, #104]	; 0x68
 800e98e:	4654      	mov	r4, sl
 800e990:	2205      	movs	r2, #5
 800e992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e996:	4854      	ldr	r0, [pc, #336]	; (800eae8 <_vfiprintf_r+0x220>)
 800e998:	f7f1 fc22 	bl	80001e0 <memchr>
 800e99c:	9a04      	ldr	r2, [sp, #16]
 800e99e:	b9d8      	cbnz	r0, 800e9d8 <_vfiprintf_r+0x110>
 800e9a0:	06d1      	lsls	r1, r2, #27
 800e9a2:	bf44      	itt	mi
 800e9a4:	2320      	movmi	r3, #32
 800e9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9aa:	0713      	lsls	r3, r2, #28
 800e9ac:	bf44      	itt	mi
 800e9ae:	232b      	movmi	r3, #43	; 0x2b
 800e9b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e9ba:	d015      	beq.n	800e9e8 <_vfiprintf_r+0x120>
 800e9bc:	9a07      	ldr	r2, [sp, #28]
 800e9be:	4654      	mov	r4, sl
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	f04f 0c0a 	mov.w	ip, #10
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9cc:	3b30      	subs	r3, #48	; 0x30
 800e9ce:	2b09      	cmp	r3, #9
 800e9d0:	d94d      	bls.n	800ea6e <_vfiprintf_r+0x1a6>
 800e9d2:	b1b0      	cbz	r0, 800ea02 <_vfiprintf_r+0x13a>
 800e9d4:	9207      	str	r2, [sp, #28]
 800e9d6:	e014      	b.n	800ea02 <_vfiprintf_r+0x13a>
 800e9d8:	eba0 0308 	sub.w	r3, r0, r8
 800e9dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	9304      	str	r3, [sp, #16]
 800e9e4:	46a2      	mov	sl, r4
 800e9e6:	e7d2      	b.n	800e98e <_vfiprintf_r+0xc6>
 800e9e8:	9b03      	ldr	r3, [sp, #12]
 800e9ea:	1d19      	adds	r1, r3, #4
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	9103      	str	r1, [sp, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	bfbb      	ittet	lt
 800e9f4:	425b      	neglt	r3, r3
 800e9f6:	f042 0202 	orrlt.w	r2, r2, #2
 800e9fa:	9307      	strge	r3, [sp, #28]
 800e9fc:	9307      	strlt	r3, [sp, #28]
 800e9fe:	bfb8      	it	lt
 800ea00:	9204      	strlt	r2, [sp, #16]
 800ea02:	7823      	ldrb	r3, [r4, #0]
 800ea04:	2b2e      	cmp	r3, #46	; 0x2e
 800ea06:	d10c      	bne.n	800ea22 <_vfiprintf_r+0x15a>
 800ea08:	7863      	ldrb	r3, [r4, #1]
 800ea0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea0c:	d134      	bne.n	800ea78 <_vfiprintf_r+0x1b0>
 800ea0e:	9b03      	ldr	r3, [sp, #12]
 800ea10:	1d1a      	adds	r2, r3, #4
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	9203      	str	r2, [sp, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	bfb8      	it	lt
 800ea1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea1e:	3402      	adds	r4, #2
 800ea20:	9305      	str	r3, [sp, #20]
 800ea22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800eaf8 <_vfiprintf_r+0x230>
 800ea26:	7821      	ldrb	r1, [r4, #0]
 800ea28:	2203      	movs	r2, #3
 800ea2a:	4650      	mov	r0, sl
 800ea2c:	f7f1 fbd8 	bl	80001e0 <memchr>
 800ea30:	b138      	cbz	r0, 800ea42 <_vfiprintf_r+0x17a>
 800ea32:	9b04      	ldr	r3, [sp, #16]
 800ea34:	eba0 000a 	sub.w	r0, r0, sl
 800ea38:	2240      	movs	r2, #64	; 0x40
 800ea3a:	4082      	lsls	r2, r0
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	3401      	adds	r4, #1
 800ea40:	9304      	str	r3, [sp, #16]
 800ea42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea46:	4829      	ldr	r0, [pc, #164]	; (800eaec <_vfiprintf_r+0x224>)
 800ea48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea4c:	2206      	movs	r2, #6
 800ea4e:	f7f1 fbc7 	bl	80001e0 <memchr>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d03f      	beq.n	800ead6 <_vfiprintf_r+0x20e>
 800ea56:	4b26      	ldr	r3, [pc, #152]	; (800eaf0 <_vfiprintf_r+0x228>)
 800ea58:	bb1b      	cbnz	r3, 800eaa2 <_vfiprintf_r+0x1da>
 800ea5a:	9b03      	ldr	r3, [sp, #12]
 800ea5c:	3307      	adds	r3, #7
 800ea5e:	f023 0307 	bic.w	r3, r3, #7
 800ea62:	3308      	adds	r3, #8
 800ea64:	9303      	str	r3, [sp, #12]
 800ea66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea68:	443b      	add	r3, r7
 800ea6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea6c:	e768      	b.n	800e940 <_vfiprintf_r+0x78>
 800ea6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea72:	460c      	mov	r4, r1
 800ea74:	2001      	movs	r0, #1
 800ea76:	e7a6      	b.n	800e9c6 <_vfiprintf_r+0xfe>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	3401      	adds	r4, #1
 800ea7c:	9305      	str	r3, [sp, #20]
 800ea7e:	4619      	mov	r1, r3
 800ea80:	f04f 0c0a 	mov.w	ip, #10
 800ea84:	4620      	mov	r0, r4
 800ea86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea8a:	3a30      	subs	r2, #48	; 0x30
 800ea8c:	2a09      	cmp	r2, #9
 800ea8e:	d903      	bls.n	800ea98 <_vfiprintf_r+0x1d0>
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d0c6      	beq.n	800ea22 <_vfiprintf_r+0x15a>
 800ea94:	9105      	str	r1, [sp, #20]
 800ea96:	e7c4      	b.n	800ea22 <_vfiprintf_r+0x15a>
 800ea98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e7f0      	b.n	800ea84 <_vfiprintf_r+0x1bc>
 800eaa2:	ab03      	add	r3, sp, #12
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	462a      	mov	r2, r5
 800eaa8:	4b12      	ldr	r3, [pc, #72]	; (800eaf4 <_vfiprintf_r+0x22c>)
 800eaaa:	a904      	add	r1, sp, #16
 800eaac:	4630      	mov	r0, r6
 800eaae:	f7fd fd4d 	bl	800c54c <_printf_float>
 800eab2:	4607      	mov	r7, r0
 800eab4:	1c78      	adds	r0, r7, #1
 800eab6:	d1d6      	bne.n	800ea66 <_vfiprintf_r+0x19e>
 800eab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaba:	07d9      	lsls	r1, r3, #31
 800eabc:	d405      	bmi.n	800eaca <_vfiprintf_r+0x202>
 800eabe:	89ab      	ldrh	r3, [r5, #12]
 800eac0:	059a      	lsls	r2, r3, #22
 800eac2:	d402      	bmi.n	800eaca <_vfiprintf_r+0x202>
 800eac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eac6:	f7fe fbd0 	bl	800d26a <__retarget_lock_release_recursive>
 800eaca:	89ab      	ldrh	r3, [r5, #12]
 800eacc:	065b      	lsls	r3, r3, #25
 800eace:	f53f af1d 	bmi.w	800e90c <_vfiprintf_r+0x44>
 800ead2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ead4:	e71c      	b.n	800e910 <_vfiprintf_r+0x48>
 800ead6:	ab03      	add	r3, sp, #12
 800ead8:	9300      	str	r3, [sp, #0]
 800eada:	462a      	mov	r2, r5
 800eadc:	4b05      	ldr	r3, [pc, #20]	; (800eaf4 <_vfiprintf_r+0x22c>)
 800eade:	a904      	add	r1, sp, #16
 800eae0:	4630      	mov	r0, r6
 800eae2:	f7fd ffd7 	bl	800ca94 <_printf_i>
 800eae6:	e7e4      	b.n	800eab2 <_vfiprintf_r+0x1ea>
 800eae8:	0800f54c 	.word	0x0800f54c
 800eaec:	0800f556 	.word	0x0800f556
 800eaf0:	0800c54d 	.word	0x0800c54d
 800eaf4:	0800e8a3 	.word	0x0800e8a3
 800eaf8:	0800f552 	.word	0x0800f552

0800eafc <__sflush_r>:
 800eafc:	898a      	ldrh	r2, [r1, #12]
 800eafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb02:	4605      	mov	r5, r0
 800eb04:	0710      	lsls	r0, r2, #28
 800eb06:	460c      	mov	r4, r1
 800eb08:	d458      	bmi.n	800ebbc <__sflush_r+0xc0>
 800eb0a:	684b      	ldr	r3, [r1, #4]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	dc05      	bgt.n	800eb1c <__sflush_r+0x20>
 800eb10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	dc02      	bgt.n	800eb1c <__sflush_r+0x20>
 800eb16:	2000      	movs	r0, #0
 800eb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb1e:	2e00      	cmp	r6, #0
 800eb20:	d0f9      	beq.n	800eb16 <__sflush_r+0x1a>
 800eb22:	2300      	movs	r3, #0
 800eb24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb28:	682f      	ldr	r7, [r5, #0]
 800eb2a:	6a21      	ldr	r1, [r4, #32]
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	d032      	beq.n	800eb96 <__sflush_r+0x9a>
 800eb30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	075a      	lsls	r2, r3, #29
 800eb36:	d505      	bpl.n	800eb44 <__sflush_r+0x48>
 800eb38:	6863      	ldr	r3, [r4, #4]
 800eb3a:	1ac0      	subs	r0, r0, r3
 800eb3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb3e:	b10b      	cbz	r3, 800eb44 <__sflush_r+0x48>
 800eb40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb42:	1ac0      	subs	r0, r0, r3
 800eb44:	2300      	movs	r3, #0
 800eb46:	4602      	mov	r2, r0
 800eb48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb4a:	6a21      	ldr	r1, [r4, #32]
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	47b0      	blx	r6
 800eb50:	1c43      	adds	r3, r0, #1
 800eb52:	89a3      	ldrh	r3, [r4, #12]
 800eb54:	d106      	bne.n	800eb64 <__sflush_r+0x68>
 800eb56:	6829      	ldr	r1, [r5, #0]
 800eb58:	291d      	cmp	r1, #29
 800eb5a:	d82b      	bhi.n	800ebb4 <__sflush_r+0xb8>
 800eb5c:	4a29      	ldr	r2, [pc, #164]	; (800ec04 <__sflush_r+0x108>)
 800eb5e:	410a      	asrs	r2, r1
 800eb60:	07d6      	lsls	r6, r2, #31
 800eb62:	d427      	bmi.n	800ebb4 <__sflush_r+0xb8>
 800eb64:	2200      	movs	r2, #0
 800eb66:	6062      	str	r2, [r4, #4]
 800eb68:	04d9      	lsls	r1, r3, #19
 800eb6a:	6922      	ldr	r2, [r4, #16]
 800eb6c:	6022      	str	r2, [r4, #0]
 800eb6e:	d504      	bpl.n	800eb7a <__sflush_r+0x7e>
 800eb70:	1c42      	adds	r2, r0, #1
 800eb72:	d101      	bne.n	800eb78 <__sflush_r+0x7c>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	b903      	cbnz	r3, 800eb7a <__sflush_r+0x7e>
 800eb78:	6560      	str	r0, [r4, #84]	; 0x54
 800eb7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb7c:	602f      	str	r7, [r5, #0]
 800eb7e:	2900      	cmp	r1, #0
 800eb80:	d0c9      	beq.n	800eb16 <__sflush_r+0x1a>
 800eb82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb86:	4299      	cmp	r1, r3
 800eb88:	d002      	beq.n	800eb90 <__sflush_r+0x94>
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	f7ff f9f6 	bl	800df7c <_free_r>
 800eb90:	2000      	movs	r0, #0
 800eb92:	6360      	str	r0, [r4, #52]	; 0x34
 800eb94:	e7c0      	b.n	800eb18 <__sflush_r+0x1c>
 800eb96:	2301      	movs	r3, #1
 800eb98:	4628      	mov	r0, r5
 800eb9a:	47b0      	blx	r6
 800eb9c:	1c41      	adds	r1, r0, #1
 800eb9e:	d1c8      	bne.n	800eb32 <__sflush_r+0x36>
 800eba0:	682b      	ldr	r3, [r5, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d0c5      	beq.n	800eb32 <__sflush_r+0x36>
 800eba6:	2b1d      	cmp	r3, #29
 800eba8:	d001      	beq.n	800ebae <__sflush_r+0xb2>
 800ebaa:	2b16      	cmp	r3, #22
 800ebac:	d101      	bne.n	800ebb2 <__sflush_r+0xb6>
 800ebae:	602f      	str	r7, [r5, #0]
 800ebb0:	e7b1      	b.n	800eb16 <__sflush_r+0x1a>
 800ebb2:	89a3      	ldrh	r3, [r4, #12]
 800ebb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebb8:	81a3      	strh	r3, [r4, #12]
 800ebba:	e7ad      	b.n	800eb18 <__sflush_r+0x1c>
 800ebbc:	690f      	ldr	r7, [r1, #16]
 800ebbe:	2f00      	cmp	r7, #0
 800ebc0:	d0a9      	beq.n	800eb16 <__sflush_r+0x1a>
 800ebc2:	0793      	lsls	r3, r2, #30
 800ebc4:	680e      	ldr	r6, [r1, #0]
 800ebc6:	bf08      	it	eq
 800ebc8:	694b      	ldreq	r3, [r1, #20]
 800ebca:	600f      	str	r7, [r1, #0]
 800ebcc:	bf18      	it	ne
 800ebce:	2300      	movne	r3, #0
 800ebd0:	eba6 0807 	sub.w	r8, r6, r7
 800ebd4:	608b      	str	r3, [r1, #8]
 800ebd6:	f1b8 0f00 	cmp.w	r8, #0
 800ebda:	dd9c      	ble.n	800eb16 <__sflush_r+0x1a>
 800ebdc:	6a21      	ldr	r1, [r4, #32]
 800ebde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebe0:	4643      	mov	r3, r8
 800ebe2:	463a      	mov	r2, r7
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	47b0      	blx	r6
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	dc06      	bgt.n	800ebfa <__sflush_r+0xfe>
 800ebec:	89a3      	ldrh	r3, [r4, #12]
 800ebee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebf2:	81a3      	strh	r3, [r4, #12]
 800ebf4:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf8:	e78e      	b.n	800eb18 <__sflush_r+0x1c>
 800ebfa:	4407      	add	r7, r0
 800ebfc:	eba8 0800 	sub.w	r8, r8, r0
 800ec00:	e7e9      	b.n	800ebd6 <__sflush_r+0xda>
 800ec02:	bf00      	nop
 800ec04:	dfbffffe 	.word	0xdfbffffe

0800ec08 <_fflush_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	690b      	ldr	r3, [r1, #16]
 800ec0c:	4605      	mov	r5, r0
 800ec0e:	460c      	mov	r4, r1
 800ec10:	b913      	cbnz	r3, 800ec18 <_fflush_r+0x10>
 800ec12:	2500      	movs	r5, #0
 800ec14:	4628      	mov	r0, r5
 800ec16:	bd38      	pop	{r3, r4, r5, pc}
 800ec18:	b118      	cbz	r0, 800ec22 <_fflush_r+0x1a>
 800ec1a:	6a03      	ldr	r3, [r0, #32]
 800ec1c:	b90b      	cbnz	r3, 800ec22 <_fflush_r+0x1a>
 800ec1e:	f7fe f8d5 	bl	800cdcc <__sinit>
 800ec22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d0f3      	beq.n	800ec12 <_fflush_r+0xa>
 800ec2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec2c:	07d0      	lsls	r0, r2, #31
 800ec2e:	d404      	bmi.n	800ec3a <_fflush_r+0x32>
 800ec30:	0599      	lsls	r1, r3, #22
 800ec32:	d402      	bmi.n	800ec3a <_fflush_r+0x32>
 800ec34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec36:	f7fe fb17 	bl	800d268 <__retarget_lock_acquire_recursive>
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	4621      	mov	r1, r4
 800ec3e:	f7ff ff5d 	bl	800eafc <__sflush_r>
 800ec42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec44:	07da      	lsls	r2, r3, #31
 800ec46:	4605      	mov	r5, r0
 800ec48:	d4e4      	bmi.n	800ec14 <_fflush_r+0xc>
 800ec4a:	89a3      	ldrh	r3, [r4, #12]
 800ec4c:	059b      	lsls	r3, r3, #22
 800ec4e:	d4e1      	bmi.n	800ec14 <_fflush_r+0xc>
 800ec50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec52:	f7fe fb0a 	bl	800d26a <__retarget_lock_release_recursive>
 800ec56:	e7dd      	b.n	800ec14 <_fflush_r+0xc>

0800ec58 <__swhatbuf_r>:
 800ec58:	b570      	push	{r4, r5, r6, lr}
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec60:	2900      	cmp	r1, #0
 800ec62:	b096      	sub	sp, #88	; 0x58
 800ec64:	4615      	mov	r5, r2
 800ec66:	461e      	mov	r6, r3
 800ec68:	da0d      	bge.n	800ec86 <__swhatbuf_r+0x2e>
 800ec6a:	89a3      	ldrh	r3, [r4, #12]
 800ec6c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ec70:	f04f 0100 	mov.w	r1, #0
 800ec74:	bf0c      	ite	eq
 800ec76:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ec7a:	2340      	movne	r3, #64	; 0x40
 800ec7c:	2000      	movs	r0, #0
 800ec7e:	6031      	str	r1, [r6, #0]
 800ec80:	602b      	str	r3, [r5, #0]
 800ec82:	b016      	add	sp, #88	; 0x58
 800ec84:	bd70      	pop	{r4, r5, r6, pc}
 800ec86:	466a      	mov	r2, sp
 800ec88:	f000 f848 	bl	800ed1c <_fstat_r>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	dbec      	blt.n	800ec6a <__swhatbuf_r+0x12>
 800ec90:	9901      	ldr	r1, [sp, #4]
 800ec92:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ec96:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ec9a:	4259      	negs	r1, r3
 800ec9c:	4159      	adcs	r1, r3
 800ec9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eca2:	e7eb      	b.n	800ec7c <__swhatbuf_r+0x24>

0800eca4 <__smakebuf_r>:
 800eca4:	898b      	ldrh	r3, [r1, #12]
 800eca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eca8:	079d      	lsls	r5, r3, #30
 800ecaa:	4606      	mov	r6, r0
 800ecac:	460c      	mov	r4, r1
 800ecae:	d507      	bpl.n	800ecc0 <__smakebuf_r+0x1c>
 800ecb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecb4:	6023      	str	r3, [r4, #0]
 800ecb6:	6123      	str	r3, [r4, #16]
 800ecb8:	2301      	movs	r3, #1
 800ecba:	6163      	str	r3, [r4, #20]
 800ecbc:	b002      	add	sp, #8
 800ecbe:	bd70      	pop	{r4, r5, r6, pc}
 800ecc0:	ab01      	add	r3, sp, #4
 800ecc2:	466a      	mov	r2, sp
 800ecc4:	f7ff ffc8 	bl	800ec58 <__swhatbuf_r>
 800ecc8:	9900      	ldr	r1, [sp, #0]
 800ecca:	4605      	mov	r5, r0
 800eccc:	4630      	mov	r0, r6
 800ecce:	f7ff f9c9 	bl	800e064 <_malloc_r>
 800ecd2:	b948      	cbnz	r0, 800ece8 <__smakebuf_r+0x44>
 800ecd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecd8:	059a      	lsls	r2, r3, #22
 800ecda:	d4ef      	bmi.n	800ecbc <__smakebuf_r+0x18>
 800ecdc:	f023 0303 	bic.w	r3, r3, #3
 800ece0:	f043 0302 	orr.w	r3, r3, #2
 800ece4:	81a3      	strh	r3, [r4, #12]
 800ece6:	e7e3      	b.n	800ecb0 <__smakebuf_r+0xc>
 800ece8:	89a3      	ldrh	r3, [r4, #12]
 800ecea:	6020      	str	r0, [r4, #0]
 800ecec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecf0:	81a3      	strh	r3, [r4, #12]
 800ecf2:	9b00      	ldr	r3, [sp, #0]
 800ecf4:	6163      	str	r3, [r4, #20]
 800ecf6:	9b01      	ldr	r3, [sp, #4]
 800ecf8:	6120      	str	r0, [r4, #16]
 800ecfa:	b15b      	cbz	r3, 800ed14 <__smakebuf_r+0x70>
 800ecfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed00:	4630      	mov	r0, r6
 800ed02:	f000 f81d 	bl	800ed40 <_isatty_r>
 800ed06:	b128      	cbz	r0, 800ed14 <__smakebuf_r+0x70>
 800ed08:	89a3      	ldrh	r3, [r4, #12]
 800ed0a:	f023 0303 	bic.w	r3, r3, #3
 800ed0e:	f043 0301 	orr.w	r3, r3, #1
 800ed12:	81a3      	strh	r3, [r4, #12]
 800ed14:	89a3      	ldrh	r3, [r4, #12]
 800ed16:	431d      	orrs	r5, r3
 800ed18:	81a5      	strh	r5, [r4, #12]
 800ed1a:	e7cf      	b.n	800ecbc <__smakebuf_r+0x18>

0800ed1c <_fstat_r>:
 800ed1c:	b538      	push	{r3, r4, r5, lr}
 800ed1e:	4d07      	ldr	r5, [pc, #28]	; (800ed3c <_fstat_r+0x20>)
 800ed20:	2300      	movs	r3, #0
 800ed22:	4604      	mov	r4, r0
 800ed24:	4608      	mov	r0, r1
 800ed26:	4611      	mov	r1, r2
 800ed28:	602b      	str	r3, [r5, #0]
 800ed2a:	f7f2 fed4 	bl	8001ad6 <_fstat>
 800ed2e:	1c43      	adds	r3, r0, #1
 800ed30:	d102      	bne.n	800ed38 <_fstat_r+0x1c>
 800ed32:	682b      	ldr	r3, [r5, #0]
 800ed34:	b103      	cbz	r3, 800ed38 <_fstat_r+0x1c>
 800ed36:	6023      	str	r3, [r4, #0]
 800ed38:	bd38      	pop	{r3, r4, r5, pc}
 800ed3a:	bf00      	nop
 800ed3c:	20002a14 	.word	0x20002a14

0800ed40 <_isatty_r>:
 800ed40:	b538      	push	{r3, r4, r5, lr}
 800ed42:	4d06      	ldr	r5, [pc, #24]	; (800ed5c <_isatty_r+0x1c>)
 800ed44:	2300      	movs	r3, #0
 800ed46:	4604      	mov	r4, r0
 800ed48:	4608      	mov	r0, r1
 800ed4a:	602b      	str	r3, [r5, #0]
 800ed4c:	f7f2 fed3 	bl	8001af6 <_isatty>
 800ed50:	1c43      	adds	r3, r0, #1
 800ed52:	d102      	bne.n	800ed5a <_isatty_r+0x1a>
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	b103      	cbz	r3, 800ed5a <_isatty_r+0x1a>
 800ed58:	6023      	str	r3, [r4, #0]
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
 800ed5c:	20002a14 	.word	0x20002a14

0800ed60 <_sbrk_r>:
 800ed60:	b538      	push	{r3, r4, r5, lr}
 800ed62:	4d06      	ldr	r5, [pc, #24]	; (800ed7c <_sbrk_r+0x1c>)
 800ed64:	2300      	movs	r3, #0
 800ed66:	4604      	mov	r4, r0
 800ed68:	4608      	mov	r0, r1
 800ed6a:	602b      	str	r3, [r5, #0]
 800ed6c:	f7f2 fedc 	bl	8001b28 <_sbrk>
 800ed70:	1c43      	adds	r3, r0, #1
 800ed72:	d102      	bne.n	800ed7a <_sbrk_r+0x1a>
 800ed74:	682b      	ldr	r3, [r5, #0]
 800ed76:	b103      	cbz	r3, 800ed7a <_sbrk_r+0x1a>
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	bd38      	pop	{r3, r4, r5, pc}
 800ed7c:	20002a14 	.word	0x20002a14

0800ed80 <__assert_func>:
 800ed80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed82:	4614      	mov	r4, r2
 800ed84:	461a      	mov	r2, r3
 800ed86:	4b09      	ldr	r3, [pc, #36]	; (800edac <__assert_func+0x2c>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	4605      	mov	r5, r0
 800ed8c:	68d8      	ldr	r0, [r3, #12]
 800ed8e:	b14c      	cbz	r4, 800eda4 <__assert_func+0x24>
 800ed90:	4b07      	ldr	r3, [pc, #28]	; (800edb0 <__assert_func+0x30>)
 800ed92:	9100      	str	r1, [sp, #0]
 800ed94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed98:	4906      	ldr	r1, [pc, #24]	; (800edb4 <__assert_func+0x34>)
 800ed9a:	462b      	mov	r3, r5
 800ed9c:	f000 f844 	bl	800ee28 <fiprintf>
 800eda0:	f000 f854 	bl	800ee4c <abort>
 800eda4:	4b04      	ldr	r3, [pc, #16]	; (800edb8 <__assert_func+0x38>)
 800eda6:	461c      	mov	r4, r3
 800eda8:	e7f3      	b.n	800ed92 <__assert_func+0x12>
 800edaa:	bf00      	nop
 800edac:	200000f4 	.word	0x200000f4
 800edb0:	0800f567 	.word	0x0800f567
 800edb4:	0800f574 	.word	0x0800f574
 800edb8:	0800f5a2 	.word	0x0800f5a2

0800edbc <_calloc_r>:
 800edbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edbe:	fba1 2402 	umull	r2, r4, r1, r2
 800edc2:	b94c      	cbnz	r4, 800edd8 <_calloc_r+0x1c>
 800edc4:	4611      	mov	r1, r2
 800edc6:	9201      	str	r2, [sp, #4]
 800edc8:	f7ff f94c 	bl	800e064 <_malloc_r>
 800edcc:	9a01      	ldr	r2, [sp, #4]
 800edce:	4605      	mov	r5, r0
 800edd0:	b930      	cbnz	r0, 800ede0 <_calloc_r+0x24>
 800edd2:	4628      	mov	r0, r5
 800edd4:	b003      	add	sp, #12
 800edd6:	bd30      	pop	{r4, r5, pc}
 800edd8:	220c      	movs	r2, #12
 800edda:	6002      	str	r2, [r0, #0]
 800eddc:	2500      	movs	r5, #0
 800edde:	e7f8      	b.n	800edd2 <_calloc_r+0x16>
 800ede0:	4621      	mov	r1, r4
 800ede2:	f7fe f96f 	bl	800d0c4 <memset>
 800ede6:	e7f4      	b.n	800edd2 <_calloc_r+0x16>

0800ede8 <__ascii_mbtowc>:
 800ede8:	b082      	sub	sp, #8
 800edea:	b901      	cbnz	r1, 800edee <__ascii_mbtowc+0x6>
 800edec:	a901      	add	r1, sp, #4
 800edee:	b142      	cbz	r2, 800ee02 <__ascii_mbtowc+0x1a>
 800edf0:	b14b      	cbz	r3, 800ee06 <__ascii_mbtowc+0x1e>
 800edf2:	7813      	ldrb	r3, [r2, #0]
 800edf4:	600b      	str	r3, [r1, #0]
 800edf6:	7812      	ldrb	r2, [r2, #0]
 800edf8:	1e10      	subs	r0, r2, #0
 800edfa:	bf18      	it	ne
 800edfc:	2001      	movne	r0, #1
 800edfe:	b002      	add	sp, #8
 800ee00:	4770      	bx	lr
 800ee02:	4610      	mov	r0, r2
 800ee04:	e7fb      	b.n	800edfe <__ascii_mbtowc+0x16>
 800ee06:	f06f 0001 	mvn.w	r0, #1
 800ee0a:	e7f8      	b.n	800edfe <__ascii_mbtowc+0x16>

0800ee0c <__ascii_wctomb>:
 800ee0c:	b149      	cbz	r1, 800ee22 <__ascii_wctomb+0x16>
 800ee0e:	2aff      	cmp	r2, #255	; 0xff
 800ee10:	bf85      	ittet	hi
 800ee12:	238a      	movhi	r3, #138	; 0x8a
 800ee14:	6003      	strhi	r3, [r0, #0]
 800ee16:	700a      	strbls	r2, [r1, #0]
 800ee18:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee1c:	bf98      	it	ls
 800ee1e:	2001      	movls	r0, #1
 800ee20:	4770      	bx	lr
 800ee22:	4608      	mov	r0, r1
 800ee24:	4770      	bx	lr
	...

0800ee28 <fiprintf>:
 800ee28:	b40e      	push	{r1, r2, r3}
 800ee2a:	b503      	push	{r0, r1, lr}
 800ee2c:	4601      	mov	r1, r0
 800ee2e:	ab03      	add	r3, sp, #12
 800ee30:	4805      	ldr	r0, [pc, #20]	; (800ee48 <fiprintf+0x20>)
 800ee32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee36:	6800      	ldr	r0, [r0, #0]
 800ee38:	9301      	str	r3, [sp, #4]
 800ee3a:	f7ff fd45 	bl	800e8c8 <_vfiprintf_r>
 800ee3e:	b002      	add	sp, #8
 800ee40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee44:	b003      	add	sp, #12
 800ee46:	4770      	bx	lr
 800ee48:	200000f4 	.word	0x200000f4

0800ee4c <abort>:
 800ee4c:	b508      	push	{r3, lr}
 800ee4e:	2006      	movs	r0, #6
 800ee50:	f000 f82c 	bl	800eeac <raise>
 800ee54:	2001      	movs	r0, #1
 800ee56:	f7f2 fdef 	bl	8001a38 <_exit>

0800ee5a <_raise_r>:
 800ee5a:	291f      	cmp	r1, #31
 800ee5c:	b538      	push	{r3, r4, r5, lr}
 800ee5e:	4604      	mov	r4, r0
 800ee60:	460d      	mov	r5, r1
 800ee62:	d904      	bls.n	800ee6e <_raise_r+0x14>
 800ee64:	2316      	movs	r3, #22
 800ee66:	6003      	str	r3, [r0, #0]
 800ee68:	f04f 30ff 	mov.w	r0, #4294967295
 800ee6c:	bd38      	pop	{r3, r4, r5, pc}
 800ee6e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ee70:	b112      	cbz	r2, 800ee78 <_raise_r+0x1e>
 800ee72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee76:	b94b      	cbnz	r3, 800ee8c <_raise_r+0x32>
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f000 f831 	bl	800eee0 <_getpid_r>
 800ee7e:	462a      	mov	r2, r5
 800ee80:	4601      	mov	r1, r0
 800ee82:	4620      	mov	r0, r4
 800ee84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee88:	f000 b818 	b.w	800eebc <_kill_r>
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d00a      	beq.n	800eea6 <_raise_r+0x4c>
 800ee90:	1c59      	adds	r1, r3, #1
 800ee92:	d103      	bne.n	800ee9c <_raise_r+0x42>
 800ee94:	2316      	movs	r3, #22
 800ee96:	6003      	str	r3, [r0, #0]
 800ee98:	2001      	movs	r0, #1
 800ee9a:	e7e7      	b.n	800ee6c <_raise_r+0x12>
 800ee9c:	2400      	movs	r4, #0
 800ee9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eea2:	4628      	mov	r0, r5
 800eea4:	4798      	blx	r3
 800eea6:	2000      	movs	r0, #0
 800eea8:	e7e0      	b.n	800ee6c <_raise_r+0x12>
	...

0800eeac <raise>:
 800eeac:	4b02      	ldr	r3, [pc, #8]	; (800eeb8 <raise+0xc>)
 800eeae:	4601      	mov	r1, r0
 800eeb0:	6818      	ldr	r0, [r3, #0]
 800eeb2:	f7ff bfd2 	b.w	800ee5a <_raise_r>
 800eeb6:	bf00      	nop
 800eeb8:	200000f4 	.word	0x200000f4

0800eebc <_kill_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4d07      	ldr	r5, [pc, #28]	; (800eedc <_kill_r+0x20>)
 800eec0:	2300      	movs	r3, #0
 800eec2:	4604      	mov	r4, r0
 800eec4:	4608      	mov	r0, r1
 800eec6:	4611      	mov	r1, r2
 800eec8:	602b      	str	r3, [r5, #0]
 800eeca:	f7f2 fda5 	bl	8001a18 <_kill>
 800eece:	1c43      	adds	r3, r0, #1
 800eed0:	d102      	bne.n	800eed8 <_kill_r+0x1c>
 800eed2:	682b      	ldr	r3, [r5, #0]
 800eed4:	b103      	cbz	r3, 800eed8 <_kill_r+0x1c>
 800eed6:	6023      	str	r3, [r4, #0]
 800eed8:	bd38      	pop	{r3, r4, r5, pc}
 800eeda:	bf00      	nop
 800eedc:	20002a14 	.word	0x20002a14

0800eee0 <_getpid_r>:
 800eee0:	f7f2 bd92 	b.w	8001a08 <_getpid>

0800eee4 <_init>:
 800eee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eee6:	bf00      	nop
 800eee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eeea:	bc08      	pop	{r3}
 800eeec:	469e      	mov	lr, r3
 800eeee:	4770      	bx	lr

0800eef0 <_fini>:
 800eef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eef2:	bf00      	nop
 800eef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eef6:	bc08      	pop	{r3}
 800eef8:	469e      	mov	lr, r3
 800eefa:	4770      	bx	lr
